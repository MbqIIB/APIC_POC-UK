swagger: "2.0"
info:
  title: o2apic-phoneservice
  x-ibm-name: o2apic-phoneservice
  version: 1.0.0
schemes:
- https
basePath: /phoneservice
produces:
- application/json
- application/xml
consumes:
- application/json
- application/xml
security:
- clientIdSecret: []
  clientIdHeader: []
securityDefinitions:
  clientIdSecret:
    type: apiKey
    name: X-IBM-Client-Secret
    in: header
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
    billedcharges:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/billedcharges
    recommendation:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/billedcharges/recommendation
    recentcharges:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/recentcharges
    previousbills:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/previousbills
    msisdndetails:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym
    phoneplan:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/cca/phoneplan
    upgradesandpromotions:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
    billprofile:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/v2/consumer/CURRENT/paym/bill/profile
  catalogs:
    sandbox:
      properties:
        billedcharges: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/billedcharges
        recommendation: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/billedcharges/recommendation
        recentcharges: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/recentcharges
        previousbills: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/previousbills
        msisdndetails: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym
        phoneplan: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/cca/phoneplan
        upgradesandpromotions: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
        billprofile: https://zeus-lb.ref.o2.co.uk:5443/phone/v2/consumer/CURRENT/paym/bill/profile
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLoggingData
        description: This GW Script will extract input metadata for logging
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
    - activity-log:
        version: 1.0.0
        title: Log-Payload
        content: payload
        error-content: payload
    - gatewayscript:
        version: 1.0.0
        title: GS-CreateAccessTokenRequest
        description: Create request for access token.
        source: "/* ************************************************************************************************************
          */\r\n/* ************************************************************************************************************
          */\r\n/* FileName                        Version    Created By                  Modified
          By            Date           */\r\n/* CreateAccessTokenRequest.js      1.0
          \      Dinesh Tomar                                       02-May-2018    */\r\n/*
          \                                                                                                             */\r\n/*
          ************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will form the request to fetch the
          AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
          ************************************************************************************************************
          */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read all
          http headers from the input request\r\nvar authCode = apim.getvariable('message.headers.x-authcode');\r\nvar
          clientId = apim.getvariable('client.app.id');\r\nvar clientSecret = apim.getvariable('client.app.secret');\r\nvar
          apicId = apim.getvariable('apic_id');\r\nvar apicsecret = apim.getvariable('apic_secret');\r\nvar
          buffer = new Buffer(apicId + \":\" + apicsecret);\r\nvar authorization =
          \"Basic \" + buffer.toString('base64');\r\n//var authorization = \"Basic
          \" + (Buffer.from(apicId + ':' + apicsecret).toString('base64'));\r\nvar
          requestURL = apim.getvariable('request.uri');\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
          hostName = requestURL.substr(0, requestURL.indexOf(orgName));\r\nvar catalog
          = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix', hostName
          + orgName + '/' + catalog);\r\napim.setvariable('message.headers.X-IBM-Client-Id',
          clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret', clientSecret);\r\napim.setvariable('message.headers.x-authcode',
          authCode);\r\napim.setvariable('message.headers.authorization', authorization);\r\napim.setvariable('message.headers.content-type',
          'application/json');\r\n\r\nvar accessTokenURL = apim.getvariable('apicURLPrefix')
          + '/' + 'auth/accesstoken';\r\napim.setvariable('accessTokenURL', accessTokenURL);\r\n\r\n\r\n//record
          time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
          (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AccessTokenAPI');\r\n"
    - invoke:
        version: 1.0.0
        title: Invoke-AccessTokenAPI
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        target-url: $(accessTokenURL)
        output: accesstoken
    - gatewayscript:
        version: 1.0.0
        title: GS-CreateAAAConfigRequest
        description: Create request to get AAA config file.
        source: "/* ************************************************************************************************************
          */\r\n/* ************************************************************************************************************
          */\r\n/* FileName                     Version    Created By                  Modified
          By               Date           */\r\n/* CreateAAAConfigRequest.js    1.0
          \       Dinesh Tomar                                          02-May-2018
          \   */\r\n/*                                                                                                              */\r\n/*
          ************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will form the request to fetch the
          AAA config file.                             */\r\n/*                                                                                                              */
          \                                                                               \r\n/*
          ************************************************************************************************************
          */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar clientId
          = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
          clientId);\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar catalog
          = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix', 'https://0.0.0.0:9443/'
          + orgName + '/' + catalog);\r\n\r\n//form url for to fetch properties config
          JSON\r\nvar aaaConfigURL = apim.getvariable('apicURLPrefix') + '/' + 'config/aaaconfig';\r\napim.setvariable('aaaConfigURL',
          aaaConfigURL);\r\n\r\n//record time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
          (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AAAConfig');"
    - invoke:
        version: 1.0.0
        title: Invoke-AAAConfig
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        description: Load AAA config file
        target-url: $(aaaConfigURL)
    - xslt:
        version: 1.0.0
        title: XSLT-AAA
        input: true
        description: Authenticates and authorize the consumer
        source: "<!-- ************************************************************************************************************
          -->\r\n<!-- ************************************************************************************************************
          -->\r\n<!-- FileName                          Version    Created By             Modified
          By               Date           -->\r\n<!-- AAA.xsl                           1.0
          \       Dinesh Tomar                                     13-July-2018   -->\r\n<!--
          \                                                                                                             -->\r\n<!--
          ************************************************************************************************************
          -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer for
          the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
          Required params: request specific                                                                            -->\r\n<!--
          ************************************************************************************************************
          -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
          xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
          xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp apim
          str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\" />\r\n
          \   <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\" method=\"xml\"/>\r\n
          \   <xsl:strip-space elements=\"*\"/>\r\n    \r\n    <xsl:template match=\"/\">\r\n
          \       <!--record time in ms just after the invoke policy-->\r\n        <xsl:variable
          name=\"endTimeMS\" select=\"dp:time-value()\"/>\r\n        <xsl:variable
          name=\"timeTakenByPreviousPolicy\"  select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
          \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
          | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,' ms'
          )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'logString'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"$logString\" />\r\n        </xsl:call-template>\r\n
          \       \r\n        <xsl:variable name=\"aaaConfiguration\" select=\".\"/>\r\n
          \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"'false'\" />\r\n        </xsl:call-template>\r\n
          \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'uidMatched'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"'false'\" />\r\n        </xsl:call-template>\r\n
          \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'authCPassed'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"'false'\" />\r\n        </xsl:call-template>\r\n
          \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'authZPassed'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"'false'\" />\r\n        </xsl:call-template>\r\n
          \       <xsl:variable name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
          \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
          ',')\"/>\r\n        <xsl:variable name=\"userID\" select=\"apim:getVariable('accesstoken.user_id')\"/>\r\n
          \       <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[UserID
          = $userID]\"/>\r\n        <xsl:choose>\r\n            <xsl:when test=\"string-length($userConfig)
          = 0\">\r\n                <xsl:call-template name=\"apim:setVariable\">\r\n
          \                   <xsl:with-param name=\"varName\" select=\"'errorName'\"
          />\r\n                    <xsl:with-param name=\"value\" select=\"'InvalidUserId'\"
          />\r\n                </xsl:call-template>\r\n                <xsl:call-template
          name=\"apim:error\">\r\n                    <xsl:with-param name=\"httpCode\"
          select=\"'400'\" />\r\n                    <xsl:with-param name=\"httpReasonPhrase\"
          select=\"'Invalid request'\" />\r\n                    <xsl:with-param name=\"errorMessage\"
          select=\"concat('UserID &quot;', $userID, '&quot; is not provisioned.')\"
          />\r\n                </xsl:call-template>\r\n            </xsl:when>\r\n
          \           <xsl:otherwise>\r\n                <xsl:for-each select=\"$userConfig\">\r\n
          \                   <xsl:if test=\"apim:getVariable('authCPassed') = 'false'\">\r\n
          \                       <xsl:variable name=\"ipRangeFromConfig\" select=\"./IPNetwork/text()\"/>\r\n
          \                       <xsl:variable name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n
          \                       <xsl:if test=\"apim:getVariable('ipAddressMatched')
          = 'false'\">\r\n                            <xsl:for-each select=\"$clientIPAddressTokens\">\r\n
          \                               <xsl:variable name=\"ipAddressToken\">\r\n
          \                                   <xsl:value-of select=\".\"/>\r\n                                </xsl:variable>
          \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
          $ipAddressToken)\">\r\n                                    <xsl:call-template
          name=\"apim:setVariable\">\r\n                                        <xsl:with-param
          name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
          name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
          \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
          \                       </xsl:if>\r\n                        <xsl:choose>\r\n
          \                           <xsl:when test=\"apim:getVariable('ipAddressMatched')
          = 'true'\">\r\n                                <xsl:call-template name=\"apim:setVariable\">\r\n
          \                                   <xsl:with-param name=\"varName\" select=\"'authCPassed'\"/>\r\n
          \                                   <xsl:with-param name=\"value\" select=\"'true'\"
          />\r\n                                </xsl:call-template>\r\n                                <xsl:call-template
          name=\"apim:setVariable\">\r\n                                    <xsl:with-param
          name=\"varName\" select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
          name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
          \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
          \                               <xsl:call-template name=\"apim:setVariable\">\r\n
          \                                   <xsl:with-param name=\"varName\" select=\"'errorName'\"
          />\r\n                                    <xsl:with-param name=\"value\"
          select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
          \                               <xsl:call-template name=\"apim:error\">\r\n
          \                                   <xsl:with-param name=\"httpCode\" select=\"'400'\"
          />\r\n                                    <xsl:with-param name=\"httpReasonPhrase\"
          select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
          name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
          '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
          \                           </xsl:otherwise>\r\n                        </xsl:choose>\r\n
          \                   </xsl:if>                        \r\n                </xsl:for-each>\r\n
          \           </xsl:otherwise>\r\n        </xsl:choose>\r\n        <xsl:if
          test=\"apim:getVariable('authCPassed') = 'true'\">\r\n            <xsl:variable
          name=\"allowedPaths\">\r\n                <allowedPaths>\r\n                    <xsl:for-each
          select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
          \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
          = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
          '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
          \               </allowedPaths>\r\n            </xsl:variable>\r\n            <xsl:variable
          name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
          \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
          \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
          \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n                        <xsl:call-template
          name=\"apim:setVariable\">\r\n                            <xsl:with-param
          name=\"varName\" select=\"'authZPassed'\" />\r\n                            <xsl:with-param
          name=\"value\" select=\"'true'\" />\r\n                        </xsl:call-template>\r\n
          \                   </xsl:if>\r\n                </xsl:if>\r\n            </xsl:for-each>\r\n
          \           <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
          \               <xsl:call-template name=\"apim:setVariable\">\r\n                    <xsl:with-param
          name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
          name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
          \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
          name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
          name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
          name=\"errorMessage\" select=\"'Authorization failed.'\" />\r\n                </xsl:call-template>\r\n
          \           </xsl:if>\r\n        </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
    - gatewayscript:
        version: 1.0.0
        title: GS-CreateRequestforDisambiguitionId
        source: "/* ************************************************************************************************************
          */\r\n/* ************************************************************************************************************
          */\r\n/* FileName                               Version    Created By             Modified
          By          Date           */\r\n/* CreateRequestforDisambiguitionId.js
          \   1.0        Dinesh Tomar                                02-May-2018    */\r\n/*
          \                                                                                                             */\r\n/*
          ************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will form the request to fetch the
          AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
          ************************************************************************************************************
          */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read all
          http headers from the input request\r\nvar authProperties = apim.getvariable('authconfig.body');\r\nvar
          msisdn = apim.getvariable('message.headers.msisdn');\r\nvar clientId = apim.getvariable('client.app.id');\r\nvar
          clientSecret = apim.getvariable('client.app.secret');\r\nvar accessToken
          = apim.getvariable('accesstoken.body').access_token;\r\nvar userId = apim.getvariable('accesstoken.body').user_id;\r\n//var
          authorization = \"Bearer \" + accessToken;\r\napim.setvariable('message.headers.X-IBM-Client-Id',
          clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret', clientSecret);\r\napim.setvariable('message.headers.msisdn',
          msisdn);\r\napim.setvariable('message.headers.authorization', accessToken);\r\napim.setvariable('message.headers.user_id',
          userId);\r\n\r\nvar disambiguationIdURL = apim.getvariable('apicURLPrefix')
          + '/' + 'auth/disambiguationid';\r\napim.setvariable('disambiguationIdURL',
          disambiguationIdURL);\r\n\r\n//record time in ms just before the invoke
          policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
          'Invoke-DisambiguationIdAPI');\r\n"
    - invoke:
        version: 1.0.0
        title: Invoke-DisambiguationIdAPI
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        target-url: $(disambiguationIdURL)
        output: disambiguationId
    - gatewayscript:
        version: 1.0.0
        title: GS-CreatePhoneserviceRequest
        source: "/* ********************************************************************************************************************
          */\r\n/* ********************************************************************************************************************
          */\r\n/* FileName                             Version    Created By                  Modified
          By               Date           */\r\n/* CreatePhoneserviceRequest.js          1.0
          \       Dinesh Tomar                                         02-May-2018
          \   */\r\n/*                                                                                                                      */\r\n/*
          ********************************************************************************************************************
          */\r\n/* Purpose:                                                                                                             */\r\n/*
          Required params:                                                                                                     */\r\n/*
          ********************************************************************************************************************
          */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//record
          time in ms just after the invoke policy\r\nvar accessToken = apim.getvariable('accesstoken.body').access_token;\r\nvar
          userId = apim.getvariable('accesstoken.body').user_id;\r\nvar disambiguationId
          = apim.getvariable('disambiguationId.body').disambiguation_id;\r\napim.setvariable('message.headers.disambiguation-id',
          disambiguationId);\r\napim.setvariable('message.headers.authorization',
          accessToken);\r\nvar path = apim.getvariable('request.path');\r\nvar phoneDetailsURL;\r\nif
          (path == '/auth/phone/consumer/CURRENT/paym/bill/billedcharges') {\r\n    phoneDetailsURL
          = apim.getvariable('billedcharges');\r\n    phoneDetailsURL = phoneDetailsURL.replace('CURRENT',
          userId);\r\n    apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n}
          else if (path == '/auth/phone/consumer/CURRENT/paym/billedcharges/recommendation')
          {\r\n    phoneDetailsURL = apim.getvariable('recommendation');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym/bill/recentcharges')
          {\r\n    phoneDetailsURL = apim.getvariable('recentcharges');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym/bill/previousbills')
          {\r\n    phoneDetailsURL = apim.getvariable('previousbills');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym')
          {\r\n    phoneDetailsURL = apim.getvariable('msisdndetails');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym/cca/phoneplan')
          {\r\n    phoneDetailsURL = apim.getvariable('phoneplan');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions')
          {\r\n    phoneDetailsURL = apim.getvariable('upgradeoptionsandpromotions');\r\n
          \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n} else if (path == '/auth/phone/v2/consumer/CURRENT/paym/bill/profile')
          {\r\n    phoneDetailsURL = apim.getvariable('billprofile');\r\n    phoneDetailsURL
          = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
          phoneDetailsURL);\r\n}\r\n//record time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
          (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-PhoneDetails');\r\n"
    - invoke:
        version: 1.0.0
        title: Invoke-PhoneDetails
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        target-url: $(phoneDetailsURL)
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractTime
        description: This GW Script file will extract tiem taken by invoke policy
          to execute and pass it to the log string
        source: |-
          /* *************************************************************************************************************** */
          /* *************************************************************************************************************** */
          /* FileName                        Version    Created By                  Modified By               Date           */
          /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
          /*                                                                                                                 */
          /* *************************************************************************************************************** */
          /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
          /*                                                                                                                 */
          /* Required params:                                                                                                */
          /* *************************************************************************************************************** */
          //record time in ms just after the invoke policy
          var endTimeMS = (new Date()).getTime();
          var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
          var logString = apim.getvariable('logString');
          logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
          apim.setvariable('logString', logString);
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        description: This GW Script will extract final metadata for logging
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
  gateway: datapower-gateway
  type: rest
paths:
  /phone/consumer/CURRENT/paym/bill/billedcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/billedcharges/recommendation:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/recentcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/previousbills:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/cca/phoneplan:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/upgradeoptionsandpromotions:
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
  /phone/v2/consumer/CURRENT/paym/bill/profile:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
