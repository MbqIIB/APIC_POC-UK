swagger: "2.0"
info:
  title: authapi
  x-ibm-name: authapi
  version: 1.0.0
schemes:
- https
basePath: /auth
produces:
- application/json
- application/xml
consumes:
- application/json
- application/xml
security:
- clientIdSecret: []
  clientIdHeader: []
securityDefinitions:
  clientIdSecret:
    type: apiKey
    name: X-IBM-Client-Secret
    in: header
  clientIdHeader:
    type: apiKey
    name: X-IBM-Client-Id
    in: header
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
    authcode-url:
      value: https://auth.ref.o2.co.uk/auth/v1/device/auth
      description: URL of the authcode service.
    accesstoken-url:
      value: https://auth.ref.o2.co.uk:443/auth/v1/token
      description: URL of the access token service.
    grant-type:
      value: auth_cookie
      description: The type of access granted for access token service
    assets-url:
      value: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
      description: URL for retrieving assets.
    validatetoken-url:
      value: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
      description: URL for validating access token.
    disambiguationId-url:
      value: https://auth.ref.o2.co.uk/auth/v1/auth/select
      description: URL for getting disambiguation id.
    assetsURI:
      value: /auth/v1/person/CURRENT/asset
      description: URI of assets API.
  catalogs:
    sandbox:
      properties:
        authcode-url: https://auth.ref.o2.co.uk/auth/v1/device/auth
        accesstoken-url: https://auth.ref.o2.co.uk:443/auth/v1/token
        grant-type: auth_cookie
        assets-url: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
        validatetoken-url: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
        disambiguationId-url: https://auth.ref.o2.co.uk/auth/v1/auth/select
        assetsURI: /auth/v1/person/CURRENT/asset
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLoggingData
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
        description: This GW Script will extract input metadata for logging
    - activity-log:
        version: 1.0.0
        title: Log-Payload
        content: payload
        error-content: payload
    - gatewayscript:
        version: 1.0.0
        title: GS-FetchValidationConfig
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* FetchValidationConfig.js      1.0        Dinesh Tomar                                          04-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will create URL to fetch validation config for all apis                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type', 'application/json');
          //form url for to fetch errorConfig JSON
          var requestURL = apim.getvariable('request.uri');
          var orgName = apim.getvariable('api.org.name');
          var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', hostName+orgName+'/'+catalog);
          var validationConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/validationconfig';
          apim.setvariable('validationConfigURL', validationConfigURL);

          //record time in ms just before the invoke policy
          apim.setvariable('startTimeMS', (new Date()).getTime());
          apim.setvariable('policyName', 'Invoke-ValidationConfig');
        description: This GW Script will create URL to fetch validation config for
          all apis
    - invoke:
        version: 1.0.0
        title: Invoke-ValidationConfig
        timeout: 60
        verb: GET
        cache-response: time-to-live
        cache-ttl: 60
        description: Load all validation config in context
        target-url: $(validationConfigURL)
        output: validationConfig
    - gatewayscript:
        version: 1.0.0
        title: GS-ValidateParams
        source: "/* **********************************************************************************************************
          */\n/* **********************************************************************************************************
          */\n/* FileName                   Version    Created By                  Modified
          By               Date           */\n/* ValidateParams.js          1.0        Dinesh
          Tomar                                          03-July-2018   */\n/*                                                                                                            */\n/*
          **********************************************************************************************************
          */\n/* Purpose: This GW Script file will return all API configurations to
          be used for validating input params     */\n/*                                                                                                            */\n/*
          Required params:                                                                                           */\n/*
          ************************************************************************************************************/\n\n//record
          time in ms just after the invoke policy\nvar endTimeMS = (new Date()).getTime();\nvar
          timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\nvar validationConfig = apim.getvariable('validationConfig.body');\nif
          (validationConfig == null || isJSONEmpty(validationConfig)){\n    apim.setvariable('errorName',
          'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal Error',
          'Connection error');\n}\nelse {\n    var apiName = apim.getvariable('api.name');\n
          \   var operationName = apim.getvariable('api.operation.path');\n    var
          apiConfig = validationConfig.apisConfig[apiName][operationName];\n    var
          paramsConfig = validationConfig.paramsConfig;\n    var requiredPathParams
          = apiConfig.requiredPathParams;\n    var requiredQueryParams = apiConfig.requiredQueryParams;\n
          \   var requiredHeaderParams = apiConfig.requiredHeaderParams;\n    validateRequiredParams('headers',
          requiredHeaderParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredQueryParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredPathParams, paramsConfig);\n    //record time in ms just before
          the invoke policy\n    apim.setvariable('startTimeMS', (new Date()).getTime());\n
          \   apim.setvariable('policyName', 'Invoke-AuthConfig');\n}\n\nfunction
          validateRequiredParams(paramType, requiredParams, paramsConfig){\n    if
          (requiredParams !== \"\"){\n        var reqParams = requiredParams.split('|');\n
          \       for (var i = 0; i < reqParams.length; i++){\n            var paramConfig
          = paramsConfig[reqParams[i]];\n            var inputParam = apim.getvariable('request.'+paramType+'.'+reqParams[i]);\n
          \           var nullValidation = ((inputParam != undefined) || (inputParam
          != null));\n            if (nullValidation){\n                var dataTypeValidation
          = true;\n                dataTypeValidation = validateDataType(inputParam,
          paramConfig);\n                var lengthValidation = true;\n                var
          allowedValuesValidation = true;\n                if (paramConfig.manLength
          || paramConfig.maxLength){\n                    lengthValidation = validateLength(inputParam,
          paramConfig);\n                }\n                if (paramConfig.allowedValues){\n
          \                   allowedValuesValidation = validateAllowedValues(inputParam,
          paramConfig);\n                }\n                if (!(dataTypeValidation)
          || !(lengthValidation) || !(allowedValuesValidation)){\n                    apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                    apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \                   return;\n                }\n                else {\n
          \                   apim.setvariable('message.headers.'+reqParams[i], inputParam);\n
          \                   var clientId = apim.getvariable('client.app.id');\n
          \                   apim.setvariable('message.headers.x-ibm-client-id',
          clientId);\n                    apim.setvariable('message.headers.content-type',
          'application/json');\n                    //form url for to fetch properties
          config JSON\n                    var authConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/authconfig';\n
          \                   apim.setvariable('authConfigURL', authConfigURL);\n
          \               }\n            }\n            else {\n                apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \               return;\n            }\n            \n        }\n    }\n}\n\nfunction
          validateDataType(inputParam, paramConfig){\n    if (paramConfig.dataType
          == 'number'){\n        return !(isNaN(parseInt(inputParam)));\n    }\n    else
          if (paramConfig.dataType == 'email'){ \n        if (inputParam.includes('.')
          && inputParam.includes('@') && (! inputParam.includes(' ')))\n            return
          true;\n        else\n            return false;\n    }\n    else if (paramConfig.dataType
          == 'string'){\n        if (inputParam != null && inputParam.length != 0)\n
          \           return true;\n        else\n            return false;\n    }\n
          \   else if (paramConfig.dataType == 'version'){\n        if (inputParam
          == null || inputParam.length == 0)\n            return false;\n        else
          if (inputParam.includes('.')) {\n            var splittedArray = inputParam.split('.');\n
          \           var result = true;\n            for (var i = 0; i < splittedArray.length;
          i++){\n                if (isNaN(parseInt(splittedArray[i]))){\n                    result
          = false;\n                    return result;\n                }\n            }\n
          \           return result;\n        }\n        else{\n            return
          !(isNaN(parseInt(inputParam)));\n        }\n    }\n    else\n        return
          true;\n}\n\nfunction validateLength(inputParam, paramConfig){\n    var minLength
          = paramConfig.minLength;\n    var maxLength = paramConfig.maxLength;\n    if
          ((inputParam.length >= minLength) && (inputParam.length <= maxLength))\n
          \       return true;\n    else\n        return false;\n}\n\nfunction validateAllowedValues(inputParam,
          paramConfig){\n    var allowedValues = paramConfig.allowedValues;\n    var
          allowedValuesArray = allowedValues.split('|');\n    var result = false;\n
          \   for (var i = 0; i < allowedValuesArray.length; i++){\n        if (allowedValuesArray[i]
          == inputParam){\n            result = true;\n            return result;\n
          \       }\n    }\n    return result;\n}\n\nfunction isJSONEmpty(jsonObject)
          {\n    var member;\n    var result = true;\n    for (member in jsonObject)
          {\n        if (jsonObject[member] != null) {\n            result = false;\n
          \       }\n    }\n    return result;\n}"
        description: This GW Script file will return all API configurations to be
          used for validating input params
    - invoke:
        version: 1.0.0
        title: Invoke-AuthConfig
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        target-url: $(authConfigURL)
        output: authconfig
    - operation-switch:
        version: 1.0.0
        title: operation-switch
        case:
        - operations:
          - verb: get
            path: /v1/device/auth
          - verb: get
            path: /v1/token
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAAAConfigRequest
              source: "//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                clientId = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
                clientId);\r\n\r\n                    //form url for to fetch properties
                config JSON\r\nvar aaaConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/aaaconfig';\r\napim.setvariable('aaaConfigURL',
                aaaConfigURL);\r\n\r\n//record time in ms just before the invoke policy\r\n
                \   apim.setvariable('startTimeMS', (new Date()).getTime());\r\n    apim.setvariable('policyName',
                'Invoke-AAAConfig');"
          - invoke:
              version: 1.0.0
              title: Invoke-AAAConfig
              timeout: 60
              verb: GET
              cache-response: time-to-live
              cache-ttl: 60
              description: Load AAA config file
              target-url: $(aaaConfigURL)
          - xslt:
              version: 1.0.0
              title: XSLT-AAA
              input: true
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
                xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
                xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
                />\r\n    <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"
                method=\"xml\"/>\r\n    <xsl:strip-space elements=\"*\"/>\r\n    \r\n
                \   <xsl:template match=\"/\">\r\n        <!--record time in ms just
                after the invoke policy-->\r\n        <xsl:variable name=\"endTimeMS\"
                select=\"dp:time-value()\"/>\r\n        <xsl:variable name=\"timeTakenByPreviousPolicy\"
                \ select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
                \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
                | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,'
                ms' )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'logString'\"
                />\r\n            <xsl:with-param name=\"value\" select=\"$logString\"
                />\r\n        </xsl:call-template>\r\n        \r\n        <xsl:variable
                name=\"aaaConfiguration\" select=\".\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'passwordMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authZPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:variable
                name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n        <xsl:variable name=\"basicAuthHeader\" select=\"apim:getContext('request.headers.authorization')\"/>\r\n
                \       <xsl:variable name=\"encodedCreds\" select=\"substring-after($basicAuthHeader,
                'Basic ')\"/>\r\n        <xsl:variable name=\"decodedCreds\" select=\"dp:decode($encodedCreds,
                'base-64')\"/>\r\n        <xsl:variable name=\"userName\" select=\"substring-before($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"password\" select=\"substring-after($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[Username
                = $userName]\"/>\r\n        <xsl:choose>\r\n            <xsl:when
                test=\"string-length($userConfig) = 0\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientId'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'400'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('User &quot;', $userName, '&quot;
                is not provisioned.')\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:for-each
                select=\"$userConfig\">\r\n                    <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                        <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                        <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                        <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                            <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                <xsl:variable
                name=\"ipAddressToken\">\r\n                                    <xsl:value-of
                select=\".\"/>\r\n                                </xsl:variable>
                \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
                \                       </xsl:if>\r\n                        <xsl:if
                test=\"apim:getVariable('passwordMatched') = 'false'\">\r\n                            <xsl:if
                test=\"$password = $passwordFromConfig\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:if>\r\n                        </xsl:if>\r\n
                \                       <xsl:choose>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'true') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'false') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
                '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientSecret'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('Authentication failed.')\"
                />\r\n                                </xsl:call-template>\r\n                            </xsl:otherwise>\r\n
                \                       </xsl:choose>\r\n                    </xsl:if>
                \                       \r\n                </xsl:for-each>\r\n            </xsl:otherwise>\r\n
                \       </xsl:choose>\r\n        <xsl:if test=\"apim:getVariable('authCPassed')
                = 'true'\">\r\n            <xsl:variable name=\"allowedPaths\">\r\n
                \               <allowedPaths>\r\n                    <xsl:for-each
                select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
                \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
                = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </allowedPaths>\r\n            </xsl:variable>\r\n
                \           <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n
                \                       <xsl:call-template name=\"apim:setVariable\">\r\n
                \                           <xsl:with-param name=\"varName\" select=\"'authZPassed'\"
                />\r\n                            <xsl:with-param name=\"value\" select=\"'true'\"
                />\r\n                        </xsl:call-template>\r\n                    </xsl:if>\r\n
                \               </xsl:if>\r\n            </xsl:for-each>\r\n            <xsl:if
                test=\"apim:getVariable('authZPassed') = 'false'\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('Authorization failed.')\" />\r\n
                \               </xsl:call-template>\r\n            </xsl:if>\r\n
                \       </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
              description: Authenticates and authorize the consumer
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforAuthcodeandAccessToken
              source: "/* **************************************************************************************************************
                */\r\n/* **************************************************************************************************************
                */\r\n/* FileName                                     Version    Created
                By       Modified By    Date                   */\r\n/* CreateRequestforAuthcodeandAccessToken.js
                \   1.0        Dinesh Tomar     08-May-2018                           */\r\n/*
                \                                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will create request to get authcode
                from authserver                               */\r\n/*                                                                                                                */\r\n/*
                Required params:                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n    var path = apim.getvariable('request.path');\r\n    if(path
                == '/auth/v1/device/auth')\r\n    {\r\n        var searchURI = apim.getvariable('request.search');\r\n
                \       var clientId = apim.getvariable('outputCreds');\r\n        apim.setvariable('message.body',
                '');\r\n        apim.setvariable('message.headers.content-type', 'application/x-www-form-urlencoded');\r\n
                \       var authURL = apim.getvariable('authcode-url') + searchURI
                + '&client_id=' + clientId;\r\n        apim.setvariable('authURL',
                authURL);\r\n    }else if(path == '/auth/v1/token')\r\n    {\r\n        //extract
                auth server URL to generate access token and set it in a variable\r\n
                \   var authURL = apim.getvariable('accesstoken-url');\r\n    apim.setvariable('authURL',
                authURL);\r\n\r\n    //read all http headers from the input request\r\n
                \   var authCode = apim.getvariable('message.headers.x-authcode');\r\n
                \   \r\n    //get scope and grant type from config xml \r\n    var
                scope = [\"openid\",\"email\",\"phone\",\"legacy\"];\r\n    var grantType
                = apim.getvariable('grant-type');\r\n    //var grantType = messages.authserver.grant_type;\r\n
                \   //create access token JSON request with authcode, scope and grant
                type\r\n    var authServerAccessTokenRequest = {};\r\n    authServerAccessTokenRequest.code
                = authCode;\r\n    authServerAccessTokenRequest.scope = scope;\r\n
                \   authServerAccessTokenRequest.grant_type = grantType;\r\n\r\n    //write
                access token request in the context for next call\r\n    apim.setvariable('message.body',
                authServerAccessTokenRequest);\r\n    apim.setvariable('message.headers.content-type','application/json');\r\n
                \   \r\n    var logString = apim.getvariable('logString');\r\n    logString
                += \" | Invoke-GATAuthService-Body := \" + JSON.stringify(authServerAccessTokenRequest)
                + \" | Headers : \" + JSON.stringify(apim.getvariable('message.headers'));\r\n
                \   apim.setvariable('logString', logString);\r\n    } \r\n    \r\n
                \   //record time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
                (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-AuthServer');\r\n\r\n\r\nfunction
                isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\n
                \   for (member in jsonObject) {\r\n        if (jsonObject[member]
                != null) {\r\n            result = false;\r\n        }\r\n    }\r\n
                \   return result;\r\n}"
              description: Create requests for authcode and access token service
          - invoke:
              version: 1.0.0
              title: Invoke-AuthServer
              timeout: 60
              verb: POST
              cache-response: no-cache
              cache-ttl: 900
              target-url: $(authURL)
        - operations:
          - verb: get
            path: /v1/person/CURRENT/asset
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAccessTokenValidationRequest
              source: "/* **********************************************************************************************************
                */\r\n/* **********************************************************************************************************
                */\r\n/* FileName                                 Version    Created
                By     Modified By       Date                  */\r\n/* CreateAccessTokenValidationRequest.js
                \   1.0        Dinesh Tomar                     24-July-2018          */\r\n/*
                \                                                                                                           */\r\n/*
                **********************************************************************************************************
                */\r\n/* Purpose: This GW Script file will return all API configurations
                to be used for validating input params     */\r\n/*                                                                                                            */\r\n/*
                Required params:                                                                                           */\r\n/*
                ************************************************************************************************************/\r\n\r\n//record
                time in ms just after the invoke policy\r\nvar endTimeMS = (new Date()).getTime();\r\nvar
                timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\r\nvar
                logString = apim.getvariable('logString');\r\nlogString += \" | \"
                + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n//load
                headers for access token validation call\r\napim.setvariable('message.headers.cache-control',
                'no-cache');\r\napim.setvariable('message.headers.apigw-proof-requirement',
                'user_id signed_in');\r\napim.setvariable('message.headers.apigw-chained-access-token-client-id',
                'auth');\r\napim.setvariable('message.headers.content-type', 'application/json');\r\n\r\nvar
                validateToken = apim.getvariable('validatetoken-url');\r\napim.setvariable('validateToken',validateToken);\r\n\r\n
                //record time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
                (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-ValidateAccessToken');"
              description: Set headers to validate access token
          - invoke:
              version: 1.0.0
              title: Invoke-ValidateAccessToken
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(validateToken)
          - gatewayscript:
              version: 1.0.0
              title: GS-ExtractUID
              source: "//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                userID = apim.getvariable('message.headers.apigw-proven-identifier-value');\r\napim.setvariable('userID',
                userID);\r\nvar clientId = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
                clientId);\r\n\r\n//record time in ms just before the invoke policy\r\n
                \   apim.setvariable('startTimeMS', (new Date()).getTime());\r\n    apim.setvariable('policyName',
                'Invoke-AAAConfig');"
          - invoke:
              version: 1.0.0
              title: Invoke-AAAConfig
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(aaaConfigURL)
              description: Load AAA config file
          - xslt:
              version: 1.0.0
              title: XSLT-AAA
              input: true
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
                xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
                xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
                />\r\n    <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"
                method=\"xml\"/>\r\n    <xsl:strip-space elements=\"*\"/>\r\n    \r\n
                \   <xsl:template match=\"/\">\r\n        <!--record time in ms just
                after the invoke policy-->\r\n        <xsl:variable name=\"endTimeMS\"
                select=\"dp:time-value()\"/>\r\n        <xsl:variable name=\"timeTakenByPreviousPolicy\"
                \ select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
                \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
                | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,'
                ms' )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'logString'\"
                />\r\n            <xsl:with-param name=\"value\" select=\"$logString\"
                />\r\n        </xsl:call-template>\r\n        \r\n        <xsl:variable
                name=\"aaaConfiguration\" select=\".\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'uidMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authZPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:variable
                name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n        <xsl:variable name=\"userID\" select=\"apim:getVariable('userID')\"/>\r\n
                \       <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[UserID
                = $userID]\"/>\r\n        <xsl:choose>\r\n            <xsl:when test=\"string-length($userConfig)
                = 0\">\r\n                <xsl:call-template name=\"apim:setVariable\">\r\n
                \                   <xsl:with-param name=\"varName\" select=\"'errorName'\"
                />\r\n                    <xsl:with-param name=\"value\" select=\"'InvalidUserId'\"
                />\r\n                </xsl:call-template>\r\n                <xsl:call-template
                name=\"apim:error\">\r\n                    <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                    <xsl:with-param name=\"httpReasonPhrase\"
                select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('UserID &quot;', $userName,
                '&quot; is not provisioned.')\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:for-each
                select=\"$userConfig\">\r\n                    <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                        <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                        <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                        <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                            <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                <xsl:variable
                name=\"ipAddressToken\">\r\n                                    <xsl:value-of
                select=\".\"/>\r\n                                </xsl:variable>
                \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
                \                       </xsl:if>\r\n                        <xsl:choose>\r\n
                \                           <xsl:when test=\"apim:getVariable('ipAddressMatched')
                = 'true'\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
                '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:otherwise>\r\n                        </xsl:choose>\r\n
                \                   </xsl:if>                        \r\n                </xsl:for-each>\r\n
                \           </xsl:otherwise>\r\n        </xsl:choose>\r\n        <xsl:if
                test=\"apim:getVariable('authCPassed') = 'true'\">\r\n            <xsl:variable
                name=\"allowedPaths\">\r\n                <allowedPaths>\r\n                    <xsl:for-each
                select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
                \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
                = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </allowedPaths>\r\n            </xsl:variable>\r\n
                \           <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n
                \                       <xsl:call-template name=\"apim:setVariable\">\r\n
                \                           <xsl:with-param name=\"varName\" select=\"'authZPassed'\"
                />\r\n                            <xsl:with-param name=\"value\" select=\"'true'\"
                />\r\n                        </xsl:call-template>\r\n                    </xsl:if>\r\n
                \               </xsl:if>\r\n            </xsl:for-each>\r\n            <xsl:if
                test=\"apim:getVariable('authZPassed') = 'false'\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('Authorization failed.')\" />\r\n
                \               </xsl:call-template>\r\n            </xsl:if>\r\n
                \       </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAssetRequest
              source: "var userId = apim.getvariable('userID');\r\nvar assetsURL =
                apim.getvariable('assets-url');\r\nvar authURL = assetsURL.replace('CURRENT',
                userId);\r\napim.setvariable('authURL', authURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
                (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-AssetsService');\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-AssetsService
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(authURL)
        - operations:
          - verb: get
            path: /v1/auth/select
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAssetsRequest
              source: |-
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);

                var authorization = apim.getvariable('request.headers.authorization');
                var clientId = apim.getvariable('client.app.id');
                var clientSecret = apim.getvariable('client.app.secret');
                apim.setvariable('message.headers.X-IBM-Client-Id', clientId);
                apim.setvariable('message.headers.X-IBM-Client-Secret', clientSecret);
                var requestURL = apim.getvariable('request.uri');
                var orgName = apim.getvariable('api.org.name');
                var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
                var catalog = apim.getvariable('env.path');
                    //var apicAccessTokenURL = hostName + orgName + '/' + catalog + messages.authserver.generateAccessToken.apicURI;
                var assetURL = hostName + orgName + '/' + catalog + apim.getvariable('assetsURI');
                //var assetURL = apim.getvariable('assetapi-url');
                apim.setvariable('assetURL', assetURL);


                //record time in ms just before the invoke policy
                    apim.setvariable('startTimeMS', (new Date()).getTime());
                    apim.setvariable('policyName', 'Invoke-AssetAPI');
              description: ""
          - invoke:
              version: 1.0.0
              title: Invoke-AssetAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(assetURL)
              output: assets
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateDisambiguationId
              source: |-
                /* **************************************************************************************************************** */
                /* **************************************************************************************************************** */
                /* FileName                         Version    Created By                  Modified By               Date           */
                /* CreateDisambiguationIdRequest.js 1.0        Dinesh Tomar                                          02-May-2018    */
                /*                                                                                                                  */
                /* **************************************************************************************************************** */
                /* Purpose: This GW Script file will process AssetType call response and prepare the request for disambiguationId   */
                /*                                                                                                                  */
                /* Required params: msisdn                                                                                          */
                /* **************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);

                //load properties configuration from context variable
                var messages = apim.getvariable('messages-property.body');
                //create phone number from msisdn received in request header
                var msisdn = apim.getvariable('message.headers.msisdn');
                var phoneNumber = msisdn;
                //load assets response in a variable
                var assets = apim.getvariable('assets.body');
                //get all assets
                var assetTypes = ['PAYG'];
                var filteredAssets = getAssets(assets, assetTypes);
                //evaluate assetType response to check if asset is PAYG or not
                var isPayg = false;
                for (var i = 0; i < filteredAssets.length; i++){
                    if (filteredAssets[i].asset_value.includes(msisdn)){
                        isPayg = true;
                    }
                }
                var productIdentifier = "product_id/PAYM";
                if (isPayg) {
                    productIdentifier = "product_id/PAYG";
                }
                apim.setvariable('isPayg', isPayg);
                //create disambiguationIdRequest with productIdentifier
                var disambiguationIdRequest = {
                };
                disambiguationIdRequest.selected_identifier_type = productIdentifier;
                disambiguationIdRequest.selected_identifier_value = phoneNumber;
                //read disambiguationId URL from config and set it in a variable for next call
                var generateDisambiguationIdURL = apim.getvariable('disambiguationId-url');
                apim.setvariable('generateDisambiguationIdURL', generateDisambiguationIdURL);
                //write disambiguationId request in the context for next call
                apim.setvariable('message.body', disambiguationIdRequest);
                //record time in ms just before the invoke policy
                apim.setvariable('startTimeMS', (new Date()).getTime());
                apim.setvariable('policyName', 'Invoke-DisambiguationIdService');

                function getAssets(assets, assetTypes){
                    var filteredAssets = [];
                    for (var i = 0; i < assets.length; i++){
                        for (var j = 0; j < assetTypes.length; j++){
                            if (assets[i] != null && assets[i].asset_type != null && assets[i].asset_type == assetTypes[j]){
                                filteredAssets.push(assets[i]);
                            }
                        }
                    }
                    return filteredAssets;
                }
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdService
              timeout: 60
              verb: POST
              cache-response: protocol
              cache-ttl: 900
              target-url: $(generateDisambiguationIdURL)
        - operations:
          - verb: get
            path: /phone/v2/consumer/CURRENT/paym/bill/profile
          - verb: get
            path: /phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
          - verb: get
            path: /phone/consumer/CURRENT/paym/cca/phoneplan
          - verb: get
            path: /phone/consumer/CURRENT/paym
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/previousbills
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/recentcharges
          - verb: get
            path: /phone/consumer/CURRENT/paym/billedcharges/recommendation
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/billedcharges
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAccessTokenRequest
              source: "   //record time in ms just after the invoke policy\r\nvar
                endTimeMS = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy
                = endTimeMS - apim.getvariable('startTimeMS');\r\nvar logString =
                apim.getvariable('logString');\r\nlogString += \" | \" + apim.getvariable('policyName')
                + \" := \" + timeTakenByPreviousPolicy + \" ms\";\r\napim.setvariable('logString',
                logString);\r\n   \r\n    //read all http headers from the input request\r\n
                \   var authCode = apim.getvariable('message.headers.x-authcode');\r\n
                \   var clientId = apim.getvariable('client.app.id');\r\n    var clientSecret
                = apim.getvariable('client.app.secret');\r\n    var authorization
                = \"Basic \" + (Buffer.from(clientId + ':' + clientSecret).toString('base64'));;
                \r\n    apim.setvariable('message.headers.X-IBM-Client-Id', clientId);\r\n
                \   apim.setvariable('message.headers.X-IBM-Client-Secret', clientSecret);\r\n
                \   apim.setvariable('message.headers.x-authcode', authCode);\r\n
                \   apim.setvariable('message.headers.authorization',authorization);\r\n
                \   apim.setvariable('message.headers.content-type','application/json');\r\n
                \   \r\n    var accessTokenURL = apim.getvariable('apicURLPrefix')+'/'+'auth/v1/token';\r\n
                \   apim.setvariable('accessTokenURL', accessTokenURL);\r\n    \r\n
                \   \r\n    \r\n    \r\n    \r\n    //record time in ms just before
                the invoke policy\r\n    apim.setvariable('startTimeMS', (new Date()).getTime());\r\n
                \   apim.setvariable('policyName', 'Invoke-AccessTokenAPI');\r\n\r\n\r\n"
              description: Create request for access token.
          - invoke:
              version: 1.0.0
              title: Invoke-AccessTokenAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(accessTokenURL)
              output: accesstoken
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforDisambiguitionId
              source: "//read all http headers from the input request\r\nvar authProperties
                = apim.getvariable('authconfig.body');\r\n    var msisdn = apim.getvariable('message.headers.msisdn');\r\n
                \   var clientId = apim.getvariable('client.app.id');\r\n    var clientSecret
                = apim.getvariable('client.app.secret');\r\n    var accessToken =
                apim.getvariable('accesstoken.body').access_token;\r\n    var authorization
                = \"Bearer \" + accessToken; \r\n    apim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\n    apim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\n    apim.setvariable('message.headers.msisdn', msisdn);\r\n
                \   apim.setvariable('message.headers.authorization',authorization);\r\n
                \   \r\n    \r\n    \r\n    var disambiguationIdURL = apim.getvariable('apicURLPrefix')+'/'+'auth/v1/auth/select';\r\n
                \   apim.setvariable('disambiguationIdURL', disambiguationIdURL);\r\n
                \   \r\n    \r\n    \r\n    \r\n    \r\n    //record time in ms just
                before the invoke policy\r\n    apim.setvariable('startTimeMS', (new
                Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-DisambiguationIdAPI');\r\n\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(disambiguationIdURL)
              output: disambiguationId
          - gatewayscript:
              version: 1.0.0
              title: GS-CreatePhoneserviceRequest
              source: "var authProperties = apim.getvariable('authconfig.body');\r\nif
                (authProperties == null || isJSONEmpty(authProperties)) {\r\n    apim.setvariable('errorName',
                'ConnectionError');\r\n    apim.error('ConnectionError', 500, 'Internal
                Error', 'Connection error');\r\n} else if (isJSONEmpty(apim.getvariable('accesstoken.body')))
                {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
                500, 'Internal Error', 'Connection error');\r\n} else if (isJSONEmpty(apim.getvariable('disambiguationId.body')))
                {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
                500, 'Internal Error', 'Connection error');\r\n} else {\r\n    var
                accessToken = apim.getvariable('accesstoken.body').access_token;\r\n
                \   var disambiguationId = apim.getvariable('disambiguationId.body').disambiguation_id;\r\n
                \   apim.setvariable('message.headers.disambiguation-id', disambiguationId);\r\n
                \   apim.setvariable('message.headers.authorization', \"Bearer \"
                + accessToken);\r\n    var path = apim.getvariable('request.path');\r\n
                \   var phoneDetailsURL;\r\n    if (path == '/auth/phone/consumer/CURRENT/paym/bill/billedcharges')
                {\r\n        phoneDetailsURL = authProperties.phoneservice.billedcharges.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym/billedcharges/recommendation')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.billedcharges.recommendation.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym/bill/recentcharges')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.recentcharges.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym/bill/previousbills')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.previousbills.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym') {\r\n
                \       \r\n        phoneDetailsURL = authProperties.phoneservice.msisdndetails.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym/cca/phoneplan')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.phoneplan.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.upgradesandpromotions.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   } else if (path == '/auth/phone/v2/consumer/CURRENT/paym/bill/profile')
                {\r\n        \r\n        phoneDetailsURL = authProperties.phoneservice.billprofile.uri;\r\n
                \       //phoneDetailsURL = phoneDetailsURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\r\n
                \       apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n
                \   }\r\n    //record time in ms just before the invoke policy\r\n
                \   apim.setvariable('startTimeMS', (new Date()).getTime());\r\n    apim.setvariable('policyName',
                'Invoke-GetPhoneDetails');\r\n}\r\n\r\nfunction isJSONEmpty(jsonObject)
                {\r\n    var member;\r\n    var result = true;\r\n    for (member
                in jsonObject) {\r\n        if (jsonObject[member] != null) {\r\n
                \           result = false;\r\n        }\r\n    }\r\n    return result;\r\n}"
          - invoke:
              version: 1.0.0
              title: Invoke-GetPhoneDetails
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(phoneDetailsURL)
        - operations:
          - verb: get
            path: /v1/auth/tac/issue
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAccessTokenRequest
              source: "   //record time in ms just after the invoke policy\r\nvar
                endTimeMS = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy
                = endTimeMS - apim.getvariable('startTimeMS');\r\nvar logString =
                apim.getvariable('logString');\r\nlogString += \" | \" + apim.getvariable('policyName')
                + \" := \" + timeTakenByPreviousPolicy + \" ms\";\r\napim.setvariable('logString',
                logString);\r\n   \r\n    //read all http headers from the input request\r\n
                \   var authCode = apim.getvariable('message.headers.x-authcode');\r\n
                \   var clientId = apim.getvariable('client.app.id');\r\n    var clientSecret
                = apim.getvariable('client.app.secret');\r\n    var authorization
                = \"Basic \" + (Buffer.from(clientId + ':' + clientSecret).toString('base64'));;
                \r\n    apim.setvariable('message.headers.X-IBM-Client-Id', clientId);\r\n
                \   apim.setvariable('message.headers.X-IBM-Client-Secret', clientSecret);\r\n
                \   apim.setvariable('message.headers.x-authcode', authCode);\r\n
                \   apim.setvariable('message.headers.authorization',authorization);\r\n
                \   apim.setvariable('message.headers.content-type','application/json');\r\n
                \   \r\n    var accessTokenURL = apim.getvariable('apicURLPrefix')+'/'+'auth/v1/token';\r\n
                \   apim.setvariable('accessTokenURL', accessTokenURL);\r\n    \r\n
                \   \r\n    \r\n    \r\n    \r\n    //record time in ms just before
                the invoke policy\r\n    apim.setvariable('startTimeMS', (new Date()).getTime());\r\n
                \   apim.setvariable('policyName', 'Invoke-AccessTokenAPI');\r\n\r\n\r\n"
              description: Create request for access token.
          - invoke:
              version: 1.0.0
              title: Invoke-AccessTokenAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(accessTokenURL)
              output: accesstoken
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforDisambiguitionId
              source: "//read all http headers from the input request\r\nvar authProperties
                = apim.getvariable('authconfig.body');\r\n    var msisdn = apim.getvariable('message.headers.msisdn');\r\n
                \   var clientId = apim.getvariable('client.app.id');\r\n    var clientSecret
                = apim.getvariable('client.app.secret');\r\n    var accessToken =
                apim.getvariable('accesstoken.body').access_token;\r\n    var authorization
                = \"Bearer \" + accessToken; \r\n    apim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\n    apim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\n    apim.setvariable('message.headers.msisdn', msisdn);\r\n
                \   apim.setvariable('message.headers.authorization',authorization);\r\n
                \   \r\n    \r\n    \r\n    var disambiguationIdURL = apim.getvariable('apicURLPrefix')+'/'+'auth/v1/auth/select';\r\n
                \   apim.setvariable('disambiguationIdURL', disambiguationIdURL);\r\n
                \   \r\n    \r\n    \r\n    \r\n    \r\n    //record time in ms just
                before the invoke policy\r\n    apim.setvariable('startTimeMS', (new
                Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-DisambiguationIdAPI');\r\n\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(disambiguationIdURL)
              output: disambiguationId
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateTransferAuthCodeRequest
              source: "var authProperties = apim.getvariable('authconfig.body');\r\nif
                (authProperties == null || isJSONEmpty(authProperties)) {\r\n    apim.setvariable('errorName',
                'ConnectionError');\r\n    apim.error('ConnectionError', 500, 'Internal
                Error', 'Connection error');\r\n} else if (isJSONEmpty(apim.getvariable('accesstoken.body')))
                {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
                500, 'Internal Error', 'Connection error');\r\n} else if (isJSONEmpty(apim.getvariable('disambiguationId.body')))
                {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
                500, 'Internal Error', 'Connection error');\r\n} else {\r\n    var
                accessToken = apim.getvariable('accesstoken.body').access_token;\r\n
                \   var disambiguationId = apim.getvariable('disambiguationId.body').disambiguation_id;
                \   \r\n    apim.setvariable('message.headers.authorization', \"Bearer
                \" + accessToken);\r\n    var path = apim.getvariable('request.path');\r\n
                \   if (path == '/auth/v1/auth/tac/issue') {\r\n        //extract
                auth server URL to generate transfer auth code and set it in a variable\r\n
                \       var transferAuthCodeURL = authProperties.authserver.generateTransferAuthCode.uri;\r\n
                \       apim.setvariable('transferAuthCodeURL', transferAuthCodeURL);\r\n
                \       //get headers values from request\r\n        var deviceType
                = apim.getvariable('request.headers.x-device');\r\n        var clientId
                = apim.getvariable('client.app.id');       \r\n        var replacedParam
                = 'disambiguation_id=';\r\n        //load sendTo and failureURL from
                config and set deviceType, clientId and disambiguationId in the URL\r\n
                \       var sendToURL = authProperties.sso.endpoint.paybill.sendto;\r\n
                \       //var failureURL = authProperties.sso.endpoint.paybill.failure;\r\n
                \       sendToURL = sendToURL.replace('#deviceType#', deviceType).replace('#clientId#',
                clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\r\n
                \       //failureURL = failureURL.replace('#deviceType#', deviceType).replace('#clientId#',
                clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\r\n
                \       //apim.setvariable('sendToURL', sendToURL);\r\n        //apim.setvariable('failureURL',
                failureURL);\r\n        //var credhandlerRedemptionURL = messages.sso.credhandler_redemption_url;\r\n
                \       //apim.setvariable('credhandlerRedemptionURL', credhandlerRedemptionURL);\r\n
                \       //create transfer auth code request and write it in context
                variable\r\n        var transferAuthCodeRequest = {\r\n        };\r\n
                \       transferAuthCodeRequest.send_to = sendToURL;\r\n        apim.setvariable('message.body',
                transferAuthCodeRequest);\r\n    }\r\n    //record time in ms just
                before the invoke policy\r\n    apim.setvariable('startTimeMS', (new
                Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-TransferAuthCode');\r\n}\r\n\r\nfunction
                isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\n
                \   for (member in jsonObject) {\r\n        if (jsonObject[member]
                != null) {\r\n            result = false;\r\n        }\r\n    }\r\n
                \   return result;\r\n}"
          - invoke:
              version: 1.0.0
              title: Invoke-TransferAuthCode
              timeout: 60
              verb: POST
              cache-response: protocol
              cache-ttl: 900
              target-url: $(transferAuthCodeURL)
        otherwise: []
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractTime
        description: This GW Script file will extract tiem taken by invoke policy
          to execute and pass it to the log string
        source: |-
          /* *************************************************************************************************************** */
          /* *************************************************************************************************************** */
          /* FileName                        Version    Created By                  Modified By               Date           */
          /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
          /*                                                                                                                 */
          /* *************************************************************************************************************** */
          /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
          /*                                                                                                                 */
          /* Required params:                                                                                                */
          /* *************************************************************************************************************** */
          //record time in ms just after the invoke policy
          var endTimeMS = (new Date()).getTime();
          var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
          var logString = apim.getvariable('logString');
          logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
          apim.setvariable('logString', logString);
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        description: This GW Script will extract final metadata for logging
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
    catch:
    - errors:
      - InvalidUserId
      - InvalidDeviceType
      - InvalidAuthorization
      - InvalidClientId
      - InvalidClientSecret
      - InvalidIPAddress
      - AuthorizationError
      - ConnectionError
      - SOAPError
      - OperationError
      execute:
      - gatewayscript:
          version: 1.0.0
          title: GS:ErrorHandling
          source: |-
            /* ****************************************************************************************************************** */
            /* ****************************************************************************************************************** */
            /* FileName                           Version    Created By                  Modified By               Date           */
            /* Errorhandling.js                   1.0        Dinesh Tomar                                          07-May-2018    */
            /*                                                                                                                    */
            /* ****************************************************************************************************************** */
            /* Purpose: This GW Script file will read error config for the catch block error name and will set the necessary      */
            /*          params like status code, reason phrase and will return the error json                                     */
            /* Required params: errorName                                                                                         */
            /* ****************************************************************************************************************** */
            var urlOpen = require('urlopen');
            //form url for to fetch errorConfig JSON
            var requestURL = apim.getvariable('request.uri');
            var orgName = apim.getvariable('api.org.name');
            var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
            var catalog = apim.getvariable('env.path');
            var errorConfigURL = hostName+orgName+'/'+catalog+'/'+'config/errorconfig';
            var clientId = apim.getvariable('client.app.id');
            var errorConfigURLOptions = {
                target: errorConfigURL,
                sslClientProfile: 'api-sslcli-all',
                headers: {'x-ibm-client-id': clientId, 'content-type': 'application/json' }
            };
            //fetch errorName and errorConfig JSON from context variables
            urlOpen.open(errorConfigURLOptions, function (error, response) {
                if (error) {
                    throw error;
                } else {
                    response.readAsJSON(function (error, errorConfigJSON) {
                        if (error) {
                            throw error;
                        } else {
                            var errorName = apim.getvariable('errorName');
                            if (errorName == null && apim.getvariable('message.status.code') == null) {
                                errorName = 'default';
                            } else if (errorName == null && apim.getvariable('message.status.reason') != null && apim.getvariable('message.status.reason').startsWith('APIC:') ) {
                                errorName = 'default';
                                apim.setvariable('message.status.code', apim.getvariable('message.status.code'));
                                apim.setvariable('message.status.reason', apim.getvariable('message.status.reason'));
                                apim.setvariable('message.body', apim.getvariable('message.body'));
                            } else {
                                //fetch specific block from error config JSON
                                if (! isJSONEmpty(errorConfigJSON)) {
                                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];
                                    var statusCode = errorDetails.statusCode;
                                    var reasonPhrase = errorDetails.reasonPhrase;
                                    var errorMessage = errorDetails.errorMessage;
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', statusCode);
                                    apim.setvariable('message.status.reason', reasonPhrase);
                                    apim.setvariable('message.body', errorMessage);
                                }
                                //else block executes in case error config file is not loaded. it will set a default error message
                                else {
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', 500);
                                    apim.setvariable('message.status.reason', 'Internal Server Error');
                                    apim.setvariable('message.body', {
                                        "error": "Something went wrong"
                                    });
                                }
                            }
                        }
                    });
                }
            });

            //below function checks if json object is null or not
            function isJSONEmpty(jsonObject) {
                var member;
                var result = true;
                for (member in jsonObject) {
                    if (jsonObject[member] != null) {
                        result = false;
                    }
                }
                return result;
            }
          description: This GW Script file will read error config for the catch block
            error name and will set the necessary params like status code, reason
            phrase and will return the error json
      - gatewayscript:
          version: 1.0.0
          title: GS-ExtractErrorLoggingData
          source: "/* *************************************************************************************************************
            */\n/* *************************************************************************************************************
            */\n/* FileName                      Version    Created By                  Modified
            By               Date           */\n/* ExtractErrorLoggingData.js    1.0
            \       Dinesh Tomar                                          06-July-2018
            \  */\n/*                                                                                                               */\n/*
            *************************************************************************************************************
            */\n/* Purpose: This GW Script will extract error metadata for logging
            \                                              */\n/*                                                                                                               */\n/*
            Required params:                                                                                              */\n/*
            ***************************************************************************************************************/\n//Extract
            general metadata from system variables\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
            apicTxId = apim.getvariable('apic-transaction-id');\nvar xGlobalTxId =
            apim.getvariable('request.headers.x-global-transaction-id');\nvar requestURI
            = apim.getvariable('request.uri');\n\n//Extract response metadata from
            system variables\nvar responseHeaders = apim.getvariable('message.headers');\n\ndelete
            responseHeaders['Accept-Encoding'];\ndelete responseHeaders['X-Global-Transaction-ID'];\ndelete
            responseHeaders['User-Agent'];\ndelete responseHeaders['Via'];\ndelete
            responseHeaders['x-authcode'];\ndelete responseHeaders['authorization'];\ndelete
            responseHeaders['Authorization'];\ndelete responseHeaders['Access-Control-Allow-Methods'];\ndelete
            responseHeaders['Access-Control-Allow-Origin'];\ndelete responseHeaders['Access-Control-Allow-Headers'];\ndelete
            responseHeaders['Access-Control-Expose-Headers'];\n\nvar responseHeadersString
            = JSON.stringify(responseHeaders);\nvar responseStatusCode = apim.getvariable('message.status.code');\nvar
            responseStatusReason = apim.getvariable('message.status.reason');\nvar
            errorName = apim.getvariable('errorName');\n//calculate time elapsed\nvar
            apiStartTimeMS = apim.getvariable('apiStartTimeMS');\nvar apiEndTimeMS
            = (new Date()).getTime();\nvar totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS)
            + \" ms\";\n\nvar logString = \"type:=error\"\n                + \" |
            system-datetime:=\" +        systemDateTime\n                + \" | apic-transaction-id:=\"
            +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
            \               + \" | request-uri:=\" +            requestURI\n                +
            apim.getvariable('logString')\n                + \" | response-http-headers:=\"
            +  responseHeadersString\n                + \" | response-status-code:=\"
            +   responseStatusCode\n                + \" | response-status-reason:=\"
            + responseStatusReason\n                + \" | error-name:=\" +             errorName\n
            \               + \" | total-time-elapsed:=\" +     totalTimeElapsed;\n
            \               \nconsole.log(logString);\n\n"
          description: This GW Script will extract error metadata for logging
  gateway: datapower-gateway
  type: rest
paths:
  /v1/auth/tac/issue:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-device
      type: string
      in: header
      required: true
  /phone/v2/consumer/CURRENT/paym/bill/profile:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/upgradeoptionsandpromotions:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/cca/phoneplan:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/previousbills:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/recentcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/billedcharges/recommendation:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/billedcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: msisdn
      type: string
      in: header
      required: true
  /v1/auth/select:
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: authorization
      type: string
      in: header
      required: true
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
  /v1/person/CURRENT/asset:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: authorization
      type: string
      in: header
      required: true
  /v1/device/auth:
    get:
      responses:
        "200":
          description: success
          schema:
            type: integer
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: user_id
      type: string
      in: query
      required: true
    - name: device_id
      type: string
      in: query
      required: true
    - name: authorization
      type: string
      in: header
      required: true
  /v1/token:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: authorization
      type: string
      in: header
      required: true
