swagger: "2.0"
info:
  title: o2apic-novum-postpaybilledcharges
  x-ibm-name: o2apic-novum-postpaybilledcharges
  version: 1.0.0
schemes:
- https
basePath: /apic
produces:
- application/json
consumes:
- application/json
security:
- clientIdHeader: []
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLoggingData
        description: This GW Script will extract input metadata for logging
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
    - activity-log:
        title: Log-Payload
        content: payload
        error-content: payload
        version: 1.0.0
    - gatewayscript:
        version: 1.0.0
        title: GS-FetchValidationConfig
        description: This GW Script will create URL to fetch validation config for
          all apis
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* FetchValidationConfig.js      1.0        Dinesh Tomar                                          04-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will create URL to fetch validation config for all apis                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type', 'application/json');
          //form url for to fetch errorConfig JSON
          var requestURL = apim.getvariable('request.uri');
          var orgName = apim.getvariable('api.org.name');
          var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', hostName+orgName+'/'+catalog);
          var validationConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/validationconfig';
          apim.setvariable('validationConfigURL', validationConfigURL);

          //record time in ms just before the invoke policy
          apim.setvariable('startTimeMS', (new Date()).getTime());
          apim.setvariable('policyName', 'Invoke-ValidationConfig');
    - invoke:
        version: 1.0.0
        title: Invoke-ValidationConfig
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 60
        description: Load all messages  and properties in context
        target-url: $(validationConfigURL)
        output: validationConfig
    - gatewayscript:
        version: 1.0.0
        title: GS-ValidateParams
        description: This GW Script file will return all API configurations to be
          used for validating input params
        source: "/* **********************************************************************************************************
          */\n/* **********************************************************************************************************
          */\n/* FileName                   Version    Created By                  Modified
          By               Date           */\n/* ValidateParams.js          1.0        Dinesh
          Tomar                                          03-July-2018   */\n/*                                                                                                            */\n/*
          **********************************************************************************************************
          */\n/* Purpose: This GW Script file will return all API configurations to
          be used for validating input params     */\n/*                                                                                                            */\n/*
          Required params:                                                                                           */\n/*
          ************************************************************************************************************/\n\n//record
          time in ms just after the invoke policy\nvar endTimeMS = (new Date()).getTime();\nvar
          timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\nvar validationConfig = apim.getvariable('validationConfig.body');\nif
          (validationConfig == null || isJSONEmpty(validationConfig)){\n    apim.setvariable('errorName',
          'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal Error',
          'Connection error');\n}\nelse {\n    var apiName = apim.getvariable('api.name');\n
          \   var operationName = apim.getvariable('api.operation.path');\n    var
          apiConfig = validationConfig.apisConfig[apiName][operationName];\n    var
          paramsConfig = validationConfig.paramsConfig;\n    var requiredPathParams
          = apiConfig.requiredPathParams;\n    var requiredQueryParams = apiConfig.requiredQueryParams;\n
          \   var requiredHeaderParams = apiConfig.requiredHeaderParams;\n    validateRequiredParams('headers',
          requiredHeaderParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredQueryParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredPathParams, paramsConfig);\n    //record time in ms just before
          the invoke policy\n    apim.setvariable('startTimeMS', (new Date()).getTime());\n
          \   apim.setvariable('policyName', 'Invoke-PropertiesHandler');\n}\n\nfunction
          validateRequiredParams(paramType, requiredParams, paramsConfig){\n    if
          (requiredParams !== \"\"){\n        var reqParams = requiredParams.split('|');\n
          \       for (var i = 0; i < reqParams.length; i++){\n            var paramConfig
          = paramsConfig[reqParams[i]];\n            var inputParam = apim.getvariable('request.'+paramType+'.'+reqParams[i]);\n
          \           var nullValidation = ((inputParam != undefined) || (inputParam
          != null));\n            if (nullValidation){\n                var dataTypeValidation
          = true;\n                dataTypeValidation = validateDataType(inputParam,
          paramConfig);\n                var lengthValidation = true;\n                var
          allowedValuesValidation = true;\n                if (paramConfig.manLength
          || paramConfig.maxLength){\n                    lengthValidation = validateLength(inputParam,
          paramConfig);\n                }\n                if (paramConfig.allowedValues){\n
          \                   allowedValuesValidation = validateAllowedValues(inputParam,
          paramConfig);\n                }\n                if (!(dataTypeValidation)
          || !(lengthValidation) || !(allowedValuesValidation)){\n                    apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                    apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \                   return;\n                }\n                else {\n
          \                   apim.setvariable('message.headers.'+reqParams[i], inputParam);\n
          \                   var clientId = apim.getvariable('client.app.id');\n
          \                   apim.setvariable('message.headers.x-ibm-client-id',
          clientId);\n                    apim.setvariable('message.headers.content-type',
          'application/json');\n                    //form url for to fetch properties
          config JSON\n                    var configPropertiesURL = apim.getvariable('apicURLPrefix')+'/'+'config/properties';\n
          \                   apim.setvariable('configPropertiesURL', configPropertiesURL);\n
          \               }\n            }\n            else {\n                apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \               return;\n            }\n            \n        }\n    }\n}\n\nfunction
          validateDataType(inputParam, paramConfig){\n    if (paramConfig.dataType
          == 'number'){\n        return !(isNaN(parseInt(inputParam)));\n    }\n    else
          if (paramConfig.dataType == 'email'){ \n        if (inputParam.includes('.')
          && inputParam.includes('@') && (! inputParam.includes(' ')))\n            return
          true;\n        else\n            return false;\n    }\n    else if (paramConfig.dataType
          == 'string'){\n        if (inputParam != null && inputParam.length != 0)\n
          \           return true;\n        else\n            return false;\n    }\n
          \   else if (paramConfig.dataType == 'version'){\n        if (inputParam
          == null || inputParam.length == 0)\n            return false;\n        else
          if (inputParam.includes('.')) {\n            var splittedArray = inputParam.split('.');\n
          \           var result = true;\n            for (var i = 0; i < splittedArray.length;
          i++){\n                if (isNaN(parseInt(splittedArray[i]))){\n                    result
          = false;\n                    return result;\n                }\n            }\n
          \           return result;\n        }\n        else{\n            return
          !(isNaN(parseInt(inputParam)));\n        }\n    }\n    else\n        return
          true;\n}\n\nfunction validateLength(inputParam, paramConfig){\n    var minLength
          = paramConfig.minLength;\n    var maxLength = paramConfig.maxLength;\n    if
          ((inputParam.length >= minLength) && (inputParam.length <= maxLength))\n
          \       return true;\n    else\n        return false;\n}\n\nfunction validateAllowedValues(inputParam,
          paramConfig){\n    var allowedValues = paramConfig.allowedValues;\n    var
          allowedValuesArray = allowedValues.split('|');\n    var result = false;\n
          \   for (var i = 0; i < allowedValuesArray.length; i++){\n        if (allowedValuesArray[i]
          == inputParam){\n            result = true;\n            return result;\n
          \       }\n    }\n    return result;\n}\n\nfunction isJSONEmpty(jsonObject)
          {\n    var member;\n    var result = true;\n    for (member in jsonObject)
          {\n        if (jsonObject[member] != null) {\n            result = false;\n
          \       }\n    }\n    return result;\n}"
    - invoke:
        title: Invoke-PropertiesHandler
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 60
        version: 1.0.0
        target-url: $(configPropertiesURL)
        output: messages-property
    - gatewayscript:
        title: GS-FetchDisAmbiguitionIdURL
        version: 1.0.0
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* FetchDisAmbiguitionIdURL.js                      1.0
          \       Dinesh Tomar                                          14-June-2018
          \  */\r\n/*                                                                                                                         */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script will create URL to fetch properties from
          config api                                             */\r\n/*                                                                                                                         */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n\r\nvar messages
          = apim.getvariable('messages-property.body');\r\n\r\nif (messages == null
          || isJSONEmpty(messages)) {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n
          \   apim.error('ConnectionError', 500, 'Internal Error', 'Connection error');\r\n
          \  \r\n}else{\r\nvar msisdn = apim.getvariable('request.parameters.msisdn');\r\nvar
          authCode = apim.getvariable('request.headers.x-authcode');\r\nvar disambiguitionIdUri
          = messages.authserver.generateDisambiguationId.apicURI;\r\n\r\nvar DisAmbiguitionIdURL
          =apim.getvariable('apicURLPrefix') + disambiguitionIdUri ;\r\napim.setvariable('message.headers.msisdn',
          msisdn);\r\napim.setvariable('message.headers.x-authcode', authCode);\r\napim.setvariable('apicDisambiguationIdURL',
          DisAmbiguitionIdURL);\r\n\r\n//record time in ms just before the invoke
          policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
          'Invoke-GetdisambiguationIdService');\r\n}\r\n\r\nfunction isJSONEmpty(jsonObject)
          {\r\n    var member;\r\n    var result = true;\r\n    for (member in jsonObject)
          {\r\n        if (jsonObject[member] != null) {\r\n            result = false;\r\n
          \       }\r\n    }\r\n    return result;\r\n}\r\n"
    - invoke:
        target-url: $(apicDisambiguationIdURL)
        title: Invoke-GetdisambiguationIdService
        verb: GET
        output: DisambiguationId
        cache-ttl: 60
    - gatewayscript:
        title: GS-FetchPhoneSeriviceDetails
        version: 1.0.0
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* GS:GetPhoneServiceURL.js                      1.0
          \       Chiranjibi Panigrahi                            08-May-2018    */\r\n/*
          \                                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will construct the phone service end
          point                                                 */\r\n/*                                                                                                                         */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n\r\n//validate
          all parameters or messages\r\nif (isJSONEmpty(apim.getvariable('DisambiguationId.body')))
          {\r\n     apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\r\n   \r\n    \r\n} else {\r\n//load
          values in to context variable\r\n    var messages = apim.getvariable('messages-property.body');\r\n
          \   var msisdn = apim.getvariable('request.parameters.msisdn');\r\n    var
          billnumber = apim.getvariable('request.parameters.billnumber');\r\n    var
          filteringmsisdn = apim.getvariable('request.parameters.filteringmsisdn');\r\n
          \   var DisambiguationIdBody = apim.getvariable('DisambiguationId.body');\r\n
          \   var DisambiguationId = DisambiguationIdBody.disambiguation_id;\r\n    var
          accessToken=DisambiguationIdBody.access_token;\r\n    var baseURL = messages.phoneservice.billedcharges.uri;\r\n
          \  \r\n    var BilledChargesURL = \"\";\r\n    \r\n    if (billnumber !==
          null) {\r\n        BilledChargesURL = baseURL.concat(\"?billnumber=\", billnumber);\r\n
          \   }\r\n    \r\n    if (filteringmsisdn !== null) {\r\n        if (BilledChargesURL
          !== null) {\r\n            BilledChargesURL = BilledChargesURL.concat(\"&filteringmsisdn=\",
          filteringmsisdn);\r\n        } else {\r\n            BilledChargesURL =
          baseURL.concat(\"?filteringmsisdn=\", filteringmsisdn);\r\n        }\r\n
          \   }\r\n    if (BilledChargesURL == null) {\r\n        BilledChargesURL
          = baseURL;\r\n    }\r\n    apim.setvariable('BilledChargesURL', BilledChargesURL);\r\n
          \   \r\n    apim.setvariable('message.headers.disambiguation-id', DisambiguationId);\r\n
          \   apim.setvariable('message.headers.Authorization', \"Bearer \".concat(accessToken));\r\n
          \   apim.setvariable('RecommendationURL', messages.phoneservice.billedcharges.recommendation.uri);\r\n
          \   \r\n    //record time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
          (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-BillSummeryService');\r\n}\r\n\r\n//below
          function checks if json object is null or not\r\nfunction isJSONEmpty(jsonObject)
          {\r\n    var member;\r\n    var result = true;\r\n    for (member in jsonObject)
          {\r\n        if (jsonObject[member] != null) {\r\n            result = false;\r\n
          \       }\r\n    }\r\n    return result;\r\n}"
    - invoke:
        title: Invoke-BillSummeryService
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        version: 1.0.0
        target-url: $(BilledChargesURL)
        output: billSummeryResponse
    - gatewayscript:
        version: 1.0.0
        title: GS-TimeStampRecorder
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* GS-TimeStampRecorder.js                      1.0
          \       Chiranjibi Panigrahi                            08-May-2018     */\r\n/*
          \                                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will record the time before and after
          the invoke action                                    */\r\n/*                                                                                                                         */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//record
          time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
          (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-RecommendationService');\r\n"
    - invoke:
        title: Invoke-RecommendationService
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        version: 1.0.0
        output: recommendationResponse
        target-url: $(RecommendationURL)
    - gatewayscript:
        title: GS-GetBillSummeryResponse
        version: 1.0.0
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* GS:GetBillSummeryResponse.js                      1.0
          \       Chiranjibi Panigrahi                        10-May-2018    */\r\n/*
          \                                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will map the response recieved from
          phone service to the actual output                     */\r\n/*                                                                                                                         */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//load properties
          configuration from context variable\r\nvar messages = apim.getvariable('messages-property.body');\r\n\r\n//fetch
          all the path or query parameters\r\nvar msisdn = apim.getvariable('request.parameters.msisdn');\r\nvar
          filteringMsisdn = apim.getvariable('request.parameters.filteringmsisdn');\r\nvar
          billNumber = apim.getvariable('request.parameters.billnumber');\r\nvar phoneServiceRecommendation
          = apim.getvariable('recommendationResponse.body');\r\nvar phoneServiceBillSummaryResponse
          = apim.getvariable('billSummeryResponse.body');\r\n\r\n//phone service response
          validation\r\nif (isJSONEmpty(phoneServiceBillSummaryResponse)) {\r\n    apim.setvariable('errorName',
          'ConnectionError');\r\n    apim.error('ConnectionError', 500, 'Internal
          Error', 'Connection error');\r\n} else {\r\n    //phone service response
          mapping\r\n    if (phoneServiceBillSummaryResponse.error) {\r\n        apim.setvariable('message.body',
          phoneServiceBillSummaryResponse);\r\n    } else {\r\n        var billSummeryResponse
          = {\r\n        };\r\n        billSummeryResponse.tariffCharge = phoneServiceBillSummaryResponse.tariff_charges;\r\n
          \       billSummeryResponse.monthly_extras = phoneServiceBillSummaryResponse.monthly_extras;\r\n
          \       billSummeryResponse.voiceCharges = phoneServiceBillSummaryResponse.voice_charges;\r\n
          \       billSummeryResponse.messageCharges = phoneServiceBillSummaryResponse.message_charges;\r\n
          \       billSummeryResponse.dataCharges = phoneServiceBillSummaryResponse.dataCharges;\r\n
          \       billSummeryResponse.internationalCharges = phoneServiceBillSummaryResponse.international_charges;\r\n
          \       billSummeryResponse.directToBillCharges = phoneServiceBillSummaryResponse.directtobill_charges;\r\n
          \       billSummeryResponse.premiumAndInfoServicesCharges = phoneServiceBillSummaryResponse.premiumAndInfoServices_charges;\r\n
          \       billSummeryResponse.showUsageDetails = phoneServiceBillSummaryResponse.show_usage_details;\r\n
          \       billSummeryResponse.latePaymentChargeDetails = phoneServiceBillSummaryResponse.latePayment_Charge_Details;\r\n
          \       if (msisdn == filteringMsisdn) {\r\n            billSummeryResponse.extraChargesRecommendation
          = getExtraChargesRecommendation(phoneServiceRecommendation);\r\n        }\r\n
          \       billSummeryResponse.lpfaddedToBill = setIsLPFAddedToBill(phoneServiceBillSummaryResponse);\r\n
          \       \r\n        apim.setvariable('responseBeforeSequencing', billSummeryResponse);\r\n
          \   }\r\n\r\n //record time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
          (new Date()).getTime());\r\napim.setvariable('policyName', 'GS-SequenceOutput');\r\n}\r\n\r\n//below
          function will set values in to extraChargesRecommendation object.\r\nfunction
          getExtraChargesRecommendation(phoneServiceRecommendation) {\r\n    \r\n
          \   var ExtraChargesRecommendation = {\r\n    };\r\n    var RecomendationResponse
          = setUpRecommendations(phoneServiceRecommendation.recommendations);\r\n
          \   ExtraChargesRecommendation.header = setHeader(RecomendationResponse);\r\n
          \   ExtraChargesRecommendation.recommendations = RecomendationResponse;\r\n
          \   \r\n    return ExtraChargesRecommendation;\r\n}\r\n\r\n//below function
          will set header value in extraChargesRecommendation object\r\nfunction setHeader(RecomendationResponse)
          {\r\n    if (RecomendationResponse.length > 1) {\r\n        var header =
          messages.recommendation.header;\r\n        return header;\r\n    } else
          {\r\n        return null;\r\n    }\r\n}\r\n\r\n//below function will populate
          value in to isLPFAddedToBill field\r\nfunction setIsLPFAddedToBill(phoneServiceBillSummaryResponse)
          {\r\n    if (phoneServiceBillSummaryResponse.latePayment_Charge_Details
          == null) {\r\n        return null;\r\n    } else if (phoneServiceBillSummaryResponse.latePayment_Charge_Details.length
          > 0)\r\n    return true; else\r\n    return false;\r\n}\r\n\r\n//below function
          will set values in to recommendations array under extraChargesRecommendation
          object\r\nfunction setUpRecommendations(recommendation) {\r\n    if (! isJSONEmpty(recommendation))
          {\r\n        var recommendationDetails =[];\r\n        var boltOnsRecommendation
          = filterBoltOnRecommendationTypes(recommendation);\r\n        var boltOnRecommendationDetails
          = getBoltOnRecommendationDetails(boltOnsRecommendation);\r\n        var
          tariffRecommendationDetails = getTariffRecommendationDetails(recommendation);\r\n
          \       if (boltOnRecommendationDetails !== null) {\r\n            recommendationDetails.push(boltOnRecommendationDetails);\r\n
          \       }\r\n        if (tariffRecommendationDetails !== null) {\r\n            recommendationDetails.push(tariffRecommendationDetails);\r\n
          \       }\r\n        return recommendationDetails;\r\n    }\r\n}\r\n\r\n\r\n//below
          function will fetch the filter the recommendations whose value is not \"TARIFF\"\r\nfunction
          filterBoltOnRecommendationTypes(recommendation) {\r\n    var filteredboltOnsRecommendations
          =[];\r\n    for (var i = 0; i < recommendation.length; i++) {\r\n        if
          (recommendation[i] != \"TARIFF\") {\r\n            filteredboltOnsRecommendations.push(recommendation[i]);\r\n
          \       }\r\n    }\r\n    return filteredboltOnsRecommendations;\r\n}\r\n\r\n//below
          function will update the recommendation instance where value is not \"TARIFF\"\r\nfunction
          getBoltOnRecommendationDetails(boltOnsRecommendation) {\r\n    if (! isJSONEmpty(boltOnsRecommendation))
          {\r\n        var RecommendationDetails = {\r\n        };\r\n        if (boltOnsRecommendation.length
          > 1) {\r\n            RecommendationDetails = createRecommendationDetails(\"MULTIPLE_BOLTONS\");\r\n
          \       }\r\n        if (boltOnsRecommendation.length == 1) {\r\n            var
          RecommendationType = boltOnsRecommendation[0];\r\n            RecommendationDetails
          = createRecommendationDetails(RecommendationType);\r\n        }\r\n        return
          RecommendationDetails;\r\n    }\r\n    return null;\r\n}\r\n\r\n//below
          function will update the recommendation instance where value is  \"TARIFF\"\r\nfunction
          getTariffRecommendationDetails(TariffRecommendation) {\r\n    var RecommendationDetails
          =[];\r\n    if (isTariffRecommended(TariffRecommendation)) {\r\n        RecommendationDetails
          = createRecommendationDetails(\"TARIFF\");\r\n        return RecommendationDetails;\r\n
          \   }\r\n    return null;\r\n}\r\n\r\n//below function will fetch the filter
          the recommendations whose value is \"TARIFF\"\r\nfunction isTariffRecommended(recommendation)
          {\r\n    for (var i = 0; i < recommendation.length; i++) {\r\n        if
          (recommendation[i] == 'TARIFF') {\r\n            return true;\r\n        }\r\n
          \   }\r\n    return false;\r\n}\r\n\r\n//below function will update the
          object instance under recommendation output array object\r\nfunction createRecommendationDetails(RecommendationType)
          {\r\n    var RecommendationDetails = {\r\n    };\r\n    RecommendationDetails.type
          = messages.recommendation[RecommendationType].type;\r\n    RecommendationDetails.action
          = messages.recommendation[RecommendationType].action;\r\n    RecommendationDetails.linkText
          = messages.recommendation[RecommendationType].linkText;\r\n    RecommendationDetails.message
          = messages.recommendation[RecommendationType].message;\r\n    return RecommendationDetails;\r\n}\r\n\r\n//below
          function checks if json object is null or not\r\nfunction isJSONEmpty(jsonObject)
          {\r\n    var member;\r\n    var result = true;\r\n    for (member in jsonObject)
          {\r\n        if (jsonObject[member] !== null) {\r\n            result =
          false;\r\n        }\r\n    }\r\n    return result;\r\n}"
    - gatewayscript:
        version: 1.0.0
        title: GS-SequenceOutput
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* GS:SequenceOutput.js                      1.0
          \       Chiranjibi Panigrahi                        10-May-2018            */\r\n/*
          \                                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script file sequence the output fileds                                                                 */\r\n/*
          \                                                                                                                        */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar responseBeforeSequencing
          = apim.getvariable('responseBeforeSequencing');\r\nvar responseAfterSequencing
          ={};\r\n\r\n//phone service response validation\r\nif (isJSONEmpty(responseBeforeSequencing))
          {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\r\n} else {\r\n        responseAfterSequencing.tariffCharge
          = responseBeforeSequencing.tariffCharge;\r\n        responseAfterSequencing.monthly_extras
          = responseBeforeSequencing.monthly_extras;\r\n        responseAfterSequencing.voiceCharges
          = responseBeforeSequencing.voiceCharges;\r\n        responseAfterSequencing.messageCharges
          =  responseBeforeSequencing.messageCharges;\r\n        responseAfterSequencing.dataCharges
          = responseBeforeSequencing.dataCharges;\r\n        responseAfterSequencing.internationalCharges
          = responseBeforeSequencing.internationalCharges;\r\n        responseAfterSequencing.directToBillCharges
          = responseBeforeSequencing.directToBillCharges;\r\n        responseAfterSequencing.premiumAndInfoServicesCharges
          = responseBeforeSequencing.premiumAndInfoServicesCharges;\r\n        responseAfterSequencing.showUsageDetails
          = responseBeforeSequencing.showUsageDetails ;\r\n        responseAfterSequencing.latePaymentChargeDetails
          = responseBeforeSequencing.latePaymentChargeDetails;\r\n        responseAfterSequencing.extraChargesRecommendation.header
          = responseBeforeSequencing.extraChargesRecommendation.header;\r\n\t\tresponseAfterSequencing.extraChargesRecommendation.recommendations
          = responseBeforeSequencing.extraChargesRecommendation.recommendations;\r\n\t\tresponseAfterSequencing.lpfaddedToBill
          = responseBeforeSequencing.lpfaddedToBill;\r\n\t\t\r\n\t\tapim.setvariable('message.body',
          responseAfterSequencing);\r\n}\r\n     \r\n\r\n//below function checks if
          json object is null or not\r\nfunction isJSONEmpty(jsonObject) {\r\n    var
          member;\r\n    var result = true;\r\n    for (member in jsonObject) {\r\n
          \       if (jsonObject[member] !== null) {\r\n            result = false;\r\n
          \       }\r\n    }\r\n    return result;\r\n}"
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        description: This GW Script will extract final metadata for logging
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
    catch:
    - errors:
      - InvalidAuthCode
      - InvalidDeviceType
      - InvalidClientId
      - InvalidUserId
      - InvalidCorrelator
      - InvalidMsisdn
      - ConnectionError
      - OperationError
      - SOAPError
      execute:
      - gatewayscript:
          title: GS:ErrorHandling
          version: 1.0.0
          source: "/* ***********************************************************************************************************************
            */\r\n/* ***********************************************************************************************************************
            */\r\n/* FileName                                Version    Created By
            \                 Modified By               Date           */\r\n/* Errorhandling.js
            \                       1.0        Dinesh Tomar                                          07-May-2018
            \   */\r\n/*                                                                                                                         */\r\n/*
            ***********************************************************************************************************************
            */\r\n/* Purpose: This GW Script file will read error config for the catch
            block error name and will set the necessary params    */\r\n/*          like
            status code, reason phrase and will return the error json                                                 */\r\n/*
            Required params: errorName                                                                                              */\r\n/*
            ***********************************************************************************************************************
            */\r\nvar urlOpen = require('urlopen');\r\n//fetch errorName and errorConfig
            JSON from context variables\r\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\";\r\nvar
            errorConfigURLOptions = {\r\n    target: errorConfigURL,\r\n    sslClientProfile:
            ''\r\n};\r\nurlOpen.open(errorConfigURLOptions, function (error, response)
            {\r\n    if (error) {\r\n        throw error;\r\n    } else {\r\n        response.readAsJSON(function
            (error, errorConfigJSON) {\r\n            if (error) {\r\n                throw
            error;\r\n            } else {\r\n                var errorName = apim.getvariable('errorName');\r\n
            \               if (errorName == null) {\r\n                    errorName
            = 'default';\r\n                }\r\n                //fetch specific
            block from error config JSON\r\n                if (! isJSONEmpty(errorConfigJSON))
            {\r\n                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\r\n
            \                   var statusCode = errorDetails.statusCode;\r\n                    var
            reasonPhrase = errorDetails.reasonPhrase;\r\n                    var errorMessage
            = errorDetails.errorMessage;\r\n                    apim.setvariable('message.headers.content-type',
            'application/json');\r\n                    apim.setvariable('message.status.code',
            statusCode);\r\n                    apim.setvariable('message.status.reason',
            reasonPhrase);\r\n                    apim.setvariable('message.body',
            errorMessage);\r\n                }\r\n                //else block executes
            in case error config file is not loaded. it will set a default error message\r\n
            \               else {\r\n                    apim.setvariable('message.headers.content-type',
            'application/json');\r\n                    apim.setvariable('message.status.code',
            500);\r\n                    apim.setvariable('message.status.reason',
            'Internal Server Error');\r\n                    apim.setvariable('message.body',
            {\r\n                        \"error\": \"Something went wrong\"\r\n                    });\r\n
            \               }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n//below
            function checks if json object is null or not\r\nfunction isJSONEmpty(jsonObject)
            {\r\n    var member;\r\n    var result = true;\r\n    for (member in jsonObject)
            {\r\n        if (jsonObject[member] != null) {\r\n            result =
            false;\r\n        }\r\n    }\r\n    return result;\r\n}"
      - gatewayscript:
          title: GS-ExtractErrorLoggingData
          version: 1.0.0
          source: "/* *************************************************************************************************************
            */\n/* *************************************************************************************************************
            */\n/* FileName                      Version    Created By                  Modified
            By               Date           */\n/* ExtractErrorLoggingData.js    1.0
            \       Dinesh Tomar                                          06-July-2018
            \  */\n/*                                                                                                               */\n/*
            *************************************************************************************************************
            */\n/* Purpose: This GW Script will extract error metadata for logging
            \                                              */\n/*                                                                                                               */\n/*
            Required params:                                                                                              */\n/*
            ***************************************************************************************************************/\n//Extract
            general metadata from system variables\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
            apicTxId = apim.getvariable('apic-transaction-id');\nvar xGlobalTxId =
            apim.getvariable('request.headers.x-global-transaction-id');\nvar requestURI
            = apim.getvariable('request.uri');\n\n//Extract response metadata from
            system variables\nvar responseHeaders = apim.getvariable('message.headers');\n\ndelete
            responseHeaders['Accept-Encoding'];\ndelete responseHeaders['X-Global-Transaction-ID'];\ndelete
            responseHeaders['User-Agent'];\ndelete responseHeaders['Via'];\ndelete
            responseHeaders['x-authcode'];\ndelete responseHeaders['authorization'];\ndelete
            responseHeaders['Authorization'];\ndelete responseHeaders['Access-Control-Allow-Methods'];\ndelete
            responseHeaders['Access-Control-Allow-Origin'];\ndelete responseHeaders['Access-Control-Allow-Headers'];\ndelete
            responseHeaders['Access-Control-Expose-Headers'];\n\nvar responseHeadersString
            = JSON.stringify(responseHeaders);\nvar responseStatusCode = apim.getvariable('message.status.code');\nvar
            responseStatusReason = apim.getvariable('message.status.reason');\nvar
            errorName = apim.getvariable('errorName');\n//calculate time elapsed\nvar
            apiStartTimeMS = apim.getvariable('apiStartTimeMS');\nvar apiEndTimeMS
            = (new Date()).getTime();\nvar totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS)
            + \" ms\";\n\nvar logString = \"type:=error\"\n                + \" |
            system-datetime:=\" +        systemDateTime\n                + \" | apic-transaction-id:=\"
            +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
            \               + \" | request-uri:=\" +            requestURI\n                +
            apim.getvariable('logString')\n                + \" | response-http-headers:=\"
            +  responseHeadersString\n                + \" | response-status-code:=\"
            +   responseStatusCode\n                + \" | response-status-reason:=\"
            + responseStatusReason\n                + \" | error-name:=\" +             errorName\n
            \               + \" | total-time-elapsed:=\" +     totalTimeElapsed;\n
            \               \nconsole.log(logString);\n\n"
          description: This GW Script will extract error metadata for logging
  gateway: datapower-gateway
  type: rest
parameters:
  msisdn:
    name: msisdn
    type: string
    in: path
    required: true
  billnumber:
    name: billnumber
    type: string
    in: query
    required: false
  filteringmsisdn:
    name: filteringmsisdn
    type: string
    in: query
    required: false
  x-authcode:
    name: x-authcode
    type: string
    in: header
    required: true
tags: []
definitions:
  OneTimeCharge:
    properties:
      appliedDate:
        type: string
      charge:
        type: integer
        format: int32
      billNumber:
        type: string
      productName:
        type: string
    additionalProperties: false
  RecommendationDetails:
    properties:
      type:
        type: string
      action:
        type: string
      linkText:
        type: string
      message:
        type: string
    additionalProperties: false
  recommendations:
    type: array
    items:
      $ref: '#/definitions/RecommendationDetails'
  latePaymentChargeDetails:
    type: array
    items:
      $ref: '#/definitions/OneTimeCharge'
  EventBillSummary:
    properties:
      billCharge:
        type: integer
        format: int32
      numberOfEvents:
        type: integer
        format: int32
    additionalProperties: false
  extraChargesRecommendation:
    properties:
      header:
        type: string
      recommendations:
        $ref: '#/definitions/recommendations'
    additionalProperties: false
  BillSummaryResponse:
    properties:
      tariffCharge:
        type: string
      monthlyExtras:
        type: string
      voiceCharges:
        $ref: '#/definitions/EventBillSummary'
      messageCharges:
        $ref: '#/definitions/EventBillSummary'
      dataCharges:
        $ref: '#/definitions/EventBillSummary'
      internationalCharges:
        $ref: '#/definitions/EventBillSummary'
      directToBillCharges:
        $ref: '#/definitions/EventBillSummary'
      premiumAndInfoServicesCharges:
        $ref: '#/definitions/EventBillSummary'
      showUsageDetails:
        type: boolean
      latePaymentChargeDetails:
        $ref: '#/definitions/latePaymentChargeDetails'
      extraChargesRecommendation:
        $ref: '#/definitions/extraChargesRecommendation'
      builderInstance:
        $ref: '#/definitions/Builder'
      lpfaddedToBill:
        type: boolean
    additionalProperties: false
  Builder:
    properties: {}
    additionalProperties: false
paths:
  /{msisdn}/postpay/bill/billedcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/BillSummaryResponse'
    parameters:
    - name: msisdn
      type: string
      in: path
      required: true
    - name: billnumber
      type: string
      in: query
    - name: filteringmsisdn
      type: string
      in: query
    - name: x-authcode
      type: string
      in: header
      required: true
    - name: x-device
      type: string
      in: header
      required: true
    - name: x-user-id
      type: string
      in: header
      required: true
    - name: x-correlator
      type: string
      in: header
      required: true
    - name: x-client-id
      type: string
      in: header
      required: true
