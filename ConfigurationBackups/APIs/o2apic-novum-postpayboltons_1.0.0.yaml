swagger: "2.0"
info:
  title: o2apic-novum-postpayboltons
  x-ibm-name: o2apic-novum-postpayboltons
  version: 1.0.0
host: $(catalog.host)
schemes:
- https
basePath: /apic
produces:
- application/json
consumes:
- application/json
security:
- clientIdHeader: []
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - activity-log:
        title: Log:Payload
        content: payload
        error-content: payload
        version: 1.0.0
    - gatewayscript:
        title: GS:FetchValidationConfig
        version: 1.0.0
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* FetchValidationConfig.js      1.0        Dinesh Tomar                                          04-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will create URL to fetch validation config for all apis                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type', 'application/json');
          //form url for to fetch errorConfig JSON
          var requestURL = apim.getvariable('request.uri');
          var orgName = apim.getvariable('api.org.name');
          var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', hostName+orgName+'/'+catalog);
          var validationConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/validationconfig';
          apim.setvariable('validationConfigURL', validationConfigURL);
        description: This GW Script will create URL to fetch validation config for
          all apis
    - invoke:
        title: Invoke:ValidationConfig
        timeout: 60
        verb: GET
        cache-response: time-to-live
        cache-ttl: 60
        version: 1.0.0
        description: Load all messages  and properties in context
        target-url: $(validationConfigURL)
        output: validationConfig
        stop-on-error:
        - ConnectionError
    - gatewayscript:
        version: 1.0.0
        title: GS:ValidateParams
        source: "/* **********************************************************************************************************
          */\n/* **********************************************************************************************************
          */\n/* FileName                   Version    Created By                  Modified
          By               Date           */\n/* ValidateParams.js          1.0        Dinesh
          Tomar                                          03-July-2018   */\n/*                                                                                                            */\n/*
          **********************************************************************************************************
          */\n/* Purpose: This GW Script file will return all API configurations to
          be used for validating input params     */\n/*                                                                                                            */\n/*
          Required params:                                                                                           */\n/*
          ************************************************************************************************************/\nvar
          validationConfig = apim.getvariable('validationConfig.body');\nif (validationConfig
          == null || isJSONEmpty(validationConfig)){\n    apim.setvariable('errorName',
          'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal Error',
          'Connection error');\n}\nelse {\n    var apiName = apim.getvariable('api.name');\n
          \   var operationName = apim.getvariable('api.operation.path');\n    var
          apiConfig = validationConfig.apisConfig[apiName][operationName];\n    var
          paramsConfig = validationConfig.paramsConfig;\n    var requiredPathParams
          = apiConfig.requiredPathParams;\n    var requiredQueryParams = apiConfig.requiredQueryParams;\n
          \   var requiredHeaderParams = apiConfig.requiredHeaderParams;\n    validateRequiredParams('headers',
          requiredHeaderParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredQueryParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredPathParams, paramsConfig);\n}\n\nfunction validateRequiredParams(paramType,
          requiredParams, paramsConfig){\n    if (requiredParams !== \"\"){\n        var
          reqParams = requiredParams.split('|');\n        for (var i = 0; i < reqParams.length;
          i++){\n            var paramConfig = paramsConfig[reqParams[i]];\n            var
          inputParam = apim.getvariable('request.'+paramType+'.'+reqParams[i]);\n
          \           var nullValidation = ((inputParam != undefined) || (inputParam
          != null));\n            if (nullValidation){\n                var dataTypeValidation
          = true;\n                dataTypeValidation = validateDataType(inputParam,
          paramConfig);\n                var lengthValidation = true;\n                var
          allowedValuesValidation = true;\n                if (paramConfig.manLength
          || paramConfig.maxLength){\n                    lengthValidation = validateLength(inputParam,
          paramConfig);\n                }\n                if (paramConfig.allowedValues){\n
          \                   allowedValuesValidation = validateAllowedValues(inputParam,
          paramConfig);\n                }\n                if (!(dataTypeValidation)
          || !(lengthValidation) || !(allowedValuesValidation)){\n                    apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                    apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \                   return;\n                }\n                else {\n
          \                   apim.setvariable('message.headers.'+reqParams[i], inputParam);\n
          \                   var clientId = apim.getvariable('client.app.id');\n
          \                   apim.setvariable('message.headers.x-ibm-client-id',
          clientId);\n                    apim.setvariable('message.headers.content-type',
          'application/json');\n                    //form url for to fetch properties
          config JSON\n                    var configPropertiesURL = apim.getvariable('apicURLPrefix')+'/'+'config/properties';\n
          \                   apim.setvariable('configPropertiesURL', configPropertiesURL);\n
          \               }\n            }\n            else {\n                apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \               return;\n            }\n            \n        }\n    }\n}\n\nfunction
          validateDataType(inputParam, paramConfig){\n    if (paramConfig.dataType
          == 'number'){\n        return !(isNaN(parseInt(inputParam)));\n    }\n    else
          if (paramConfig.dataType == 'email'){ \n        if (inputParam.includes('.')
          && inputParam.includes('@') && (! inputParam.includes(' ')))\n            return
          true;\n        else\n            return false;\n    }\n    else if (paramConfig.dataType
          == 'string'){\n        if (inputParam != null && inputParam.length != 0)\n
          \           return true;\n        else\n            return false;\n    }\n
          \   else if (paramConfig.dataType == 'version'){\n        if (inputParam
          == null || inputParam.length == 0)\n            return false;\n        else
          if (inputParam.includes('.')) {\n            var splittedArray = inputParam.split('.');\n
          \           var result = true;\n            for (var i = 0; i < splittedArray.length;
          i++){\n                if (isNaN(parseInt(splittedArray[i]))){\n                    result
          = false;\n                    return result;\n                }\n            }\n
          \           return result;\n        }\n        else{\n            return
          !(isNaN(parseInt(inputParam)));\n        }\n    }\n    else\n        return
          true;\n}\n\nfunction validateLength(inputParam, paramConfig){\n    var minLength
          = paramConfig.minLength;\n    var maxLength = paramConfig.maxLength;\n    if
          ((inputParam.length >= minLength) && (inputParam.length <= maxLength))\n
          \       return true;\n    else\n        return false;\n}\n\nfunction validateAllowedValues(inputParam,
          paramConfig){\n    var allowedValues = paramConfig.allowedValues;\n    var
          allowedValuesArray = allowedValues.split('|');\n    var result = false;\n
          \   for (var i = 0; i < allowedValuesArray.length; i++){\n        if (allowedValuesArray[i]
          == inputParam){\n            result = true;\n            return result;\n
          \       }\n    }\n    return result;\n}\n\nfunction isJSONEmpty(jsonObject)
          {\n    var member;\n    var result = true;\n    for (member in jsonObject)
          {\n        if (jsonObject[member] != null) {\n            result = false;\n
          \       }\n    }\n    return result;\n}"
        description: This GW Script file will return all API configurations to be
          used for validating input params
    - invoke:
        title: Invoke:PropertiesHandler
        timeout: 60
        verb: GET
        cache-response: time-to-live
        version: 1.0.0
        target-url: $(configPropertiesURL)
        output: messages-property
        description: Load all messages  and properties in context
        cache-ttl: 60
    - gatewayscript:
        title: GS:SetSOAEndpoint
        version: 1.0.0
        source: |-
          /* ****************************************************************************************************************** */
          /* ****************************************************************************************************************** */
          /* FileName                           Version    Created By                  Modified By               Date           */
          /* SetSOAEndpoint.js                  1.0        Dinesh Tomar                                          25-Apr-2018    */
          /*                                                                                                                    */
          /* ****************************************************************************************************************** */
          /* Purpose: This GW Script file will set SOA endpoint                                                                 */
          /*                                                                                                                    */
          /* Required params:                                                                                                   */
          /* ****************************************************************************************************************** */
          //load properties configuration from context variable
          var messages = apim.getvariable('messages-property.body');
          //get all input parameters
          var clientId = apim.getvariable('client.app.id');
          var msisdn = apim.getvariable('request.parameters.msisdn');

          if (messages == null || isJSONEmpty(messages)){
              apim.setvariable('errorName', 'ConnectionError');
              apim.error('ConnectionError', 500, 'Internal Error', 'Connection error');
          }
          else {
              apim.setvariable('message.headers.x-ibm-client-id', clientId);
              apim.setvariable('message.headers.msisdn', msisdn);
              apim.setvariable('soaGetCurrentAndPendingBoltonsEndpoint', messages.soa.getCurrentAndPendingBoltons.uri);
          }

          function isJSONEmpty(jsonObject) {
              var member;
              var result = true;
              for (member in jsonObject) {
                  if (jsonObject[member] != null) {
                      result = false;
                  }
              }
              return result;
          }
        description: This GW Script file will set SOA endpoint
    - xslt:
        title: XSLT:CurrentAndPendingBoltons-SOARequest
        input: false
        version: 1.0.0
        source: "<!-- ***************************************************************************************************************
          -->\r\n<!-- ***************************************************************************************************************
          -->\r\n<!-- FileName                                 Version    Created
          By             Modified By           Date           -->\r\n<!-- CurrentAndPendingBoltons-SOARequest.xsl
          \ 1.0        Dinesh Tomar                                 25-Apr-2018    -->\r\n<!--
          \                                                                                                                -->\r\n<!--
          ***************************************************************************************************************
          -->\r\n<!-- Purpose: This XSLT code will create SOAP request for getCurrentAndPendingBoltons
          operation of                   -->\r\n<!--          managepostpayboltons
          SOA service                                                                       -->\r\n<!--
          Required params:                                                                                                -->\r\n<!--
          ***************************************************************************************************************
          -->\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
          xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:func=\"http://exslt.org/functions\"
          xmlns:apim=\"http://www.ibm.com/apimanagement\" extension-element-prefixes=\"dp
          func apim\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
          />\r\n    <xsl:output method=\"xml\" omit-xml-declaration=\"yes\" indent=\"yes\"/>\r\n
          \   <xsl:strip-space elements=\"*\"/>\r\n    <xsl:template match=\"/\">\r\n
          \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
          name=\"varName\" select=\"'message.headers.content-type'\" />\r\n            <xsl:with-param
          name=\"value\" select=\"'application/xml'\" />\r\n        </xsl:call-template>\r\n
          \       <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n
          \           <soap:Header xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n\t\t\t\t<wsse:Security
          xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\r\n\t\t\t\t
          \   <wsse:UsernameToken>\r\n\t\t\t\t\t\t<wsse:Username>apic_123</wsse:Username>\r\n\t\t\t\t\t\t<wsse:Password>t3st1ng</wsse:Password>\r\n\t\t\t\t\t</wsse:UsernameToken>\r\n\t\t\t\t</wsse:Security>\r\n
          \           </soap:Header>\r\n            <soapenv:Body>\r\n                <ns2:getCurrentAndPendingBoltons
          xmlns:ns2=\"http://soa.o2.co.uk/managepostpayboltonsdata_2\" xmlns:ns3=\"http://soa.o2.co.uk/coredata_1\"
          xmlns=\"http://soa.o2.co.uk/pscommonpostpaydata_2\" xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n
          \                   <ns2:customerId>\r\n                        <ns3:msisdn><xsl:value-of
          select=\"apim:getContext('request.parameters.msisdn')\"/></ns3:msisdn>\r\n
          \                   </ns2:customerId>\r\n                    <ns2:returnSharedDataTopups>true</ns2:returnSharedDataTopups>\r\n
          \                   <ns2:retrieveAdditionalInfo>\r\n                        <ns2:parameterName>BundleSize</ns2:parameterName>\r\n
          \                   </ns2:retrieveAdditionalInfo>\r\n                </ns2:getCurrentAndPendingBoltons>\r\n
          \           </soapenv:Body>\r\n        </soapenv:Envelope>\r\n    </xsl:template>\r\n</xsl:stylesheet>\r\n"
        description: Extract msisdn from path and prepare request for SOA call
    - invoke:
        title: Invoke:GetCurrentAndPendingBoltons
        target-url: $(soaGetCurrentAndPendingBoltonsEndpoint)
        timeout: 60
        verb: POST
        cache-response: no-cache
        cache-ttl: 900
        tls-profile: apim-tls-client-profile:1.0.0
    - xslt:
        title: XSLT:ConvertSOAPToXML
        input: true
        version: 1.0.0
        source: |
          <!-- *************************************************************************************************************** -->
          <!-- *************************************************************************************************************** -->
          <!-- FileName                             Version    Created By             Modified By               Date           -->
          <!-- ConvertSOAPToXML.xsl                 1.0        Dinesh Tomar                                     25-Apr-2018    -->
          <!--                                                                                                                 -->
          <!-- *************************************************************************************************************** -->
          <!-- Purpose: This XSLT code will create XML from SOAP message                                                       -->
          <!--                                                                                                                 -->
          <!-- Required params:                                                                                                -->
          <!-- *************************************************************************************************************** -->
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dp="http://www.datapower.com/extensions" extension-element-prefixes="dp">
              <xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/>
              <xsl:strip-space elements="*"/>
              <xsl:template match="@* | node()">
                  <xsl:copy>
                      <xsl:apply-templates select="@* | node()"/>
                  </xsl:copy>
              </xsl:template>
              <xsl:template match="*">
                  <xsl:element name="{local-name()}">
                      <xsl:apply-templates select="child::node()"/>
                  </xsl:element>
              </xsl:template>
          </xsl:stylesheet>
        description: This XSLT code will create XML from SOAP message
    - xml-to-json:
        title: Convert:XML-to-JSON
        version: 1.0.0
    - gatewayscript:
        title: GS:GetPostpayBoltons
        version: 1.0.0
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                         Version    Created By               Modified
          By               Date           */\n/* CreatePostpayBoltonResponse.js   1.0
          \       Dinesh Tomar                                       25-Apr-2018    */\n/*
          \                                                                                                              */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script file will create postpay boltons response
          \                                            */\n/*                                                                                                               */\n/*
          Required params:                                                                                              */\n/*
          *************************************************************************************************************
          */\napim.setvariable('message.headers.content-type', 'application/json');\nvar
          messages = apim.getvariable('messages-property.body');\nvar coreDataBoltOnFamilies
          = messages.coreDataBoltOnFamilies;\nvar nonRemovableBoltons = messages.nonRemovableBoltons;\nvar
          oneOffBolton = messages.oneOffBolton;\nvar tugoBoltonId = messages.tugoBoltonId;\nvar
          boltonsToBeExcluded = messages.boltonsToBeExcluded;\nvar sortingFieldsArray
          =[ \"isFree\", \"isOneOff\", \"isMonthly\", \"StartDate\", \"ProductId\"];\n\napim.readInputAsJSON(function
          (error, soaResponseJSON) {\n    if (error) {\n        throw error;\n    }
          else {\n        var myBoltons = [];\n        var soaBoltons = soaResponseJSON.Envelope.Body.getCurrentAndPendingBoltonsResponse.myBoltons;\n
          \       if (!(isJSONEmpty(soaBoltons.bolton)) && isNaN(parseInt(soaBoltons.bolton.length))){\n
          \           var bolton = [];\n            myBoltons.bolton = bolton;\n            myBoltons.bolton.push(soaBoltons.bolton);\n
          \       }\n        else if (soaBoltons.bolton.length > 0){\n            myBoltons
          = soaBoltons;\n        }\n        myBoltons = setBoltonTypeParams(myBoltons);\n
          \       var postpayBoltons = {\n        };\n        var boltons =[];\n        var
          promotional_boltons = [];\n        postpayBoltons.boltons = boltons;\n        postpayBoltons.promotional_boltons
          = promotional_boltons;\n        var filteredBoltons =[];\n        if (!
          isJSONEmpty(myBoltons) && ! isJSONEmpty(myBoltons.bolton)) {\n            var
          filteredAndSortedBoltons = filterAndSortBoltons(myBoltons.bolton);\n            for
          (var i = 0; i < filteredAndSortedBoltons.length; i++) {\n                var
          bolton = filteredAndSortedBoltons[i].bolton;\n                if (ifJsonHasKey(bolton.ProductParameters,
          'promotionid')) {\n                    var promotionalBolton = getPostpayBolton(bolton);\n
          \                   if (ifJsonHasKey(filteredBoltons[i].bolton.ProductParameters,
          'promotiondescription')) {\n                        promotionalBolton.promotion_description
          = bolton.ProductParameters[promotiondescription].$;\n                    }\n
          \                   postpayBoltons.promotional_boltons.push(promotionalBolton);\n
          \               } else {\n                    var postpayBolton = getPostpayBolton(bolton);\n
          \                   postpayBoltons.boltons.push(postpayBolton);\n                    postpayBoltons.headerMessage
          = messages.msg.bolton.postpay.header;\n                }\n            }\n
          \       }\n        apim.setvariable('message.body', postpayBoltons);\n    }\n});\n\nfunction
          setBoltonTypeParams(myBoltons) {\n    var isProductDefault = {\n        \"$\":
          0\n    };\n    var matchesAnyNonRemovable = {\n        \"$\": 0\n    };\n
          \   var isActive = {\n        \"$\": 0\n    };\n    var isOneOff = {\n        \"$\":
          0\n    };\n    var isMonthly = {\n        \"$\": 0\n    };\n    var isTUGo
          = {\n        \"$\": 0\n    };\n    var isFree = {\n        \"$\": 0\n    };\n
          \   var isCoreBolton = {\n        \"$\": 0\n    };\n    var hasZeroOrNegativeCost
          = {\n        \"$\": 0\n    };\n    var hasFamilySubscriptionClassification
          = {\n        \"$\": 0\n    };\n    var isNGTSBoltOn = {\n        \"$\":
          0\n    };\n    for (var i = 0; i < myBoltons.bolton.length; i++) {\n        var
          bolton = myBoltons.bolton[i].bolton;\n        if (bolton.ProductDefault
          != null && bolton.ProductDefault.$ == \"true\") {\n            isProductDefault
          = {\n                \"$\": 1\n            };\n        }\n        if ((bolton.ProductClassification
          != null) && (nonRemovableBoltons.includes(bolton.ProductClassification.$.toLowerCase())))
          {\n            matchesAnyNonRemovable = {\n                \"$\": 1\n            };\n
          \       }\n        if (bolton.ProductStatus != null && bolton.ProductStatus.$
          == 0) {\n            isActive = {\n                \"$\": 1\n            };\n
          \       }\n        if (bolton.ProductFamily != null && oneOffBolton.includes(bolton.ProductFamily.$.toUpperCase()))
          {\n            isOneOff = {\n                \"$\": 1\n            };\n
          \       }\n        if ((bolton.ProductFamily != null) && !(oneOffBolton.includes(bolton.ProductFamily.$.toUpperCase())))
          {\n            isMonthly = {\n                \"$\": 1\n            };\n
          \       }\n        if ((bolton.ProductId != null) && (tugoBoltonId == (bolton.ProductId.$)))
          {\n            isTUGo = {\n                \"$\": 1\n            };\n        }\n
          \       if ((bolton.MonthlyFee != null) && (bolton.MonthlyFee.$ == 0)) {\n
          \           isFree = {\n                \"$\": 1\n            };\n        }\n
          \       if (bolton.ProductFamily != null && coreDataBoltOnFamilies.includes(bolton.ProductFamily.$.toUpperCase()))
          {\n            isCoreBolton = {\n                \"$\": 1\n            };\n
          \       }\n        if ((bolton.MonthlyFee != null) && (bolton.MonthlyFee.$
          <= 0)) {\n            hasZeroOrNegativeCost = {\n                \"$\":
          1\n            };\n        }\n        if ((bolton.ProductClassification
          != null) && (bolton.ProductClassification.$.toLowerCase() == 'subscription
          discount')) {\n            hasFamilySubscriptionClassification = {\n                \"$\":
          1\n            };\n        }\n        if ((bolton.ProductFamily != null)
          && !(bolton.ProductFamily.$.toUpperCase() == 'NGTS')) {\n            isNGTSBoltOn
          = {\n                \"$\": 1\n            };\n        }\n        myBoltons.bolton[i].bolton.isProductDefault
          = isProductDefault;\n        myBoltons.bolton[i].bolton.matchesAnyNonRemovable
          = matchesAnyNonRemovable;\n        myBoltons.bolton[i].bolton.isActive =
          isActive;\n        myBoltons.bolton[i].bolton.isOneOff = isOneOff;\n        myBoltons.bolton[i].bolton.isMonthly
          = isMonthly;\n        myBoltons.bolton[i].bolton.isTUGo = isTUGo;\n        myBoltons.bolton[i].bolton.isFree
          = isFree;\n        myBoltons.bolton[i].bolton.isCoreBolton = isCoreBolton;\n
          \       myBoltons.bolton[i].bolton.hasZeroOrNegativeCost = hasZeroOrNegativeCost;\n
          \       myBoltons.bolton[i].bolton.hasFamilySubscriptionClassification =
          hasFamilySubscriptionClassification;\n        myBoltons.bolton[i].bolton.isNGTSBoltOn
          = isNGTSBoltOn;\n    }\n    return myBoltons;\n}\n\nfunction getPostpayBolton(bolton)
          {\n    var postpayBolton = {\n    };\n    if (bolton.ProductStatus != null)
          {\n        postpayBolton.status = messages.productStatus[bolton.ProductStatus.$];\n
          \   }\n    if (bolton.ProductDescription != null) {\n        postpayBolton.description
          = bolton.ProductDescription.$;\n    }\n    if (bolton.StartDate != null)
          {\n        postpayBolton.startDate = bolton.StartDate.$;\n    }\n    postpayBolton.id
          = bolton.ProductId.$;\n    if (bolton.ProductName != null) {\n        postpayBolton.product_name
          = bolton.ProductName.$;\n    }    \n    postpayBolton.charge_type = getChargeType(bolton);\n
          \   if (bolton.MonthlyFee != null) {\n        postpayBolton.monthly_charge
          = bolton.MonthlyFee.$;\n    }    \n    if (bolton.ExpiryDate != null) {\n
          \       postpayBolton.expiry_date = bolton.ExpiryDate.$;\n    }    \n    postpayBolton.can_be_removed
          = getCanBeRemoved(bolton);\n    if (bolton.StartDate != null) {\n        postpayBolton.start_date
          = bolton.StartDate.$;\n    }\n    postpayBolton.custom_links = createCustomLinks(bolton.ProductId.$);\n
          \   if (ifJsonHasKey(bolton.ProductParameters, 'promotionid')) {\n        postpayBolton.promotional
          = ifJsonHasKey(bolton.ProductParameters, 'promotionid');\n    }\n    return
          postpayBolton;\n}\n\nfunction filterAndSortBoltons(boltonsArray) {\n    var
          filteredBoltons =[];\n    var filteredAndSortedBoltons =[];\n    for (var
          i = 0; i < boltonsArray.length; i++) {\n        if (!((boltonsToBeExcluded.includes(boltonsArray[i].bolton.ProductId.$))
          || (boltonsArray[i].bolton.isCoreBolton.$ == 1))) {\n            filteredBoltons.push(boltonsArray[i]);\n
          \       }\n    }\n    filteredAndSortedBoltons = sortBoltons(filteredBoltons,
          sortingFieldsArray);\n    return filteredAndSortedBoltons;\n}\n\nfunction
          sortBoltons(boltonsArray) {\n    session.output.write(boltonsArray[0]);\n
          \   var boltonsArrayLength = boltonsArray.length;\n    var sortingFieldsArrayLength
          = sortingFieldsArray.length;\n    for (var i = 0; i < boltonsArrayLength
          -1; i++) {\n        for (var j = 0; j < boltonsArrayLength - i; j++) {\n
          \           if (j + 1 < boltonsArrayLength) {\n                var currentBolton
          = boltonsArray[j].bolton;\n                var nextBolton = boltonsArray[j
          + 1].bolton;\n                for (var k = 0; k < sortingFieldsArrayLength;
          k++) {\n                    var currentBoltonProperty = currentBolton[sortingFieldsArray[k]];\n
          \                   var nextBoltonProperty = nextBolton[sortingFieldsArray[k]];\n
          \                   if ((currentBoltonProperty != null) && (nextBoltonProperty
          != null)) {\n                        var currentBoltonValue = currentBoltonProperty.$;\n
          \                       if (currentBoltonValue.toString().includes(\"-\"))
          {\n                            currentBoltonValue = currentBoltonValue.replace(/-/g,
          \"\");\n                        }\n                        if (parseInt(currentBoltonValue)
          != 'NaN') {\n                            currentBoltonValue = parseInt(currentBoltonValue);\n
          \                       }\n                        var nextBoltonValue =
          nextBoltonProperty.$;\n                        if (nextBoltonValue.toString().includes(\"-\"))
          {\n                            nextBoltonValue = nextBoltonValue.replace(/-/g,
          \"\");\n                        }\n                        if (parseInt(nextBoltonValue)
          != 'NaN') {\n                            nextBoltonValue = parseInt(nextBoltonValue);\n
          \                       }\n                        if (currentBoltonValue
          > nextBoltonValue) {\n                            k = sortingFieldsArrayLength;\n
          \                       }\n                        if (nextBoltonValue >
          currentBoltonValue) {\n                            boltonsArray[j].bolton
          = nextBolton;\n                            boltonsArray[j + 1].bolton =
          currentBolton;\n                            k = sortingFieldsArrayLength;\n
          \                       }\n                    }\n                }\n            }\n
          \       }\n    }\n    return boltonsArray;\n}\n\nfunction getChargeType(bolton)
          {\n    if (bolton.MonthlyFee == null && bolton.ProductFamily == null) {\n
          \       return null;\n    }\n    if (bolton.MonthlyFee != null && bolton.MonthlyFee.$
          == 0) {\n        return messages.msg.bolton.fee.zero;\n    } else {\n        if
          (bolton.ProductFamily != null && bolton.ProductFamily.$.includes('ONEOFF'))
          {\n            return messages.msg.bolton.fee.oneoff;\n        } else {\n
          \           return messages.msg.bolton.fee.monthly;\n        }\n    }\n}\n\nfunction
          getCanBeRemoved(bolton) {\n    return !(bolton.isProductDefault || bolton.matchesAnyNonRemovable
          || bolton.isOneOff || bolton.isTUGo || bolton.isActive || bolton.hasZeroOrNegativeCost
          || bolton.hasFamilySubscriptionClassification || bolton.isNGTSBoltOn);\n}\n\nfunction
          createCustomLinks(productId) {\n    if (messages.o2TravelBoltonId.includes(productId))
          {\n        var customLink = {\n        };\n        customLink.link_text
          = \"Learn more\";\n        customLink.url = messages.learnmore.url;\n        var
          customLinks =[];\n        customLinks.push(customLink);\n        return
          customLinks;\n    }\n}\nfunction isJSONEmpty(jsonObject) {\n    var member;\n
          \   var result = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]
          != null) {\n            result = false;\n        }\n    }\n    return result;\n}\n\nfunction
          ifJsonHasKey(jsonObject, key) {\n    var member;\n    var result = false;\n
          \   for (member in jsonObject) {\n        if (member.toLowerCase() == key)
          {\n            result = true;\n        }\n    }\n    return result;\n}\n\nfunction
          ifJsonHasValue(jsonObject, value) {\n    var member;\n    var result = false;\n
          \   for (member in jsonObject) {\n        if (jsonObject[member].toLowerCase()
          == value) {\n            result = true;\n        }\n    }\n    return result;\n}"
        description: GW Script to get postpay boltons
    catch:
    - errors:
      - InvalidMsisdn
      - ConnectionError
      - OperationError
      - SOAPError
      - UnauthorizedError
      execute:
      - gatewayscript:
          title: GS:ErrorHandling
          version: 1.0.0
          source: |-
            /* ****************************************************************************************************************** */
            /* ****************************************************************************************************************** */
            /* FileName                           Version    Created By                  Modified By               Date           */
            /* Errorhandling.js                   1.0        Dinesh Tomar                                          07-May-2018    */
            /*                                                                                                                    */
            /* ****************************************************************************************************************** */
            /* Purpose: This GW Script file will read error config for the catch block error name and will set the necessary      */
            /*          params like status code, reason phrase and will return the error json                                     */
            /* Required params: errorName                                                                                         */
            /* ****************************************************************************************************************** */
            var urlOpen = require('urlopen');
            //form url for to fetch errorConfig JSON
            var requestURL = apim.getvariable('request.uri');
            var orgName = apim.getvariable('api.org.name');
            var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
            var catalog = apim.getvariable('env.path');
            var errorConfigURL = hostName+orgName+'/'+catalog+'/'+'config/errorconfig';
            var clientId = apim.getvariable('client.app.id');
            var errorConfigURLOptions = {
                target: errorConfigURL,
                sslClientProfile: 'api-sslcli-all',
                headers: {'x-ibm-client-id': clientId, 'content-type': 'application/json' }
            };
            //fetch errorName and errorConfig JSON from context variables
            urlOpen.open(errorConfigURLOptions, function (error, response) {
                if (error) {
                    throw error;
                } else {
                    response.readAsJSON(function (error, errorConfigJSON) {
                        if (error) {
                            throw error;
                        } else {
                            var errorName = apim.getvariable('errorName');
                            if (errorName == null && apim.getvariable('message.status.code') == null) {
                                errorName = 'default';
                            } else if (errorName == null && apim.getvariable('message.status.reason') != null && apim.getvariable('message.status.reason').startsWith('APIC:') ) {
                                errorName = 'default';
                                apim.setvariable('message.status.code', apim.getvariable('message.status.code'));
                                apim.setvariable('message.status.reason', apim.getvariable('message.status.reason'));
                                apim.setvariable('message.body', apim.getvariable('message.body'));
                            } else {
                                //fetch specific block from error config JSON
                                if (! isJSONEmpty(errorConfigJSON)) {
                                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];
                                    var statusCode = errorDetails.statusCode;
                                    var reasonPhrase = errorDetails.reasonPhrase;
                                    var errorMessage = errorDetails.errorMessage;
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', statusCode);
                                    apim.setvariable('message.status.reason', reasonPhrase);
                                    apim.setvariable('message.body', errorMessage);
                                }
                                //else block executes in case error config file is not loaded. it will set a default error message
                                else {
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', 500);
                                    apim.setvariable('message.status.reason', 'Internal Server Error');
                                    apim.setvariable('message.body', {
                                        "error": "Something went wrong"
                                    });
                                }
                            }
                        }
                    });
                }
            });

            //below function checks if json object is null or not
            function isJSONEmpty(jsonObject) {
                var member;
                var result = true;
                for (member in jsonObject) {
                    if (jsonObject[member] != null) {
                        result = false;
                    }
                }
                return result;
            }
  gateway: datapower-gateway
  type: rest
parameters:
  msisdn:
    name: msisdn
    type: integer
    in: path
    required: true
  x-device:
    name: x-device
    type: string
    in: header
  x-user-id:
    name: x-user-id
    type: string
    in: header
  x-client-id:
    name: x-client-id
    type: string
    in: header
  x-correlator:
    name: x-correlator
    type: string
    in: header
tags: []
definitions:
  Bolton:
    properties:
      productName:
        type: string
      status:
        type: string
      chargeType:
        type: string
      promotional:
        type: boolean
  BoltonsResponse:
    properties:
      boltons:
        type: array
        items:
        - $ref: '#/definitions/Bolton'
      promotionalBoltons:
        type: array
        items:
        - $ref: '#/definitions/Bolton'
paths:
  /{msisdn}/postpay/boltons:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            $ref: '#/definitions/BoltonsResponse'
    parameters:
    - $ref: '#/parameters/msisdn'
    - $ref: '#/parameters/x-device'
    - $ref: '#/parameters/x-user-id'
    - $ref: '#/parameters/x-client-id'
    - $ref: '#/parameters/x-correlator'
