swagger: "2.0"
info:
  x-ibm-name: authservice
  title: authservice
  version: 1.0.0
schemes:
- https
basePath: /auth
consumes:
- application/xml
- application/json
produces:
- application/xml
- application/json
securityDefinitions:
  clientIdSecret:
    type: apiKey
    description: ""
    in: header
    name: X-IBM-Client-Secret
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
- clientIdHeader: []
  clientIdSecret: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - gatewayscript:
        title: GS-ExtractInputLoggingData
        version: 1.0.0
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
        description: This GW Script will extract input metadata for logging
    - activity-log:
        title: Log-Payload
        content: payload
        error-content: payload
        version: 1.0.0
    - operation-switch:
        title: operation-switch
        case:
        - operations:
          - verb: get
            path: /authcode
          execute:
          - xslt:
              title: XSLT-AAA
              input: false
              version: 1.0.0
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n
                \   xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"\r\n
                \   xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"/>\r\n
                \   <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\" method=\"xml\"/>\r\n
                \   <xsl:strip-space elements=\"*\"/>\r\n    \r\n    <xsl:template
                match=\"/\">\r\n        <!--record time in ms just after the invoke
                policy-->\r\n        <xsl:variable name=\"clientId\" select=\"apim:getContext('client.app.id')\"/>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'message.headers.x-ibm-client-id'\"/>\r\n
                \           <xsl:with-param name=\"value\" select=\"$clientId\"/>\r\n
                \       </xsl:call-template>\r\n        <xsl:variable name=\"requestURL\"
                select=\"apim:getContext('request.uri')\"/>\r\n        <xsl:variable
                name=\"orgName\" select=\"apim:getContext('api.org.name')\"/>\r\n
                \       <xsl:variable name=\"catalog\" select=\"apim:getContext('env.path')\"/>\r\n
                \       <xsl:variable name=\"hostName\" select=\"substring-before($requestURL,
                $orgName)\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'apicURLPrefix'\"/>\r\n
                \           <xsl:with-param name=\"value\" select=\"concat($hostName,$orgName,'/',$catalog)\"/>\r\n
                \       </xsl:call-template>\r\n        <xsl:variable name=\"aaaConfigURL\"\r\n
                \           select=\"concat(apim:getVariable('apicURLPrefix'),'/config/aaaconfig')\"/>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'startTimeMS'\" />\r\n            <xsl:with-param
                name=\"value\" select=\"dp:time-value()\" />\r\n        </xsl:call-template>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'policyName'\" />\r\n            <xsl:with-param
                name=\"value\" select=\"'Invoke-aaaConfig'\" />\r\n        </xsl:call-template>\r\n
                \       <xsl:variable name=\"aaaConfig\">\r\n            <dp:url-open
                target=\"{$aaaConfigURL}\"\r\n                http-headers=\"apim:getVariable('message.headers.x-ibm-client-id')\"
                http-method=\"get\"\r\n            />\r\n        </xsl:variable>\r\n
                \       <xsl:variable name=\"endTimeMS\" select=\"dp:time-value()\"/>\r\n
                \       <xsl:variable name=\"timeTakenByPreviousPolicy\"  select=\"($endTimeMS
                - apim:getVariable('startTimeMS'))\"/>\r\n        <xsl:variable name=\"logString\"
                select=\"concat(apim:getVariable('logString'),' | ',apim:getVariable('policyName'),'
                := ',$timeTakenByPreviousPolicy,' ms' )\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'logString'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"$logString\" />\r\n        </xsl:call-template>\r\n        <xsl:choose>\r\n
                \       <xsl:when test=\"string-length($aaaConfig) = 0\">\r\n            <xsl:call-template
                name=\"apim:setVariable\">\r\n                <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                <xsl:with-param name=\"value\"
                select=\"'ConnectionError'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:error\">\r\n                <xsl:with-param
                name=\"httpCode\" select=\"'500'\"/>\r\n                <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Internal Error'\"/>\r\n                <xsl:with-param
                name=\"errorMessage\" select=\"'Connection error'\"/>\r\n            </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n            <xsl:variable
                name=\"aaaConfiguration\" select=\"$aaaConfig\"/>\r\n            <xsl:call-template
                name=\"apim:setVariable\">\r\n                <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'authZPassed'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:variable name=\"clientIPAddress\"\r\n                select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \           <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n            <xsl:variable name=\"basicAuthHeader\"\r\n
                \               select=\"apim:getContext('request.headers.authorization')\"/>\r\n
                \           <xsl:variable name=\"encodedCreds\" select=\"substring-after($basicAuthHeader,
                'Basic ')\"/>\r\n            <xsl:variable name=\"decodedCreds\" select=\"dp:decode($encodedCreds,
                'base-64')\"/>\r\n            <xsl:variable name=\"userName\" select=\"substring-before($decodedCreds,
                ':')\"/>\r\n            <xsl:variable name=\"password\" select=\"substring-after($decodedCreds,
                ':')\"/>\r\n            <xsl:variable name=\"userConfig\"\r\n                select=\"$aaaConfiguration/AAAInfo/Authenticate[Username
                = $userName]\"/>\r\n            <xsl:choose>\r\n                <xsl:when
                test=\"string-length($userConfig) = 0\">\r\n                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                        <xsl:with-param
                name=\"varName\" select=\"'errorName'\"/>\r\n                        <xsl:with-param
                name=\"value\" select=\"'InvalidClientId'\"/>\r\n                    </xsl:call-template>\r\n
                \                   <xsl:call-template name=\"apim:error\">\r\n                        <xsl:with-param
                name=\"httpCode\" select=\"'400'\"/>\r\n                        <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\"/>\r\n                        <xsl:with-param
                name=\"errorMessage\"\r\n                            select=\"concat('User
                &quot;', $userName, '&quot; is not provisioned.')\"\r\n                        />\r\n
                \                   </xsl:call-template>\r\n                </xsl:when>\r\n
                \               <xsl:otherwise>\r\n                    <xsl:for-each
                select=\"$userConfig\">\r\n                        <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                            <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                            <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                            <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                                <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                    <xsl:variable
                name=\"ipAddressToken\">\r\n                                        <xsl:value-of
                select=\".\"/>\r\n                                    </xsl:variable>\r\n
                \                                   <xsl:if\r\n                                        test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                        <xsl:call-template
                name=\"apim:setVariable\">\r\n                                            <xsl:with-param
                name=\"varName\"\r\n                                                select=\"'ipAddressMatched'\"/>\r\n
                \                                           <xsl:with-param name=\"value\"
                select=\"'true'\"/>\r\n                                        </xsl:call-template>\r\n
                \                                   </xsl:if>\r\n                                </xsl:for-each>\r\n
                \                           </xsl:if>\r\n                            <xsl:if
                test=\"apim:getVariable('passwordMatched') = 'false'\">\r\n                                <xsl:if
                test=\"$password = $passwordFromConfig\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\"/>\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:if>\r\n
                \                           <xsl:choose>\r\n                                <xsl:when\r\n
                \                                   test=\"((apim:getVariable('ipAddressMatched')
                = 'true') and (apim:getVariable('passwordMatched') = 'true'))\">\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\"/>\r\n                                    </xsl:call-template>\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                        <xsl:with-param
                name=\"value\"\r\n                                            select=\"./OutputCredential/text()\"/>\r\n
                \                                   </xsl:call-template>\r\n                                </xsl:when>\r\n
                \                               <xsl:when\r\n                                    test=\"((apim:getVariable('ipAddressMatched')
                = 'false') and (apim:getVariable('passwordMatched') = 'true'))\">\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\"/>\r\n                                    </xsl:call-template>\r\n
                \                                   <xsl:call-template name=\"apim:error\">\r\n
                \                                       <xsl:with-param name=\"httpCode\"
                select=\"'400'\"/>\r\n                                        <xsl:with-param
                name=\"httpReasonPhrase\"\r\n                                            select=\"'Invalid
                request'\"/>\r\n                                        <xsl:with-param
                name=\"errorMessage\"\r\n                                            select=\"concat('IP
                address &quot;', $clientIPAddress, '&quot; is not provisioned.')\"\r\n
                \                                       />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:when>\r\n                                <xsl:otherwise>\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'InvalidClientSecret'\"\r\n                                        />\r\n
                \                                   </xsl:call-template>\r\n                                    <xsl:call-template
                name=\"apim:error\">\r\n                                        <xsl:with-param
                name=\"httpCode\" select=\"'400'\"/>\r\n                                        <xsl:with-param
                name=\"httpReasonPhrase\"\r\n                                            select=\"'Invalid
                request'\"/>\r\n                                        <xsl:with-param
                name=\"errorMessage\"\r\n                                            select=\"'Authentication
                failed.'\"/>\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:otherwise>\r\n                            </xsl:choose>\r\n
                \                       </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </xsl:otherwise>\r\n            </xsl:choose>\r\n
                \           <xsl:if test=\"apim:getVariable('authCPassed') = 'true'\">\r\n
                \               <xsl:variable name=\"allowedPaths\">\r\n                    <allowedPaths>\r\n
                \                       <xsl:for-each\r\n                            select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential
                = apim:getVariable('outputCreds')]\">\r\n                            <xsl:if
                test=\"$aaaConfiguration/AAAInfo/Authorize[Access = 'allow']\">\r\n
                \                               <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                            </xsl:if>\r\n                        </xsl:for-each>\r\n
                \                   </allowedPaths>\r\n                </xsl:variable>\r\n
                \               <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \               <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \                   <xsl:if test=\"apim:getVariable('authZPassed')
                = 'false'\">\r\n                        <xsl:if test=\"$requestedPath
                = ./text()\">\r\n                            <xsl:call-template name=\"apim:setVariable\">\r\n
                \                               <xsl:with-param name=\"varName\" select=\"'authZPassed'\"/>\r\n
                \                               <xsl:with-param name=\"value\" select=\"'true'\"/>\r\n
                \                           </xsl:call-template>\r\n                        </xsl:if>\r\n
                \                   </xsl:if>\r\n                </xsl:for-each>\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                       <xsl:with-param name=\"varName\" select=\"'errorName'\"/>\r\n
                \                       <xsl:with-param name=\"value\" select=\"'AuthorizationError'\"/>\r\n
                \                   </xsl:call-template>\r\n                    <xsl:call-template
                name=\"apim:error\">\r\n                        <xsl:with-param name=\"httpCode\"
                select=\"'401'\"/>\r\n                        <xsl:with-param name=\"httpReasonPhrase\"
                select=\"'Invalid request'\"/>\r\n                        <xsl:with-param
                name=\"errorMessage\" select=\"'Authorization failed.'\"/>\r\n                    </xsl:call-template>\r\n
                \               </xsl:if>\r\n            </xsl:if>\r\n            </xsl:otherwise>\r\n
                \       </xsl:choose>\r\n    </xsl:template>\r\n</xsl:stylesheet>\r\n"
          - gatewayscript:
              title: GS-CreateRequestforAuthcodeandAccessToken
              version: 1.0.0
              source: "/* **************************************************************************************************************
                */\r\n/* **************************************************************************************************************
                */\r\n/* FileName                                     Version    Created
                By       Modified By    Date                   */\r\n/* CreateRequestforAuthcodeandAccessToken.js
                \   1.0        Dinesh Tomar     08-May-2018                           */\r\n/*
                \                                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will create request to get authcode
                from authserver                               */\r\n/*                                                                                                                */\r\n/*
                Required params:                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n    \r\n        var searchURI = apim.getvariable('request.search');\r\n
                \       var clientId = apim.getvariable('outputCreds');\r\n        apim.setvariable('message.body',
                '');\r\n        apim.setvariable('message.headers.content-type', 'application/x-www-form-urlencoded');\r\n
                \       var authURL = apim.getvariable('authcode-url') + searchURI
                + '&client_id=' + clientId;\r\n        apim.setvariable('authURL',
                authURL);\r\n    \r\n    \r\n    //record time in ms just before the
                invoke policy\r\n    apim.setvariable('startTimeMS', (new Date()).getTime());\r\n
                \   apim.setvariable('policyName', 'Invoke-AuthServer');\r\n\r\n\r\nfunction
                isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\n
                \   for (member in jsonObject) {\r\n        if (jsonObject[member]
                != null) {\r\n            result = false;\r\n        }\r\n    }\r\n
                \   return result;\r\n}"
              description: Create requests for authcode and access token service
          - invoke:
              target-url: $(authURL)
              title: Invoke-AuthServer
              verb: POST
          - gatewayscript:
              title: GS-ExtractTime
              version: 1.0.0
              source: |-
                /* *************************************************************************************************************** */
                /* *************************************************************************************************************** */
                /* FileName                        Version    Created By                  Modified By               Date           */
                /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
                /*                                                                                                                 */
                /* *************************************************************************************************************** */
                /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
                /*                                                                                                                 */
                /* Required params:                                                                                                */
                /* *************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);
              description: This GW Script file will extract tiem taken by invoke policy
                to execute and pass it to the log string
        - operations:
          - verb: get
            path: /accesstoken
          execute:
          - xslt:
              title: XSLT-AAA
              input: false
              version: 1.0.0
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n
                \   xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"\r\n
                \   xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"/>\r\n
                \   <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\" method=\"xml\"/>\r\n
                \   <xsl:strip-space elements=\"*\"/>\r\n    \r\n    <xsl:template
                match=\"/\">\r\n        <!--record time in ms just after the invoke
                policy-->\r\n        <xsl:variable name=\"clientId\" select=\"apim:getContext('client.app.id')\"/>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'message.headers.x-ibm-client-id'\"/>\r\n
                \           <xsl:with-param name=\"value\" select=\"$clientId\"/>\r\n
                \       </xsl:call-template>\r\n        <xsl:variable name=\"requestURL\"
                select=\"apim:getContext('request.uri')\"/>\r\n        <xsl:variable
                name=\"orgName\" select=\"apim:getContext('api.org.name')\"/>\r\n
                \       <xsl:variable name=\"catalog\" select=\"apim:getContext('env.path')\"/>\r\n
                \       <xsl:variable name=\"hostName\" select=\"substring-before($requestURL,
                $orgName)\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'apicURLPrefix'\"/>\r\n
                \           <xsl:with-param name=\"value\" select=\"concat($hostName,$orgName,'/',$catalog)\"/>\r\n
                \       </xsl:call-template>\r\n        <xsl:variable name=\"aaaConfigURL\"\r\n
                \           select=\"concat(apim:getVariable('apicURLPrefix'),'/config/aaaconfig')\"/>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'startTimeMS'\" />\r\n            <xsl:with-param
                name=\"value\" select=\"dp:time-value()\" />\r\n        </xsl:call-template>\r\n
                \       <xsl:call-template name=\"apim:setVariable\">\r\n            <xsl:with-param
                name=\"varName\" select=\"'policyName'\" />\r\n            <xsl:with-param
                name=\"value\" select=\"'Invoke-aaaConfig'\" />\r\n        </xsl:call-template>\r\n
                \       <xsl:variable name=\"aaaConfig\">\r\n            <dp:url-open
                target=\"{$aaaConfigURL}\"\r\n                http-headers=\"apim:getVariable('message.headers.x-ibm-client-id')\"
                http-method=\"get\"\r\n            />\r\n        </xsl:variable>\r\n
                \       <xsl:variable name=\"endTimeMS\" select=\"dp:time-value()\"/>\r\n
                \       <xsl:variable name=\"timeTakenByPreviousPolicy\"  select=\"($endTimeMS
                - apim:getVariable('startTimeMS'))\"/>\r\n        <xsl:variable name=\"logString\"
                select=\"concat(apim:getVariable('logString'),' | ',apim:getVariable('policyName'),'
                := ',$timeTakenByPreviousPolicy,' ms' )\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'logString'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"$logString\" />\r\n        </xsl:call-template>\r\n        <xsl:choose>\r\n
                \       <xsl:when test=\"string-length($aaaConfig) = 0\">\r\n            <xsl:call-template
                name=\"apim:setVariable\">\r\n                <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                <xsl:with-param name=\"value\"
                select=\"'ConnectionError'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:error\">\r\n                <xsl:with-param
                name=\"httpCode\" select=\"'500'\"/>\r\n                <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Internal Error'\"/>\r\n                <xsl:with-param
                name=\"errorMessage\" select=\"'Connection error'\"/>\r\n            </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n            <xsl:variable
                name=\"aaaConfiguration\" select=\"$aaaConfig\"/>\r\n            <xsl:call-template
                name=\"apim:setVariable\">\r\n                <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:call-template name=\"apim:setVariable\">\r\n                <xsl:with-param
                name=\"varName\" select=\"'authZPassed'\"/>\r\n                <xsl:with-param
                name=\"value\" select=\"'false'\"/>\r\n            </xsl:call-template>\r\n
                \           <xsl:variable name=\"clientIPAddress\"\r\n                select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \           <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n            <xsl:variable name=\"basicAuthHeader\"\r\n
                \               select=\"apim:getContext('request.headers.authorization')\"/>\r\n
                \           <xsl:variable name=\"encodedCreds\" select=\"substring-after($basicAuthHeader,
                'Basic ')\"/>\r\n            <xsl:variable name=\"decodedCreds\" select=\"dp:decode($encodedCreds,
                'base-64')\"/>\r\n            <xsl:variable name=\"userName\" select=\"substring-before($decodedCreds,
                ':')\"/>\r\n            <xsl:variable name=\"password\" select=\"substring-after($decodedCreds,
                ':')\"/>\r\n            <xsl:variable name=\"userConfig\"\r\n                select=\"$aaaConfiguration/AAAInfo/Authenticate[Username
                = $userName]\"/>\r\n            <xsl:choose>\r\n                <xsl:when
                test=\"string-length($userConfig) = 0\">\r\n                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                        <xsl:with-param
                name=\"varName\" select=\"'errorName'\"/>\r\n                        <xsl:with-param
                name=\"value\" select=\"'InvalidClientId'\"/>\r\n                    </xsl:call-template>\r\n
                \                   <xsl:call-template name=\"apim:error\">\r\n                        <xsl:with-param
                name=\"httpCode\" select=\"'400'\"/>\r\n                        <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\"/>\r\n                        <xsl:with-param
                name=\"errorMessage\"\r\n                            select=\"concat('User
                &quot;', $userName, '&quot; is not provisioned.')\"\r\n                        />\r\n
                \                   </xsl:call-template>\r\n                </xsl:when>\r\n
                \               <xsl:otherwise>\r\n                    <xsl:for-each
                select=\"$userConfig\">\r\n                        <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                            <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                            <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                            <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                                <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                    <xsl:variable
                name=\"ipAddressToken\">\r\n                                        <xsl:value-of
                select=\".\"/>\r\n                                    </xsl:variable>\r\n
                \                                   <xsl:if\r\n                                        test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                        <xsl:call-template
                name=\"apim:setVariable\">\r\n                                            <xsl:with-param
                name=\"varName\"\r\n                                                select=\"'ipAddressMatched'\"/>\r\n
                \                                           <xsl:with-param name=\"value\"
                select=\"'true'\"/>\r\n                                        </xsl:call-template>\r\n
                \                                   </xsl:if>\r\n                                </xsl:for-each>\r\n
                \                           </xsl:if>\r\n                            <xsl:if
                test=\"apim:getVariable('passwordMatched') = 'false'\">\r\n                                <xsl:if
                test=\"$password = $passwordFromConfig\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\"/>\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:if>\r\n
                \                           <xsl:choose>\r\n                                <xsl:when\r\n
                \                                   test=\"((apim:getVariable('ipAddressMatched')
                = 'true') and (apim:getVariable('passwordMatched') = 'true'))\">\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\"/>\r\n                                    </xsl:call-template>\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                        <xsl:with-param
                name=\"value\"\r\n                                            select=\"./OutputCredential/text()\"/>\r\n
                \                                   </xsl:call-template>\r\n                                </xsl:when>\r\n
                \                               <xsl:when\r\n                                    test=\"((apim:getVariable('ipAddressMatched')
                = 'false') and (apim:getVariable('passwordMatched') = 'true'))\">\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\"/>\r\n                                    </xsl:call-template>\r\n
                \                                   <xsl:call-template name=\"apim:error\">\r\n
                \                                       <xsl:with-param name=\"httpCode\"
                select=\"'400'\"/>\r\n                                        <xsl:with-param
                name=\"httpReasonPhrase\"\r\n                                            select=\"'Invalid
                request'\"/>\r\n                                        <xsl:with-param
                name=\"errorMessage\"\r\n                                            select=\"concat('IP
                address &quot;', $clientIPAddress, '&quot; is not provisioned.')\"\r\n
                \                                       />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:when>\r\n                                <xsl:otherwise>\r\n
                \                                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                       <xsl:with-param name=\"varName\"
                select=\"'errorName'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'InvalidClientSecret'\"\r\n                                        />\r\n
                \                                   </xsl:call-template>\r\n                                    <xsl:call-template
                name=\"apim:error\">\r\n                                        <xsl:with-param
                name=\"httpCode\" select=\"'400'\"/>\r\n                                        <xsl:with-param
                name=\"httpReasonPhrase\"\r\n                                            select=\"'Invalid
                request'\"/>\r\n                                        <xsl:with-param
                name=\"errorMessage\"\r\n                                            select=\"'Authentication
                failed.'\"/>\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:otherwise>\r\n                            </xsl:choose>\r\n
                \                       </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </xsl:otherwise>\r\n            </xsl:choose>\r\n
                \           <xsl:if test=\"apim:getVariable('authCPassed') = 'true'\">\r\n
                \               <xsl:variable name=\"allowedPaths\">\r\n                    <allowedPaths>\r\n
                \                       <xsl:for-each\r\n                            select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential
                = apim:getVariable('outputCreds')]\">\r\n                            <xsl:if
                test=\"$aaaConfiguration/AAAInfo/Authorize[Access = 'allow']\">\r\n
                \                               <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                            </xsl:if>\r\n                        </xsl:for-each>\r\n
                \                   </allowedPaths>\r\n                </xsl:variable>\r\n
                \               <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \               <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \                   <xsl:if test=\"apim:getVariable('authZPassed')
                = 'false'\">\r\n                        <xsl:if test=\"$requestedPath
                = ./text()\">\r\n                            <xsl:call-template name=\"apim:setVariable\">\r\n
                \                               <xsl:with-param name=\"varName\" select=\"'authZPassed'\"/>\r\n
                \                               <xsl:with-param name=\"value\" select=\"'true'\"/>\r\n
                \                           </xsl:call-template>\r\n                        </xsl:if>\r\n
                \                   </xsl:if>\r\n                </xsl:for-each>\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:call-template name=\"apim:setVariable\">\r\n
                \                       <xsl:with-param name=\"varName\" select=\"'errorName'\"/>\r\n
                \                       <xsl:with-param name=\"value\" select=\"'AuthorizationError'\"/>\r\n
                \                   </xsl:call-template>\r\n                    <xsl:call-template
                name=\"apim:error\">\r\n                        <xsl:with-param name=\"httpCode\"
                select=\"'401'\"/>\r\n                        <xsl:with-param name=\"httpReasonPhrase\"
                select=\"'Invalid request'\"/>\r\n                        <xsl:with-param
                name=\"errorMessage\" select=\"'Authorization failed.'\"/>\r\n                    </xsl:call-template>\r\n
                \               </xsl:if>\r\n            </xsl:if>\r\n            </xsl:otherwise>\r\n
                \       </xsl:choose>\r\n    </xsl:template>\r\n</xsl:stylesheet>\r\n"
          - gatewayscript:
              title: GS-CreateRequestforAuthcodeandAccessToken
              version: 1.0.0
              source: "/* **************************************************************************************************************
                */\r\n/* **************************************************************************************************************
                */\r\n/* FileName                                     Version    Created
                By       Modified By    Date                   */\r\n/* CreateRequestforAuthcodeandAccessToken.js
                \   1.0        Dinesh Tomar     08-May-2018                           */\r\n/*
                \                                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will create request to get authcode
                from authserver                               */\r\n/*                                                                                                                */\r\n/*
                Required params:                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n    \r\n        //extract auth server URL to generate access
                token and set it in a variable\r\n    var authURL = apim.getvariable('accesstoken-url');\r\n
                \   apim.setvariable('authURL', authURL);\r\n\r\n    //read all http
                headers from the input request\r\n    var authCode = apim.getvariable('message.headers.x-authcode');\r\n
                \   \r\n    //get scope and grant type from config xml \r\n    var
                scope = [\"openid\",\"email\",\"phone\",\"legacy\"];\r\n    var grantType
                = apim.getvariable('grant-type');\r\n    //var grantType = messages.authserver.grant_type;\r\n
                \   //create access token JSON request with authcode, scope and grant
                type\r\n    var authServerAccessTokenRequest = {};\r\n    authServerAccessTokenRequest.code
                = authCode;\r\n    authServerAccessTokenRequest.scope = scope;\r\n
                \   authServerAccessTokenRequest.grant_type = grantType;\r\n\r\n    //write
                access token request in the context for next call\r\n    apim.setvariable('message.body',
                authServerAccessTokenRequest);\r\n    apim.setvariable('message.headers.content-type','application/json');\r\n
                \   \r\n    var logString = apim.getvariable('logString');\r\n    logString
                += \" | Invoke-GATAuthService-Body := \" + JSON.stringify(authServerAccessTokenRequest)
                + \" | Headers : \" + JSON.stringify(apim.getvariable('message.headers'));\r\n
                \   apim.setvariable('logString', logString);\r\n    \r\n    \r\n
                \   //record time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
                (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-AuthServer');\r\n\r\n\r\nfunction
                isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\n
                \   for (member in jsonObject) {\r\n        if (jsonObject[member]
                != null) {\r\n            result = false;\r\n        }\r\n    }\r\n
                \   return result;\r\n}"
              description: Create requests for authcode and access token service
          - invoke:
              target-url: $(authURL)
              title: Invoke-AuthServer
              verb: POST
              output: accesstoken
          - gatewayscript:
              title: GS-CreateAccessTokenValidationRequest
              version: 1.0.0
              source: "/* **********************************************************************************************************
                */\r\n/* **********************************************************************************************************
                */\r\n/* FileName                                 Version    Created
                By     Modified By       Date                  */\r\n/* CreateAccessTokenValidationRequest.js
                \   1.0        Dinesh Tomar                     24-July-2018          */\r\n/*
                \                                                                                                           */\r\n/*
                **********************************************************************************************************
                */\r\n/* Purpose: This GW Script file will return all API configurations
                to be used for validating input params     */\r\n/*                                                                                                            */\r\n/*
                Required params:                                                                                           */\r\n/*
                ************************************************************************************************************/\r\n\r\n//record
                time in ms just after the invoke policy\r\nvar endTimeMS = (new Date()).getTime();\r\nvar
                timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\r\nvar
                logString = apim.getvariable('logString');\r\nlogString += \" | \"
                + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n//load
                headers for access token validation call\r\napim.setvariable('message.headers.cache-control',
                'no-cache');\r\napim.setvariable('message.headers.apigw-proof-requirement',
                'user_id signed_in');\r\napim.setvariable('message.headers.apigw-chained-access-token-client-id',
                'auth');\r\napim.setvariable('message.headers.content-type', 'application/json');\r\n\r\nvar
                validateToken = apim.getvariable('validatetoken-url');\r\napim.setvariable('validateToken',validateToken);\r\n\r\n
                //record time in ms just before the invoke policy\r\n    apim.setvariable('startTimeMS',
                (new Date()).getTime());\r\n    apim.setvariable('policyName', 'Invoke-ValidateAccessToken');"
              description: Set headers to validate access token
          - invoke:
              title: Invoke-ValidateAccessToken
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              version: 1.0.0
              target-url: $(validateToken)
          - gatewayscript:
              title: GS-ExtractUID
              version: 1.0.0
              source: "//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                userID = apim.getvariable('message.headers.apigw-proven-identifier-value');\r\n//apim.setvariable('userID',
                userID);\r\nvar accessToken = apim.getvariable('accesstoken.body');\r\naccessToken.user_id
                = userID;\r\napim.setvariable('message.body', accessToken);"
        - operations:
          - verb: get
            path: /disambiguationid
          execute: []
        - operations:
          - verb: get
            path: /transferauthcode
          execute: []
        otherwise: []
        version: 1.0.0
    - gatewayscript:
        title: GS-ExtractFinalLoggingData
        version: 1.0.0
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
        description: This GW Script will extract final metadata for logging
  phase: realized
  properties:
    assetsURI:
      value: /auth/v1/person/CURRENT/asset
      description: URI of assets API.
      encoded: false
    disambiguationId-url:
      value: https://auth.ref.o2.co.uk/auth/v1/auth/select
      description: URL for getting disambiguation id.
      encoded: false
    validatetoken-url:
      value: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
      description: URL for validating access token.
      encoded: false
    assets-url:
      value: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
      description: URL for retrieving assets.
      encoded: false
    grant-type:
      value: auth_cookie
      description: The type of access granted for access token service
      encoded: false
    accesstoken-url:
      value: https://auth.ref.o2.co.uk:443/auth/v1/token
      description: URL of the access token service.
      encoded: false
    authcode-url:
      value: https://auth.ref.o2.co.uk/auth/v1/device/auth
      description: URL of the authcode service.
      encoded: false
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
  catalogs:
    Sandbox:
      properties:
        authcode-url: https://auth.ref.o2.co.uk/auth/v1/device/auth
        accesstoken-url: https://auth.ref.o2.co.uk:443/auth/v1/token
        grant-type: auth_cookie
        assets-url: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
        validatetoken-url: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
        disambiguationId-url: https://auth.ref.o2.co.uk/auth/v1/auth/select
        assetsURI: /auth/v1/person/CURRENT/asset
  type: rest
  gateway: datapower-gateway
paths:
  /assets:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: authorization
      type: string
      required: true
      in: header
  /authcode:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: user_id
      type: string
      required: true
      in: query
    - name: device_id
      type: string
      required: true
      in: query
    - name: authorization
      type: string
      required: true
      in: header
  /accesstoken:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: x-authcode
      type: string
      required: true
      in: header
    - name: authorization
      type: string
      required: true
      in: header
  /transferauthcode:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: x-authcode
      type: string
      required: true
      in: header
    - name: msisdn
      type: string
      required: true
      in: header
    - name: x-device
      type: string
      required: true
      in: header
  /disambiguationid:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: msisdn
      type: string
      required: true
      in: header
    - name: authorization
      type: string
      required: true
      in: header
definitions: {}
tags: []
