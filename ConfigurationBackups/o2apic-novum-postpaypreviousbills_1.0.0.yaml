swagger: "2.0"
info:
  title: o2apic-novum-postpaypreviousbills
  x-ibm-name: o2apic-novum-postpaypreviousbills
  version: 1.0.0
host: $(catalog.host)
schemes:
- https
basePath: /apic
produces:
- application/json
consumes:
- application/json
security:
- clientIdHeader: []
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: ""
      description: The URL of the target service
      encoded: false
    auth-400:
      value: Something's wrong. Please try again later.
      description: Something's wrong. Please try again later.
    auth-401:
      value: That PIN isn't the one you've used before. Please try again or change
        your PIN.
      description: That PIN isn't the one you've used before. Please try again or
        change your PIN.
    auth-500:
      value: Something's wrong. Please try again later.
      description: Something's wrong. Please try again later.
    auth-404:
      value: Something's wrong. Please try again later.
      description: Something's wrong. Please try again later.
    phoneservice-error:
      value: Something's wrong. Please try again later.
      description: Something's wrong. Please try again later.
    other-backend-error:
      value: Something's wrong. Please try again later.
      description: Something's wrong. Please try again later.
    phone-404:
      value: No billing data found for MSISDN
      description: No billing data found for MSISDN
    phone-503:
      value: The server is busy. Please try again after some time
      description: The server is busy. Please try again after some time
  catalogs: {}
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLog
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
    - gatewayscript:
        version: 1.0.0
        title: GS-FormValidationAPIURL
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* FetchValidationConfig.js      1.0        Dinesh Tomar                                          04-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will create URL to fetch validation config for all apis                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type', 'application/json');
          //form url for to fetch errorConfig JSON
          var orgName = apim.getvariable('api.org.name');
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', 'https://0.0.0.0:9443/'+orgName+'/'+catalog)
          //var validationConfigURL = apim.getvariable('apicURLPrefix')+'config/validationconfig';
          var validationConfigURL = apim.getvariable('apicURLPrefix')+"/apic/callbackendproxyapi?x-servicetype=rest&x-service=validationservice&x-operation=validation";
          apim.setvariable('validationConfigURL', validationConfigURL);

          //record time in ms just before the invoke policy
          apim.setvariable('startTimeMS', (new Date()).getTime());
          apim.setvariable('policyName', 'Invoke-ValidationAPI');
    - invoke:
        version: 1.0.0
        title: Invoke-ValidationAPI
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        target-url: $(validationConfigURL)
        output: validationConfig
    - gatewayscript:
        version: 1.0.0
        title: GS-ValidateParams
        source: "/* **********************************************************************************************************
          */\n/* **********************************************************************************************************
          */\n/* FileName                   Version    Created By                  Modified
          By               Date           */\n/* ValidateParams.js          1.0        Dinesh
          Tomar                                          03-July-2018   */\n/*                                                                                                            */\n/*
          **********************************************************************************************************
          */\n/* Purpose: This GW Script file will return all API configurations to
          be used for validating input params     */\n/*                                                                                                            */\n/*
          Required params:                                                                                           */\n/*
          ************************************************************************************************************/\n\n//record
          time in ms just after the invoke policy\nvar endTimeMS = (new Date()).getTime();\nvar
          timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString)\n\n\n\nvar validationConfig = apim.getvariable('validationConfig.body');\nif
          (apim.getvariable('message.status.code') != 200) {\n    apim.setvariable('errorName',
          'BackendError');\n    var errorPropertyName = 'other-backend-error';\n    logString
          += \" | error-scenario:=\" + errorPropertyName;\n    apim.setvariable('logString',
          logString);\n    apim.setvariable('error-message', apim.getvariable(errorPropertyName));\n
          \   apim.error('BackendError', apim.getvariable('message.status.code'),
          'Internal Error', apim.getvariable('error-message'));\n}\nelse {\n    logString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\n    apim.setvariable('logString', logString);\n    var apiName
          = apim.getvariable('api.name');\n    var operationName = apim.getvariable('api.operation.path');\n
          \   var apiConfig = validationConfig.apisConfig[apiName][operationName];\n
          \   var paramsConfig = validationConfig.paramsConfig;\n    var requiredPathParams
          = apiConfig.requiredPathParams;\n    var requiredQueryParams = apiConfig.requiredQueryParams;\n
          \   var requiredHeaderParams = apiConfig.requiredHeaderParams;\n    validateRequiredParams('headers',
          requiredHeaderParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredQueryParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredPathParams, paramsConfig);\n}\n\nfunction validateRequiredParams(paramType,
          requiredParams, paramsConfig){\n    if (requiredParams !== \"\"){\n        var
          reqParams = requiredParams.split('|');\n        for (var i = 0; i < reqParams.length;
          i++){\n            var paramConfig = paramsConfig[reqParams[i]];\n            var
          inputParam = apim.getvariable('request.'+paramType+'.'+reqParams[i]);\n
          \           var nullValidation = ((inputParam != undefined) || (inputParam
          != null));\n            if (nullValidation){\n                var dataTypeValidation
          = true;\n                dataTypeValidation = validateDataType(inputParam,
          paramConfig);\n                var lengthValidation = true;\n                var
          allowedValuesValidation = true;\n                if (paramConfig.manLength
          || paramConfig.maxLength){\n                    lengthValidation = validateLength(inputParam,
          paramConfig);\n                }\n                if (paramConfig.allowedValues){\n
          \                   allowedValuesValidation = validateAllowedValues(inputParam,
          paramConfig);\n                }\n                if (!(dataTypeValidation)
          || !(lengthValidation) || !(allowedValuesValidation)){\n                    apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                    apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \                   return;\n                }\n            }\n            else
          {\n                apim.setvariable('errorName', paramConfig.validationErrorName);\n
          \               apim.error(paramConfig.validationErrorName, paramConfig.validationErrorCode,
          'Internal Error', paramConfig.validationErrorMessage);\n                return;\n
          \           }\n            \n        }\n    }\n}\n\nfunction validateDataType(inputParam,
          paramConfig){\n    if (paramConfig.dataType == 'number'){\n        return
          !(isNaN(parseInt(inputParam)));\n    }\n    else if (paramConfig.dataType
          == 'email'){ \n        if (inputParam.includes('.') && inputParam.includes('@')
          && (! inputParam.includes(' ')))\n            return true;\n        else\n
          \           return false;\n    }\n    else if (paramConfig.dataType == 'string'){\n
          \       if (inputParam != null && inputParam.length != 0)\n            return
          true;\n        else\n            return false;\n    }\n    else if (paramConfig.dataType
          == 'version'){\n        if (inputParam == null || inputParam.length == 0)\n
          \           return false;\n        else if (inputParam.includes('.')) {\n
          \           var splittedArray = inputParam.split('.');\n            var
          result = true;\n            for (var i = 0; i < splittedArray.length; i++){\n
          \               if (isNaN(parseInt(splittedArray[i]))){\n                    result
          = false;\n                    return result;\n                }\n            }\n
          \           return result;\n        }\n        else{\n            return
          !(isNaN(parseInt(inputParam)));\n        }\n    }\n    else\n        return
          true;\n}\n\nfunction validateLength(inputParam, paramConfig){\n    var minLength
          = paramConfig.minLength;\n    var maxLength = paramConfig.maxLength;\n    if
          ((inputParam.length >= minLength) && (inputParam.length <= maxLength))\n
          \       return true;\n    else\n        return false;\n}\n\nfunction validateAllowedValues(inputParam,
          paramConfig){\n    var allowedValues = paramConfig.allowedValues;\n    var
          allowedValuesArray = allowedValues.split('|');\n    var result = false;\n
          \   for (var i = 0; i < allowedValuesArray.length; i++){\n        if (allowedValuesArray[i]
          == inputParam){\n            result = true;\n            return result;\n
          \       }\n    }\n    return result;\n}\n\nfunction isJSONEmpty(jsonObject)
          {\n    var member;\n    var result = true;\n    for (member in jsonObject)
          {\n        if (jsonObject[member] != null) {\n            result = false;\n
          \       }\n    }\n    return result;\n}"
    - gatewayscript:
        title: GS-FormPropertyAPIURL
        version: 1.0.0
        source: |
          /* *********************************************************************************************************************** */
          /* *********************************************************************************************************************** */
          /* FileName                                Version    Created By                  Modified By               Date           */
          /* FormPropertyInvokeURL.js                1.0        Abhinav Saxena                                        25-May-2018    */
          /*                                                                                                                         */
          /* *********************************************************************************************************************** */
          /* Purpose: This GW Script file will for the URL to invoke Property API                                                    */
          /*                                                                                                                         */
          /* Required params:                                                                                                        */
          /* *********************************************************************************************************************** */

          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type','application/json');

          //form url for to fetch config properties
          var orgName = apim.getvariable('api.org.name');
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', 'https://0.0.0.0:9443/'+orgName+'/'+catalog)
          //var configPropertiesURL =hostName + orgName + '/' + catalog + '/' + 'config/properties';
          var configPropertiesURL =apim.getvariable('apicURLPrefix')+"/apic/callbackendproxyapi?x-servicetype=rest&x-service=configservice&x-operation=config";
          apim.setvariable('configPropertiesURL', configPropertiesURL);

          //record time in ms just before the invoke policy
          apim.setvariable('startTimeMS', (new Date()).getTime());
          apim.setvariable('policyName', 'Invoke-PropertiesHandler');
    - invoke:
        title: Invoke-PropertiesHandler
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        version: 1.0.0
        target-url: $(configPropertiesURL)
        output: messages-property
    - gatewayscript:
        title: GS-CreategetConsolidateAuthRequest
        version: 1.0.0
        source: "/* ***********************************************************************************************************************
          */\n/* ***********************************************************************************************************************
          */\n/* FileName                                Version    Created By                  Modified
          By               Date           */\n/* ConsolidatedAuthServiceRequest.js
          \      1.0        Abhinav Saxena                                        08-May-2018
          \   */\n/*                                                                                                                         */\n/*
          ***********************************************************************************************************************
          */\n/* Purpose: This GW Script file will set the URL to call Auth Service
          \                                                     */\n/*                                                                                                                         */\n/*
          Required params:                                                                                                        */\n/*
          ***********************************************************************************************************************
          */\n\n//record time in ms just after the invoke policy\nvar endTimeMS =
          (new Date()).getTime();\nvar timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString)\n\nvar messages = apim.getvariable('messages-property.body');\nif
          (apim.getvariable('message.status.code') != 200) {\n    apim.setvariable('errorName',
          'BackendError');\n    var errorPropertyName = 'other-backend-error';\n    logString
          += \" | error-scenario:=\" + errorPropertyName;\n    apim.setvariable('logString',
          logString);\n    apim.setvariable('error-message', apim.getvariable(errorPropertyName));\n
          \   apim.error('BackendError', apim.getvariable('message.status.code'),
          'Internal Error', apim.getvariable('error-message'));\n}\nelse {\n    var
          ibmclientId = apim.getvariable('client.app.id');\n    apim.setvariable('message.headers.x-ibm-client-id',
          ibmclientId);\n    apim.setvariable('message.headers.content-type', 'application/json');\n\n
          \   //form url for consolidated auth service\n    var orgName = apim.getvariable('api.org.name');\n
          \   var catalog = apim.getvariable('env.path');\n    apim.setvariable('apicURLPrefix',
          'https://0.0.0.0:9443/'+orgName+'/'+catalog)\n\n    //var authCodeURL =
          hostName+orgName+'/'+catalog + messages.authserver.generateTransferAuthCode.apicURI
          ;\n    var authcode = apim.getvariable('request.headers.x-authcode');\n
          \   var msisdn = apim.getvariable('request.parameters.msisdn');\n    var
          device = apim.getvariable('request.headers.x-device');\n    var content
          = apim.getvariable('request.headers.content-type');\n    var correlator
          = apim.getvariable('request.headers.x-correlator');\n    var userid = apim.getvariable('request.headers.x-user-id');\n
          \   var clientId = apim.getvariable('request.headers.x-client-id');\n\n
          \   var authCodeURL = apim.getvariable('apicURLPrefix')+ messages.authserver.generateTransferAuthCode.apicURI
          ;\n    apim.setvariable('authCodeEndPoint', authCodeURL);\n    apim.setvariable('message.headers.x-authcode'
          , authcode);\n    apim.setvariable('message.headers.msisdn' , msisdn);\n
          \   apim.setvariable('message.headers.x-device' , device);\n    apim.setvariable('message.headers.content-type'
          , content);\n    apim.setvariable('message.headers.x-callid' , correlator);\n
          \   apim.setvariable('message.headers.x-user-id', userid);\n    \n    //record
          time in ms just before the invoke policy\n    apim.setvariable('startTimeMS',
          (new Date()).getTime());\n    apim.setvariable('policyName', 'Invoke-getConsolidatedAuth');\n}\n
          \   //apim.setvariable('message.headers.x-ibm-client-id', clientId);\n\n//get
          header paramerts from the incoming request\n/*var authcode = apim.getvariable('request.headers.x-authcode');\nvar
          msisdn = apim.getvariable('request.parameters.msisdn');\nvar device = apim.getvariable('request.headers.x-device');\nvar
          content = apim.getvariable('request.headers.content-type');\nvar correlator
          = apim.getvariable('request.headers.x-correlator');\nvar userid = apim.getvariable('request.headers.x-user-id');\nvar
          clientId = apim.getvariable('request.headers.x-client-id');\n\nvar errorName
          = undefined;\n\nif(authcode == null || authcode == undefined || authcode.length
          == 0){\n    apim.setvariable('errorName', 'InvalidAuthCode');\n    apim.error('InvalidAuthCode',500,
          'Null Auth Code','Null Auth Code Received');\n    \n}\nelse if (msisdn ==
          null || msisdn.length !== 12 || msisdn == undefined){\n    apim.setvariable('errorName',
          'InvalidMsisdn');\n    apim.error('InvalidMsisdn', 500 , 'Invalid MSISDN',
          'MSISDN Invalid or Null');\n    \n}\nelse if (device == null || device ==
          undefined || device.length == 0){\n    apim.setvariable('errorName', 'InvalidDeviceType');\n
          \   apim.error('InvalidDeviceType', 500 , 'Invalid Device', 'Device details
          null');\n    \n}\nelse if (clientId == null || clientId.length == 0){\n
          \   apim.setvariable('errorName', 'InvalidClientId');\n    apim.error('InvalidClientId',500,
          'Content Incorrect', 'Missing or invalid client id');\n    \n}\n\nelse if
          (content == null || content !== 'application/json'){\n    apim.setvariable('errorName',
          'InvalidContentType');\n    apim.error('InvalidContentType',500, 'Content
          Incorrect', 'Incorrect Content');\n    \n}\n\nelse if (correlator == null
          || correlator == undefined || correlator.length == 0 ){\n    apim.setvariable('errorName',
          \"InvalidCorrelator\");\n    apim.error('InvalidCorrelator',500, 'Missing
          Correlator' , 'Missing Correlator');\n    \n}\nelse if (userid == null ||
          userid == undefined || userid.length == 0 ){\n    apim.setvariable('errorName',
          \"InvalidUserId\");\n    apim.error('InvalidUserId',500, 'Missing User ID'
          , 'Missing User ID');\n    \n}\nelse if (messages == null || isJSONEmpty(messages)){\n
          \   apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\n}\n\n\n//else {\n    apim.setvariable('authCodeEndPoint',
          authCodeURL);\n    apim.setvariable('message.headers.x-authcode' , authcode);\n
          \   apim.setvariable('message.headers.msisdn' , msisdn);\n    apim.setvariable('message.headers.x-device'
          , device);\n    apim.setvariable('message.headers.content-type' , content
          );\n    apim.setvariable('message.headers.x-callid' , correlator);\n    apim.setvariable('message.headers.x-user-id',
          userid);\n    //apim.setvariable('message.headers.x-ibm-client-id', clientId);\n//}\n\nfunction
          isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n    for
          (member in jsonObject) {\n        if (jsonObject[member] != null) {\n            result
          = false;\n        }\n    }\n    return result;\n}*/"
    - invoke:
        target-url: $(authCodeEndPoint)
        verb: GET
        title: Invoke-getConsolidatedAuth
        description: Gets Disambiguation ID and Access Token
        output: getConsolidatedAuthResponseObj
    - gatewayscript:
        title: GS-CreatePhoneServiceRequest
        version: 1.0.0
        source: |-
          /* *********************************************************************************************************************** */
          /* *********************************************************************************************************************** */
          /* FileName                                Version    Created By                  Modified By               Date           */
          /* PhoneServiceRequest.js                   1.0       Abhinav Saxena                                        08-May-2018    */
          /*                                                                                                                         */
          /* *********************************************************************************************************************** */
          /* Purpose: This GW Script file will create request for phone service.                                                     */
          /*                                                                                                                         */
          /* Required params:                                                                                                        */
          /* *********************************************************************************************************************** */


          //record time in ms just after the invoke policy
          var endTimeMS = (new Date()).getTime();
          var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
          var logString = apim.getvariable('logString');
          logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
          apim.setvariable('logString', logString)

          //Save the getConsolidatedAuth call response body to a variable
          var getConsolidatedAuthResponse = apim.getvariable('getConsolidatedAuthResponseObj.body');
          var messages = apim.getvariable('messages-property.body');
          var orgName = apim.getvariable('api.org.name');
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', 'https://0.0.0.0:9443/'+orgName+'/'+catalog)

          //var url = messages.phoneservice.previousbills.uri;

          //Set the phone service URL
          //apim.setvariable('phoneServiceEndpoint',url);

          var errorName = undefined;

          //Check if the consolidated auth response
          if (apim.getvariable('message.status.code') != 200) {
              apim.setvariable('errorName', 'BackendError');
              var errorPropertyName = 'other-backend-error';
              logString += " | error-scenario:=" + errorPropertyName;
              apim.setvariable('logString', logString);
              apim.setvariable('error-message', apim.getvariable(errorPropertyName));
              apim.error('BackendError', apim.getvariable('message.status.code'), 'Internal Error', apim.getvariable('error-message'));
          }
          else {
              //Create request for phone details service
              //apim.setvariable('message.headers.disambiguation-id', getConsolidatedAuthResponse.disambiguation_id);
              //apim.setvariable('message.headers.Authorization', 'Bearer '+ getConsolidatedAuthResponse.access_token);
              apim.setvariable('phoneServiceEndpoint',apim.getvariable('apicURLPrefix')+"/apic/callbackendproxyapi?x-servicetype=rest&x-service=phoneservice&x-operation=previousbills&disambiguation-id="+getConsolidatedAuthResponse.disambiguation_id+"&authorization=Bearer "+getConsolidatedAuthResponse.access_token);

              //record time in ms just before the invoke policy
              apim.setvariable('startTimeMS', (new Date()).getTime());
              apim.setvariable('policyName', 'Invoke-PhoneDetailsService');
          }


          function isJSONEmpty(jsonObject) {
              var member;
              var result = true;
              for (member in jsonObject) {
                  if (jsonObject[member] != null) {
                      result = false;
                  }
              }
              return result;
          }
    - invoke:
        title: Invoke-PhoneDetailsService
        timeout: 60
        verb: GET
        cache-response: protocol
        cache-ttl: 900
        version: 1.0.0
        target-url: $(phoneServiceEndpoint)
        output: phoneServiceResponseObj
    - gatewayscript:
        title: Validate Phone Service Response
        version: 1.0.0
        source: "/* ***********************************************************************************************************************
          */\r\n/* ***********************************************************************************************************************
          */\r\n/* FileName                                Version    Created By                  Modified
          By               Date           */\r\n/* ValidatePhoneServiceResponse.js
          \        1.0        Abhinav Saxena                                        08-May-2018
          \   */\r\n/*                                                                                                                         */\r\n/*
          ***********************************************************************************************************************
          */\r\n/* Purpose: This GW Script file will validate response object of phone
          service.                                            */\r\n/*                                                                                                                         */\r\n/*
          Required params:                                                                                                        */\r\n/*
          ***********************************************************************************************************************
          */\r\n\r\n\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
          = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS -
          apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
          += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
          + \" ms\";\r\napim.setvariable('logString', logString)\r\n\r\nvar errorName
          = undefined;\r\n\r\n//Save the getConsolidatedAuth call response body to
          a variable\r\nvar getPhoneServiceResponse = apim.getvariable('phoneServiceResponseObj.body');\r\n\r\n//Check
          the response object from phone service\r\nif (apim.getvariable('message.status.code')
          != 200) {\r\n    apim.setvariable('errorName', 'BackendError');\r\n    if
          (apim.getvariable('message.status.code') == 404) {\r\n      var errorPropertyName
          = 'phone-404';  \r\n    }\r\n    else if (apim.getvariable('message.status.code')
          == 503) {\r\n        var errorPropertyName = 'phone-503';\r\n    }\r\n    else
          {\r\n    var errorPropertyName = 'other-backend-error';\r\n    }\r\n    logString
          += \" | error-scenario:=\" + errorPropertyName;\r\n    apim.setvariable('logString',
          logString);\r\n    apim.setvariable('error-message', apim.getvariable(errorPropertyName));\r\n
          \   apim.error('BackendError', apim.getvariable('message.status.code'),
          'Internal Error', apim.getvariable('error-message'));\r\n}\r\n\r\nfunction
          isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\n
          \   for (member in jsonObject) {\r\n        if (jsonObject[member] != null)
          {\r\n            result = false;\r\n        }\r\n    }\r\n    return result;\r\n}"
    - map:
        title: map
        inputs:
          input:
            schema:
              $ref: '#/definitions/PhoneServiceOut'
            variable: phoneServiceResponseObj.body
            content: application/json
        outputs:
          output:
            schema:
              $ref: '#/definitions/PreviousBillAPIResponse'
            variable: message.body
            content: application/json
        actions:
        - create: output.previousBills
          foreach: input.previousBills
          from: input.previousBills
          actions:
          - set: totalBillAmount
            from: totalBillAmount
            value: |
              if ($(totalBillAmount).length != 0) {
                  if ($(totalBillAmount).toString().includes("-")) {
                      "-" + (parseFloat($(totalBillAmount)).toFixed(2).replace("-", "£"));
                  } else {
                       "£" + parseFloat($(totalBillAmount)).toFixed(2);
                  }
              }
          - set: billNumber
            from: billNumber
          - set: billDate
            from: billDate
            value: $(billDate).toLocaleString()
        version: 1.0.0
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
    catch:
    - errors:
      - ConnectionError
      - InvalidMsisdn
      - InvalidDeviceType
      - IncorrectContent
      - InvalidAuthCode
      - InvalidDisambiguationID
      - InvalidAccessToken
      - InvalidCorrelator
      - InvalidContentType
      - InvalivClientid
      - InvalidUserid
      - BackendError
      - default
      execute:
      - gatewayscript:
          title: GS-ErrorHandling
          version: 1.0.0
          source: |-
            /* ****************************************************************************************************************** */
            /* ****************************************************************************************************************** */
            /* FileName                           Version    Created By                  Modified By               Date           */
            /* Errorhandling.js                   1.0        Dinesh Tomar                                          07-May-2018    */
            /*                                                                                                                    */
            /* ****************************************************************************************************************** */
            /* Purpose: This GW Script file will read error config for the catch block error name and will set the necessary      */
            /*          params like status code, reason phrase and will return the error json                                     */
            /* Required params: errorName                                                                                         */
            /* ****************************************************************************************************************** */
            var urlOpen = require('urlopen');
            //form url for to fetch errorConfig JSON
            var requestURL = apim.getvariable('request.uri');
            var orgName = apim.getvariable('api.org.name');
            var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
            var catalog = apim.getvariable('env.path');
            var errorConfigURL = hostName+orgName+'/'+catalog+'/'+'config/errorconfig';
            var clientId = apim.getvariable('client.app.id');
            apim.setvariable('message.headers.content-type', 'application/json');
            var errorConfigURLOptions = {
                target: errorConfigURL,
                sslClientProfile: 'api-sslcli-all',
                headers: {'x-ibm-client-id': clientId, 'content-type': 'application/json' }
            };
            //fetch errorName and errorConfig JSON from context variables
            urlOpen.open(errorConfigURLOptions, function (error, response) {
                if (error) {
                    throw error;
                } else {
                    response.readAsJSON(function (error, errorConfigJSON) {
                        if (error) {
                            throw error;
                        } else {
                            var errorName = apim.getvariable('errorName');
                            if (errorName == null && apim.getvariable('message.status.code') == null) {
                                console.log("inside first if");
                                errorName = 'default';
                            } else if (errorName == null && apim.getvariable('message.status.reason') != null && apim.getvariable('message.status.reason').startsWith('APIC:') ) {
                                errorName = 'default';
                                apim.setvariable('message.status.code', apim.getvariable('message.status.code'));
                                apim.setvariable('message.status.reason', apim.getvariable('message.status.reason'));
                                apim.setvariable('message.body', apim.getvariable('message.body'));
                            } else {
                                if (errorName == 'BackendError') {
                                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];
                                    apim.setvariable('message.status.reason', errorDetails.reasonPhrase);
                                    var errorMessage = errorDetails.errorMessage;
                                    errorMessage.error.message = apim.getvariable('error-message');
                                    apim.setvariable('message.body', errorMessage);
                                }
                                //fetch specific block from error config JSON
                                else if (! isJSONEmpty(errorConfigJSON)) {
                                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];
                                    var statusCode = errorDetails.statusCode;
                                    var reasonPhrase = errorDetails.reasonPhrase;
                                    var errorMessage = errorDetails.errorMessage;
                                    apim.setvariable('message.status.code', statusCode);
                                    apim.setvariable('message.status.reason', reasonPhrase);
                                    apim.setvariable('message.body', errorMessage);
                                }
                                //else block executes in case error config file is not loaded. it will set a default error message
                                else {
                                    apim.setvariable('message.status.code', 500);
                                    apim.setvariable('message.status.reason', 'Internal Error');
                                    var errorMessage = {};
                                    errorMessage.httpCode = 400;
                                    errorMessage.httpMessage = "Internal Error";
                                    errorMessage.moreInformation = "Something's wrong. Please try again later.";
                                    apim.setvariable('message.body', errorMessage);
                                }
                            }
                        }
                    });
                }
            });

            //below function checks if json object is null or not
            function isJSONEmpty(jsonObject) {
                var member;
                var result = true;
                for (member in jsonObject) {
                    if (jsonObject[member] != null) {
                        result = false;
                    }
                }
                return result;
            }
      - gatewayscript:
          title: GS-ExtractErrorLoggingData
          version: 1.0.0
          source: "/* *************************************************************************************************************
            */\n/* *************************************************************************************************************
            */\n/* FileName                      Version    Created By                  Modified
            By               Date           */\n/* ExtractErrorLoggingData.js    1.0
            \       Dinesh Tomar                                          06-July-2018
            \  */\n/*                                                                                                               */\n/*
            *************************************************************************************************************
            */\n/* Purpose: This GW Script will extract error metadata for logging
            \                                              */\n/*                                                                                                               */\n/*
            Required params:                                                                                              */\n/*
            ***************************************************************************************************************/\n//Extract
            general metadata from system variables\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
            apicTxId = apim.getvariable('apic-transaction-id');\nvar xGlobalTxId =
            apim.getvariable('request.headers.x-global-transaction-id');\nvar requestURI
            = apim.getvariable('request.uri');\n\n//Extract response metadata from
            system variables\nvar responseHeaders = apim.getvariable('message.headers');\n\ndelete
            responseHeaders['Accept-Encoding'];\ndelete responseHeaders['X-Global-Transaction-ID'];\ndelete
            responseHeaders['User-Agent'];\ndelete responseHeaders['Via'];\ndelete
            responseHeaders['x-authcode'];\ndelete responseHeaders['authorization'];\ndelete
            responseHeaders['Authorization'];\ndelete responseHeaders['Access-Control-Allow-Methods'];\ndelete
            responseHeaders['Access-Control-Allow-Origin'];\ndelete responseHeaders['Access-Control-Allow-Headers'];\ndelete
            responseHeaders['Access-Control-Expose-Headers'];\n\nvar responseHeadersString
            = JSON.stringify(responseHeaders);\nvar responseStatusCode = apim.getvariable('message.status.code');\nvar
            responseStatusReason = apim.getvariable('message.status.reason');\nvar
            errorName = apim.getvariable('errorName');\n//calculate time elapsed\nvar
            apiStartTimeMS = apim.getvariable('apiStartTimeMS');\nvar apiEndTimeMS
            = (new Date()).getTime();\nvar totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS)
            + \" ms\";\n\nvar logString = \"type:=error\"\n                + \" |
            system-datetime:=\" +        systemDateTime\n                + \" | apic-transaction-id:=\"
            +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
            \               + \" | request-uri:=\" +            requestURI\n                +
            apim.getvariable('logString')\n                + \" | response-http-headers:=\"
            +  responseHeadersString\n                + \" | response-status-code:=\"
            +   responseStatusCode\n                + \" | response-status-reason:=\"
            + responseStatusReason\n                + \" | error-name:=\" +             errorName\n
            \               + \" | total-time-elapsed:=\" +     totalTimeElapsed;\n
            \               \nconsole.log(logString);\n\n"
  gateway: datapower-gateway
  type: rest
tags: []
definitions:
  PhoneServiceOut:
    description: ""
    type: object
    properties:
      previousBills:
        type: array
        items:
          properties:
            totalBillAmount:
              type: number
            billNumber:
              type: string
            billDate:
              type: string
          type: object
    example: "{\r\n    \"previousBills\": [{\r\n        \"totalBillAmount\": 655.81,\r\n
      \       \"billNumber\": \"447000000009-07\",\r\n        \"billDate\": \"01.03.2013\"\r\n
      \   }, {\r\n        \"totalBillAmount\": 118.63,\r\n        \"billNumber\":
      \"447000000009-06\",\r\n        \"billDate\": \"01.02.2013\"\r\n    }, {\r\n
      \       \"totalBillAmount\": 56.63,\r\n        \"billNumber\": \"447000000009-05\",\r\n
      \       \"billDate\": \"01.01.2013\"\r\n    }, {\r\n        \"totalBillAmount\":
      43.63,\r\n        \"billNumber\": \"447000000009-04\",\r\n        \"billDate\":
      \"01.12.2012\"\r\n    }, {\r\n        \"totalBillAmount\": 21.63,\r\n        \"billNumber\":
      \"447000000009-03\",\r\n        \"billDate\": \"01.11.2012\"\r\n    }, {\r\n
      \       \"totalBillAmount\": -1.63,\r\n        \"billNumber\": \"447000000009-02\",\r\n
      \       \"billDate\": \"01.10.2012\"\r\n    }]\r\n}"
  PreviousBillAPIResponse:
    description: ""
    type: object
    properties:
      previousBills:
        type: array
        items:
          properties:
            totalBillAmount:
              type: number
            billNumber:
              type: string
            billDate:
              type: string
          type: object
    example: "{\r\n  \"previousBills\": [\r\n    {\r\n      \"totalBillAmount\": 0,\r\n
      \     \"billNumber\": \"string\",\r\n      \"billDate\": \"2018-05-17T04:46:23.890Z\"\r\n
      \   }\r\n  ]\r\n}"
paths:
  /{msisdn}/postpay/bill/previousbills:
    get:
      responses:
        "200":
          description: 200 OK
    parameters:
    - name: msisdn
      type: string
      required: true
      in: path
    - name: x-authcode
      type: string
      required: true
      in: header
    - name: x-device
      type: string
      required: true
      in: header
    - name: x-correlator
      type: string
      required: true
      in: header
    - name: x-user-id
      type: string
      required: true
      in: header
    - name: x-client-id
      type: string
      required: true
      in: header
