swagger: "2.0"
info:
  title: authservice
  x-ibm-name: authservice
  version: 1.0.0
schemes:
- https
basePath: /auth
produces:
- application/xml
- application/json
consumes:
- application/xml
- application/json
security:
- clientIdHeader: []
  clientIdSecret: []
securityDefinitions:
  clientIdSecret:
    type: apiKey
    description: ""
    in: header
    name: X-IBM-Client-Secret
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    assetsURI:
      value: /auth/assets
      description: URI of assets API.
    disambiguationId-url:
      value: https://auth.ref.o2.co.uk/auth/v1/auth/select
      description: URL for getting disambiguation id.
    validatetoken-url:
      value: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
      description: URL for validating access token.
    assets-url:
      value: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
      description: URL for retrieving assets.
    grant-type:
      value: auth_cookie
      description: The type of access granted for access token service
    accesstoken-url:
      value: https://auth.ref.o2.co.uk:443/auth/v1/token
      description: URL of the access token service.
    authcode-url:
      value: https://auth.ref.o2.co.uk/auth/v1/device/auth
      description: URL of the authcode service.
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
    apic_id:
      value: apiconnect.1
    apic_secret:
      value: FoXaPo$eB=3=
    transferauth-url:
      value: https://auth.ref.o2.co.uk/auth/v1/auth/tac/issue
      description: URL of transfer auth code service.
    sendto-url:
      value: https://billing.ref.o2.co.uk/bill?noheader=true&routeTo=pay/bill&disambiguation_id=%s&cm_mmc=myo2app-_-#deviceType#-_-#clientId#-_-bills-_-makeapayment
    failure-url:
      value: https://mymobile.ref.o2.co.uk/error/page/500?noheader=true&cm_mmc=myo2app-_-#deviceType#-_-#clientId#-_-bills-_-makeapayment
    credshandler-url:
      value: https://identity.ref.o2.co.uk/redeem/tac?transfer_auth_code=#AUTH_CODE#&sendTo=#SEND_TO#&failureUrl=#FAILURE_URL#
    billedcharges:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/billedcharges
    recommendation:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/billedcharges/recommendation
    recentcharges:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/recentcharges
    previousbills:
      value: http://lbtest0phoneapptier.myo2r53.co.uk:443/consumer/CURRENT/paym/bill/previousbills
    msisdndetails:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym
    phoneplan:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/cca/phoneplan
    upgradesandpromotions:
      value: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
    billprofile:
      value: http://lbtest0phoneapptier.myo2r53.co.uk:443/phone/v2/consumer/CURRENT/paym/bill/profile
  catalogs:
    Sandbox:
      properties:
        authcode-url: https://auth.ref.o2.co.uk/auth/v1/device/auth
        accesstoken-url: https://auth.ref.o2.co.uk:443/auth/v1/token
        grant-type: auth_cookie
        assets-url: https://auth.ref.o2.co.uk/person/v1/person/CURRENT/asset?asset_types=PAYM,PAYG,PAYMMBB,O2WIFI,O2DRIVE,WALLET
        validatetoken-url: https://auth.ref.o2.co.uk/auth/v1/tokeninfo
        disambiguationId-url: https://auth.ref.o2.co.uk/auth/v1/auth/select
        assetsURI: /auth/assets
        apic_id: apiconnect.1
        apic_secret: FoXaPo$eB=3=
        transferauth-url: https://auth.ref.o2.co.uk/auth/v1/auth/tac/issue
        sendto-url: https://billing.ref.o2.co.uk/bill?noheader=true&routeTo=pay/bill&disambiguation_id=%s&cm_mmc=myo2app-_-#deviceType#-_-#clientId#-_-bills-_-makeapayment
        failure-url: https://mymobile.ref.o2.co.uk/error/page/500?noheader=true&cm_mmc=myo2app-_-#deviceType#-_-#clientId#-_-bills-_-makeapayment
        credshandler-url: 'https://identity.ref.o2.co.uk/redeem/tac?transfer_auth_code=#AUTH_CODE#&sendTo=#SEND_TO#&failureUrl=#FAILURE_URL#       '
    sandbox:
      properties:
        recommendation: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/billedcharges/recommendation
        recentcharges: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/bill/recentcharges
        previousbills: http://lbtest0phoneapptier.myo2r53.co.uk:443/consumer/CURRENT/paym/bill/previousbills
        msisdndetails: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym
        phoneplan: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/cca/phoneplan
        upgradesandpromotions: https://zeus-lb.ref.o2.co.uk:5443/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
        billprofile: http://lbtest0phoneapptier.myo2r53.co.uk:443/phone/v2/consumer/CURRENT/paym/bill/profile
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLoggingData
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\ndelete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
        description: This GW Script will extract input metadata for logging
    - activity-log:
        title: Log-Payload
        content: payload
        error-content: payload
        version: 1.0.0
    - operation-switch:
        title: operation-switch
        case:
        - operations:
          - verb: get
            path: /authcode
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAAAConfigRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                     Version    Created By                  Modified
                By               Date           */\r\n/* CreateAAAConfigRequest.js
                \   1.0        Dinesh Tomar                                          02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */
                \                                                                               \r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                clientId = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
                clientId);\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                'https://0.0.0.0:9443/' + orgName + '/' + catalog);\r\n\r\n//form
                url for to fetch properties config JSON\r\nvar aaaConfigURL = apim.getvariable('apicURLPrefix')
                + '/' + 'config/aaaconfig';\r\napim.setvariable('aaaConfigURL', aaaConfigURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AAAConfig');"
              description: Create request to get AAA config file.
          - invoke:
              version: 1.0.0
              title: Invoke-AAAConfig
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              description: Load AAA config file
              target-url: $(aaaConfigURL)
          - xslt:
              title: XSLT-AAA
              input: true
              version: 1.0.0
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
                xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
                xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
                />\r\n    <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"
                method=\"xml\"/>\r\n    <xsl:strip-space elements=\"*\"/>\r\n    \r\n
                \   <xsl:template match=\"/\">\r\n        <!--record time in ms just
                after the invoke policy-->\r\n        <xsl:variable name=\"endTimeMS\"
                select=\"dp:time-value()\"/>\r\n        <xsl:variable name=\"timeTakenByPreviousPolicy\"
                \ select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
                \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
                | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,'
                ms' )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'logString'\"
                />\r\n            <xsl:with-param name=\"value\" select=\"$logString\"
                />\r\n        </xsl:call-template>\r\n        \r\n        <xsl:variable
                name=\"aaaConfiguration\" select=\".\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'passwordMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authZPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:variable
                name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n        <xsl:variable name=\"basicAuthHeader\" select=\"apim:getContext('request.headers.authorization')\"/>\r\n
                \       <xsl:variable name=\"encodedCreds\" select=\"substring-after($basicAuthHeader,
                'Basic ')\"/>\r\n        <xsl:variable name=\"decodedCreds\" select=\"dp:decode($encodedCreds,
                'base-64')\"/>\r\n        <xsl:variable name=\"userName\" select=\"substring-before($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"password\" select=\"substring-after($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[Username
                = $userName]\"/>\r\n        <xsl:choose>\r\n            <xsl:when
                test=\"string-length($userConfig) = 0\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientId'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'400'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('User &quot;', $userName, '&quot;
                is not provisioned.')\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:for-each
                select=\"$userConfig\">\r\n                    <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                        <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                        <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                        <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                            <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                <xsl:variable
                name=\"ipAddressToken\">\r\n                                    <xsl:value-of
                select=\".\"/>\r\n                                </xsl:variable>
                \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
                \                       </xsl:if>\r\n                        <xsl:if
                test=\"apim:getVariable('passwordMatched') = 'false'\">\r\n                            <xsl:if
                test=\"$password = $passwordFromConfig\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:if>\r\n                        </xsl:if>\r\n
                \                       <xsl:choose>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'true') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'false') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
                '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientSecret'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"'Authentication failed.'\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:otherwise>\r\n                        </xsl:choose>\r\n
                \                   </xsl:if>                        \r\n                </xsl:for-each>\r\n
                \           </xsl:otherwise>\r\n        </xsl:choose>\r\n        <xsl:if
                test=\"apim:getVariable('authCPassed') = 'true'\">\r\n            <xsl:variable
                name=\"allowedPaths\">\r\n                <allowedPaths>\r\n                    <xsl:for-each
                select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
                \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
                = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </allowedPaths>\r\n            </xsl:variable>\r\n
                \           <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n
                \                       <xsl:call-template name=\"apim:setVariable\">\r\n
                \                           <xsl:with-param name=\"varName\" select=\"'authZPassed'\"
                />\r\n                            <xsl:with-param name=\"value\" select=\"'true'\"
                />\r\n                        </xsl:call-template>\r\n                    </xsl:if>\r\n
                \               </xsl:if>\r\n            </xsl:for-each>\r\n            <xsl:if
                test=\"apim:getVariable('authZPassed') = 'false'\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"'Authorization failed.'\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:if>\r\n        </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
              description: Authenticates and authorize the consumer
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforAuthcode
              source: "/* **************************************************************************************************************
                */\r\n/* **************************************************************************************************************
                */\r\n/* FileName                       Version    Created By       Modified
                By    Date                                 */\r\n/* CreateRequestforAuthcode.js
                \   1.0        Dinesh Tomar     08-May-2018                                         */\r\n/*
                \                                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will create request to get authcode
                from authserver                               */\r\n/*                                                                                                                */\r\n/*
                Required params:                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n    \r\nvar searchURI = apim.getvariable('request.search');\r\nvar
                clientId = apim.getvariable('outputCreds');\r\napim.setvariable('message.body',
                '');\r\napim.setvariable('message.headers.content-type', 'application/x-www-form-urlencoded');\r\nvar
                authURL = apim.getvariable('authcode-url') + searchURI + '&client_id='
                + clientId;\r\napim.setvariable('authURL', authURL);\r\n     \r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AuthServer');"
              description: Create requests for authcode and access token service
          - invoke:
              target-url: $(authURL)
              title: Invoke-AuthServer
              verb: POST
              description: Invoke auth server for authcode
          - gatewayscript:
              version: 1.0.0
              title: GS-ExtractTime
              source: |-
                /* *************************************************************************************************************** */
                /* *************************************************************************************************************** */
                /* FileName                        Version    Created By                  Modified By               Date           */
                /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
                /*                                                                                                                 */
                /* *************************************************************************************************************** */
                /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
                /*                                                                                                                 */
                /* Required params:                                                                                                */
                /* *************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);
              description: This GW Script file will extract tiem taken by invoke policy
                to execute and pass it to the log string
        - operations:
          - verb: get
            path: /accesstoken
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAAAConfigRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                     Version    Created By                  Modified
                By               Date           */\r\n/* CreateAAAConfigRequest.js
                \   1.0        Dinesh Tomar                                          02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */
                \                                                                               \r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                clientId = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
                clientId);\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                'https://0.0.0.0:9443/' + orgName + '/' + catalog);\r\n\r\n//form
                url for to fetch properties config JSON\r\nvar aaaConfigURL = apim.getvariable('apicURLPrefix')
                + '/' + 'config/aaaconfig';\r\napim.setvariable('aaaConfigURL', aaaConfigURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AAAConfig');"
              description: Create request to get AAA config file.
          - invoke:
              version: 1.0.0
              title: Invoke-AAAConfig
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              description: Load AAA config file
              target-url: $(aaaConfigURL)
          - xslt:
              title: XSLT-AAA
              input: true
              version: 1.0.0
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
                xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
                xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
                />\r\n    <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"
                method=\"xml\"/>\r\n    <xsl:strip-space elements=\"*\"/>\r\n    \r\n
                \   <xsl:template match=\"/\">\r\n        <!--record time in ms just
                after the invoke policy-->\r\n        <xsl:variable name=\"endTimeMS\"
                select=\"dp:time-value()\"/>\r\n        <xsl:variable name=\"timeTakenByPreviousPolicy\"
                \ select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
                \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
                | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,'
                ms' )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'logString'\"
                />\r\n            <xsl:with-param name=\"value\" select=\"$logString\"
                />\r\n        </xsl:call-template>\r\n        \r\n        <xsl:variable
                name=\"aaaConfiguration\" select=\".\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'passwordMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authZPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:variable
                name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n        <xsl:variable name=\"basicAuthHeader\" select=\"apim:getContext('request.headers.authorization')\"/>\r\n
                \       <xsl:variable name=\"encodedCreds\" select=\"substring-after($basicAuthHeader,
                'Basic ')\"/>\r\n        <xsl:variable name=\"decodedCreds\" select=\"dp:decode($encodedCreds,
                'base-64')\"/>\r\n        <xsl:variable name=\"userName\" select=\"substring-before($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"password\" select=\"substring-after($decodedCreds,
                ':')\"/>\r\n        <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[Username
                = $userName]\"/>\r\n        <xsl:choose>\r\n            <xsl:when
                test=\"string-length($userConfig) = 0\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientId'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'400'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('User &quot;', $userName, '&quot;
                is not provisioned.')\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:for-each
                select=\"$userConfig\">\r\n                    <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                        <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                        <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                        <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                            <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                <xsl:variable
                name=\"ipAddressToken\">\r\n                                    <xsl:value-of
                select=\".\"/>\r\n                                </xsl:variable>
                \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
                \                       </xsl:if>\r\n                        <xsl:if
                test=\"apim:getVariable('passwordMatched') = 'false'\">\r\n                            <xsl:if
                test=\"$password = $passwordFromConfig\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'passwordMatched'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:if>\r\n                        </xsl:if>\r\n
                \                       <xsl:choose>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'true') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:when
                test=\"((apim:getVariable('ipAddressMatched') = 'false') and (apim:getVariable('passwordMatched')
                = 'true'))\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
                '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidClientSecret'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"'Authentication failed.'\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:otherwise>\r\n                        </xsl:choose>\r\n
                \                   </xsl:if>                        \r\n                </xsl:for-each>\r\n
                \           </xsl:otherwise>\r\n        </xsl:choose>\r\n        <xsl:if
                test=\"apim:getVariable('authCPassed') = 'true'\">\r\n            <xsl:variable
                name=\"allowedPaths\">\r\n                <allowedPaths>\r\n                    <xsl:for-each
                select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
                \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
                = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </allowedPaths>\r\n            </xsl:variable>\r\n
                \           <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n
                \                       <xsl:call-template name=\"apim:setVariable\">\r\n
                \                           <xsl:with-param name=\"varName\" select=\"'authZPassed'\"
                />\r\n                            <xsl:with-param name=\"value\" select=\"'true'\"
                />\r\n                        </xsl:call-template>\r\n                    </xsl:if>\r\n
                \               </xsl:if>\r\n            </xsl:for-each>\r\n            <xsl:if
                test=\"apim:getVariable('authZPassed') = 'false'\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"'Authorization failed.'\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:if>\r\n        </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
              description: Authenticates and authorize the consumer
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforAccessToken
              source: "/* **************************************************************************************************************
                */\r\n/* **************************************************************************************************************
                */\r\n/* FileName                          Version    Created By       Modified
                By    Date                              */\r\n/* CreateRequestforAccessToken.js
                \   1.0        Dinesh Tomar     08-May-2018                                      */\r\n/*
                \                                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will create request to get access
                token from authserver.                          */\r\n/*                                                                                                                */\r\n/*
                Required params:                                                                                               */\r\n/*
                **************************************************************************************************************
                */\r\n    \r\n//fetch auth server URL to generate access token and
                set it in a variable\r\nvar authURL = apim.getvariable('accesstoken-url');\r\napim.setvariable('authURL',
                authURL);\r\n\r\n    \r\n//read all http headers from the input request\r\nvar
                authCode = apim.getvariable('message.headers.x-authcode');\r\n    \r\nvar
                scope = [\"openid\",\"profile\",\"phone\",\"email\"];\r\n//get grant
                type from config file \r\nvar grantType = apim.getvariable('grant-type');\r\n//var
                authorizationHeader = \"Basic \" + apim.getvariable('request.headers.authorization');\r\n//apim.setvariable('message.headers.authorization',
                authorizationHeader);    \r\n//create access token JSON request with
                authcode, scope and grant type\r\nvar authServerAccessTokenRequest
                = {};\r\nauthServerAccessTokenRequest.code = authCode;\r\nauthServerAccessTokenRequest.scope
                = scope;\r\nauthServerAccessTokenRequest.grant_type = grantType;\r\n\r\n//write
                access token request in the context for next call\r\napim.setvariable('message.body',
                authServerAccessTokenRequest);\r\napim.setvariable('message.headers.content-type','application/json');\r\n
                \   \r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | Invoke-GATAuthService-Body := \" + JSON.stringify(authServerAccessTokenRequest)
                + \" | Headers : \" + JSON.stringify(apim.getvariable('message.headers'));\r\napim.setvariable('logString',
                logString);\r\n       \r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-AuthServer');\r\n"
              description: Create requests for access token service
          - invoke:
              title: Invoke-AuthServer
              verb: POST
              description: Invoke auth server for access token
              target-url: $(authURL)
              output: accesstoken
          - gatewayscript:
              version: 1.0.0
              title: GS-ValidateAccessToken
              description: Set headers to validate access token
              source: "/* ****************************************************************************************************************
                */\r\n/* ****************************************************************************************************************
                */\r\n/* FileName                  Version    Created By        Modified
                By                      Date                     */\r\n/* ValidateAccessToken.js
                \   1.0        Dinesh Tomar      24-July-2018                                              */\r\n/*
                \                                                                                                                 */\r\n/*
                ****************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will validate the access token
                returned by the auth server in the previous call     */\r\n/*                                                                                                                  */\r\n/*
                Required params:                                                                                                 */\r\n/*
                ****************************************************************************************************************
                */\r\n\r\n//record time in ms just after the invoke policy\r\nvar
                endTimeMS = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy
                = endTimeMS - apim.getvariable('startTimeMS');\r\nvar logString =
                apim.getvariable('logString');\r\nlogString += \" | \" + apim.getvariable('policyName')
                + \" := \" + timeTakenByPreviousPolicy + \" ms\";\r\napim.setvariable('logString',
                logString);\r\n//load headers for access token validation call\r\nvar
                accessToken = 'Bearer ' + apim.getvariable('accesstoken.body').access_token;\r\nvar
                validateToken = apim.getvariable('validatetoken-url');\r\nvar urlopen
                = require('urlopen');\r\nvar options = {\r\n    target: validateToken,\r\n
                \   sslClientProfile: 'api-sslcli-all',\r\n    headers: {\r\n        'authorization':
                accessToken, 'cache-control':'no-cache', 'apigw-proof-requirement':'user_id
                signed_in', 'apigw-chained-access-token-client-id':'auth', 'content-type':
                'application/json'\r\n    }\r\n};\r\nurlopen.open(options, function
                (error, response) {\r\n    if (error) {\r\n        // an error occurred
                during the request sending or response header parsing\r\n        throw
                error;\r\n    } else {\r\n        // get the response status code\r\n
                \       var userId = response.get('apigw-proven-identifier-value');\r\n
                \       var response = {};\r\n        response.user_id = userId;\r\n
                \       response.access_token = accessToken;\r\n        apim.setvariable('message.body',
                response);\r\n    }\r\n});"
        - operations:
          - verb: get
            path: /assets
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAAAConfigRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                     Version    Created By                  Modified
                By               Date           */\r\n/* CreateAAAConfigRequest.js
                \   1.0        Dinesh Tomar                                          02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */
                \                                                                               \r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                clientId = apim.getvariable('client.app.id');\r\napim.setvariable('message.headers.x-ibm-client-id',
                clientId);\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                'https://0.0.0.0:9443/' + orgName + '/' + catalog);\r\n\r\n//form
                url for to fetch properties config JSON\r\nvar aaaConfigURL = apim.getvariable('apicURLPrefix')
                + '/' + 'config/aaaconfig';\r\napim.setvariable('aaaConfigURL', aaaConfigURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AAAConfig');"
          - invoke:
              version: 1.0.0
              title: Invoke-AAAConfig
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              description: Load AAA config file
              target-url: $(aaaConfigURL)
          - xslt:
              title: XSLT-AAA
              input: true
              version: 1.0.0
              source: "<!-- ************************************************************************************************************
                -->\r\n<!-- ************************************************************************************************************
                -->\r\n<!-- FileName                          Version    Created By
                \            Modified By               Date           -->\r\n<!--
                AAA.xsl                           1.0        Dinesh Tomar                                     13-July-2018
                \  -->\r\n<!--                                                                                                              -->\r\n<!--
                ************************************************************************************************************
                -->\r\n<!-- Purpose: This XSLT code will authC and authZ the consumer
                for the requested resource                         -->\r\n<!--                                                                                                              -->\r\n<!--
                Required params: request specific                                                                            -->\r\n<!--
                ************************************************************************************************************
                -->\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"
                xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:apim=\"http://www.ibm.com/apimanagement\"
                xmlns:str=\"http://exslt.org/strings\" extension-element-prefixes=\"dp
                apim str\">\r\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"
                />\r\n    <xsl:output omit-xml-declaration=\"yes\" indent=\"yes\"
                method=\"xml\"/>\r\n    <xsl:strip-space elements=\"*\"/>\r\n    \r\n
                \   <xsl:template match=\"/\">\r\n        <!--record time in ms just
                after the invoke policy-->\r\n        <xsl:variable name=\"endTimeMS\"
                select=\"dp:time-value()\"/>\r\n        <xsl:variable name=\"timeTakenByPreviousPolicy\"
                \ select=\"($endTimeMS - apim:getVariable('startTimeMS'))\"/>\r\n
                \       <xsl:variable name=\"logString\" select=\"concat(apim:getVariable('logString'),'
                | ',apim:getVariable('policyName'),' := ',$timeTakenByPreviousPolicy,'
                ms' )\"/>\r\n        <xsl:call-template name=\"apim:setVariable\">\r\n
                \           <xsl:with-param name=\"varName\" select=\"'logString'\"
                />\r\n            <xsl:with-param name=\"value\" select=\"$logString\"
                />\r\n        </xsl:call-template>\r\n        \r\n        <xsl:variable
                name=\"aaaConfiguration\" select=\".\"/>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'ipAddressMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'uidMatched'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authCPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:call-template
                name=\"apim:setVariable\">\r\n            <xsl:with-param name=\"varName\"
                select=\"'authZPassed'\" />\r\n            <xsl:with-param name=\"value\"
                select=\"'false'\" />\r\n        </xsl:call-template>\r\n        <xsl:variable
                name=\"clientIPAddress\" select=\"apim:getContext('request.headers.x-client-ip')\"/>\r\n
                \       <xsl:variable name=\"clientIPAddressTokens\" select=\"str:tokenize($clientIPAddress,
                ',')\"/>\r\n        <xsl:variable name=\"userID\" select=\"apim:getContext('request.headers.user_id')\"/>\r\n
                \       <xsl:variable name=\"userConfig\" select=\"$aaaConfiguration/AAAInfo/Authenticate[UserID
                = $userID]\"/>\r\n        <xsl:choose>\r\n            <xsl:when test=\"string-length($userConfig)
                = 0\">\r\n                <xsl:call-template name=\"apim:setVariable\">\r\n
                \                   <xsl:with-param name=\"varName\" select=\"'errorName'\"
                />\r\n                    <xsl:with-param name=\"value\" select=\"'InvalidUserId'\"
                />\r\n                </xsl:call-template>\r\n                <xsl:call-template
                name=\"apim:error\">\r\n                    <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                    <xsl:with-param name=\"httpReasonPhrase\"
                select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('UserID &quot;', $userName,
                '&quot; is not provisioned.')\" />\r\n                </xsl:call-template>\r\n
                \           </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:for-each
                select=\"$userConfig\">\r\n                    <xsl:if test=\"apim:getVariable('authCPassed')
                = 'false'\">\r\n                        <xsl:variable name=\"ipRangeFromConfig\"
                select=\"./IPNetwork/text()\"/>\r\n                        <xsl:variable
                name=\"passwordFromConfig\" select=\"./Password/text()\"/>\r\n                        <xsl:if
                test=\"apim:getVariable('ipAddressMatched') = 'false'\">\r\n                            <xsl:for-each
                select=\"$clientIPAddressTokens\">\r\n                                <xsl:variable
                name=\"ipAddressToken\">\r\n                                    <xsl:value-of
                select=\".\"/>\r\n                                </xsl:variable>
                \ \r\n                                <xsl:if test=\"dp:ip-addr-match($ipRangeFromConfig,
                $ipAddressToken)\">\r\n                                    <xsl:call-template
                name=\"apim:setVariable\">\r\n                                        <xsl:with-param
                name=\"varName\" select=\"'ipAddressMatched'\"/>\r\n                                        <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                    </xsl:call-template>\r\n
                \                               </xsl:if>\r\n                            </xsl:for-each>\r\n
                \                       </xsl:if>\r\n                        <xsl:choose>\r\n
                \                           <xsl:when test=\"apim:getVariable('ipAddressMatched')
                = 'true'\">\r\n                                <xsl:call-template
                name=\"apim:setVariable\">\r\n                                    <xsl:with-param
                name=\"varName\" select=\"'authCPassed'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"'true'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'outputCreds'\"/>\r\n                                    <xsl:with-param
                name=\"value\" select=\"./OutputCredential/text()\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:when>\r\n                            <xsl:otherwise>\r\n
                \                               <xsl:call-template name=\"apim:setVariable\">\r\n
                \                                   <xsl:with-param name=\"varName\"
                select=\"'errorName'\" />\r\n                                    <xsl:with-param
                name=\"value\" select=\"'InvalidIPAddress'\" />\r\n                                </xsl:call-template>\r\n
                \                               <xsl:call-template name=\"apim:error\">\r\n
                \                                   <xsl:with-param name=\"httpCode\"
                select=\"'400'\" />\r\n                                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('IP address &quot;', $clientIPAddress,
                '&quot; is not provisioned.')\" />\r\n                                </xsl:call-template>\r\n
                \                           </xsl:otherwise>\r\n                        </xsl:choose>\r\n
                \                   </xsl:if>                        \r\n                </xsl:for-each>\r\n
                \           </xsl:otherwise>\r\n        </xsl:choose>\r\n        <xsl:if
                test=\"apim:getVariable('authCPassed') = 'true'\">\r\n            <xsl:variable
                name=\"allowedPaths\">\r\n                <allowedPaths>\r\n                    <xsl:for-each
                select=\"$aaaConfiguration/AAAInfo/Authorize[InputCredential = apim:getVariable('outputCreds')]\">\r\n
                \                       <xsl:if test=\"$aaaConfiguration/AAAInfo/Authorize[Access
                = 'allow']\">\r\n                            <xsl:copy-of select=\"str:tokenize(./InputResource/text(),
                '|')\"/>\r\n                        </xsl:if>\r\n                    </xsl:for-each>\r\n
                \               </allowedPaths>\r\n            </xsl:variable>\r\n
                \           <xsl:variable name=\"requestedPath\" select=\"apim:getContext('api.operation.path')\"/>\r\n
                \           <xsl:for-each select=\"$allowedPaths/allowedPaths/token\">\r\n
                \               <xsl:if test=\"apim:getVariable('authZPassed') = 'false'\">\r\n
                \                   <xsl:if test=\"$requestedPath = ./text()\">\r\n
                \                       <xsl:call-template name=\"apim:setVariable\">\r\n
                \                           <xsl:with-param name=\"varName\" select=\"'authZPassed'\"
                />\r\n                            <xsl:with-param name=\"value\" select=\"'true'\"
                />\r\n                        </xsl:call-template>\r\n                    </xsl:if>\r\n
                \               </xsl:if>\r\n            </xsl:for-each>\r\n            <xsl:if
                test=\"apim:getVariable('authZPassed') = 'false'\">\r\n                <xsl:call-template
                name=\"apim:setVariable\">\r\n                    <xsl:with-param
                name=\"varName\" select=\"'errorName'\" />\r\n                    <xsl:with-param
                name=\"value\" select=\"'AuthorizationError'\" />\r\n                </xsl:call-template>\r\n
                \               <xsl:call-template name=\"apim:error\">\r\n                    <xsl:with-param
                name=\"httpCode\" select=\"'401'\" />\r\n                    <xsl:with-param
                name=\"httpReasonPhrase\" select=\"'Invalid request'\" />\r\n                    <xsl:with-param
                name=\"errorMessage\" select=\"concat('Authorization failed.')\" />\r\n
                \               </xsl:call-template>\r\n            </xsl:if>\r\n
                \       </xsl:if>\r\n    </xsl:template>\r\n</xsl:stylesheet>"
              description: Authenticates and authorize the consumer
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAssetRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                     Version    Created By                  Modified
                By               Date           */\r\n/* CreateAssetRequest.js         1.0
                \       Dinesh Tomar                                         02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will fetch the asset url from
                config file.                                      */\r\n/*                                                                                                              */
                \                                                                               \r\n/*
                ************************************************************************************************************
                */\r\nvar userId = apim.getvariable('request.headers.user_id');\r\nvar
                assetsURL = apim.getvariable('assets-url');\r\nvar authURL = assetsURL.replace('CURRENT',
                userId);\r\napim.setvariable('authURL', authURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AssetsService');\r\n"
              description: Set URL for asset service
          - invoke:
              version: 1.0.0
              title: Invoke-AssetsService
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(authURL)
              description: Invoke asset service
          - gatewayscript:
              version: 1.0.0
              title: GS-ExtractTime
              source: |-
                /* *************************************************************************************************************** */
                /* *************************************************************************************************************** */
                /* FileName                        Version    Created By                  Modified By               Date           */
                /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
                /*                                                                                                                 */
                /* *************************************************************************************************************** */
                /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
                /*                                                                                                                 */
                /* Required params:                                                                                                */
                /* *************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);
              description: This GW Script file will extract tiem taken by invoke policy
                to execute and pass it to the log string
        - operations:
          - verb: get
            path: /disambiguationid
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAssetsRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                     Version    Created By                  Modified
                By               Date           */\r\n/* CreateAssetsRequest.js       1.0
                \       Dinesh Tomar                                          02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */
                \                                                                               \r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\nvar
                clientId = apim.getvariable('client.app.id');\r\nvar clientSecret
                = apim.getvariable('client.app.secret');\r\napim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\napim.setvariable('message.headers.user_id', apim.getvariable('request.headers.user_id'));\r\n//form
                request URL to hit asset service\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                'https://0.0.0.0:9443/' + orgName + '/' + catalog);\r\n\r\n//form
                url for to fetch properties config JSON\r\nvar assetURL = apim.getvariable('apicURLPrefix')
                + apim.getvariable('assetsURI');\r\napim.setvariable('assetURL', assetURL);\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-AssetAPI');"
              description: Create request to hit asset API
          - invoke:
              version: 1.0.0
              title: Invoke-AssetAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(assetURL)
              output: assets
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateDisambiguationId
              source: |-
                /* **************************************************************************************************************** */
                /* **************************************************************************************************************** */
                /* FileName                         Version    Created By                  Modified By               Date           */
                /* CreateDisambiguationIdRequest.js 1.0        Dinesh Tomar                                          02-May-2018    */
                /*                                                                                                                  */
                /* **************************************************************************************************************** */
                /* Purpose: This GW Script file will process AssetType call response and prepare the request for disambiguationId   */
                /*                                                                                                                  */
                /* Required params: msisdn                                                                                          */
                /* **************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);

                //load properties configuration from context variable
                var messages = apim.getvariable('messages-property.body');
                //create phone number from msisdn received in request header
                var msisdn = apim.getvariable('message.headers.msisdn');
                var phoneNumber = msisdn;
                //load assets response in a variable
                var assets = apim.getvariable('assets.body');
                //get all assets
                var assetTypes = ['PAYG'];
                var filteredAssets = getAssets(assets, assetTypes);
                //evaluate assetType response to check if asset is PAYG or not
                var isPayg = false;
                for (var i = 0; i < filteredAssets.length; i++){
                    if (filteredAssets[i].asset_value.includes(msisdn)){
                        isPayg = true;
                    }
                }
                var productIdentifier = "product_id/PAYM";
                if (isPayg) {
                    productIdentifier = "product_id/PAYG";
                }
                apim.setvariable('isPayg', isPayg);
                //create disambiguationIdRequest with productIdentifier
                var disambiguationIdRequest = {
                };
                disambiguationIdRequest.selected_identifier_type = productIdentifier;
                disambiguationIdRequest.selected_identifier_value = phoneNumber;
                //read disambiguationId URL from config and set it in a variable for next call
                var generateDisambiguationIdURL = apim.getvariable('disambiguationId-url');
                apim.setvariable('generateDisambiguationIdURL', generateDisambiguationIdURL);
                //write disambiguationId request in the context for next call
                apim.setvariable('message.headers.content-type', 'application/json');
                apim.setvariable('message.body', disambiguationIdRequest);
                //record time in ms just before the invoke policy
                apim.setvariable('startTimeMS', (new Date()).getTime());
                apim.setvariable('policyName', 'Invoke-DisambiguationIdService');

                function getAssets(assets, assetTypes){
                    var filteredAssets = [];
                    for (var i = 0; i < assets.length; i++){
                        for (var j = 0; j < assetTypes.length; j++){
                            if (assets[i] != null && assets[i].asset_type != null && assets[i].asset_type == assetTypes[j]){
                                filteredAssets.push(assets[i]);
                            }
                        }
                    }
                    return filteredAssets;
                }
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdService
              timeout: 60
              verb: POST
              cache-response: protocol
              cache-ttl: 900
              target-url: $(generateDisambiguationIdURL)
          - gatewayscript:
              version: 1.0.0
              title: GS-ExtractTime
              source: |-
                /* *************************************************************************************************************** */
                /* *************************************************************************************************************** */
                /* FileName                        Version    Created By                  Modified By               Date           */
                /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
                /*                                                                                                                 */
                /* *************************************************************************************************************** */
                /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
                /*                                                                                                                 */
                /* Required params:                                                                                                */
                /* *************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);
              description: This GW Script file will extract tiem taken by invoke policy
                to execute and pass it to the log string
        - operations:
          - verb: get
            path: /transferauthcode
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAccessTokenRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                        Version    Created By                  Modified
                By            Date           */\r\n/* CreateAccessTokenRequest.js
                \     1.0       Dinesh Tomar                                       02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read
                all http headers from the input request\r\nvar authCode = apim.getvariable('message.headers.x-authcode');\r\nvar
                clientId = apim.getvariable('client.app.id');\r\nvar clientSecret
                = apim.getvariable('client.app.secret');\r\nvar apicId = apim.getvariable('apic_id');\r\nvar
                apicsecret = apim.getvariable('apic_secret');\r\nvar buffer = new
                Buffer(apicId + \":\" + apicsecret);\r\nvar authorization = \"Basic
                \" + buffer.toString('base64');\r\n//var authorization = \"Basic \"
                + (Buffer.from(apicId + ':' + apicsecret).toString('base64'));\r\nvar
                requestURL = apim.getvariable('request.uri');\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                hostName = requestURL.substr(0, requestURL.indexOf(orgName));\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                hostName + orgName + '/' + catalog);\r\napim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\napim.setvariable('message.headers.x-authcode', authCode);\r\napim.setvariable('message.headers.authorization',
                authorization);\r\napim.setvariable('message.headers.content-type',
                'application/json');\r\n\r\nvar accessTokenURL = apim.getvariable('apicURLPrefix')
                + '/' + 'auth/accesstoken';\r\napim.setvariable('accessTokenURL',
                accessTokenURL);\r\n\r\n\r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-AccessTokenAPI');\r\n"
              description: Create request for access token.
          - invoke:
              version: 1.0.0
              title: Invoke-AccessTokenAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(accessTokenURL)
              output: accesstoken
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforDisambiguitionId
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                               Version    Created
                By             Modified By          Date           */\r\n/* CreateRequestforDisambiguitionId.js
                \   1.0        Dinesh Tomar                                02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read
                all http headers from the input request\r\nvar authProperties = apim.getvariable('authconfig.body');\r\nvar
                msisdn = apim.getvariable('message.headers.msisdn');\r\nvar clientId
                = apim.getvariable('client.app.id');\r\nvar clientSecret = apim.getvariable('client.app.secret');\r\nvar
                accessToken = apim.getvariable('accesstoken.body').access_token;\r\nvar
                userId = apim.getvariable('accesstoken.body').user_id;\r\n//var authorization
                = \"Bearer \" + accessToken;\r\napim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\napim.setvariable('message.headers.msisdn', msisdn);\r\napim.setvariable('message.headers.authorization',
                accessToken);\r\napim.setvariable('message.headers.user_id', userId);\r\n\r\nvar
                disambiguationIdURL = apim.getvariable('apicURLPrefix') + '/' + 'auth/disambiguationid';\r\napim.setvariable('disambiguationIdURL',
                disambiguationIdURL);\r\n\r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-DisambiguationIdAPI');\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(disambiguationIdURL)
              output: disambiguationId
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateTransferAuthCodeRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                            Version    Created By
                \            Modified By          Date              */\r\n/* CreateTransferAuthCodeRequest.js
                \   1.0        Dinesh Tomar                                02-May-2018
                \      */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read
                all http headers from the input request\r\nvar accessToken = apim.getvariable('accesstoken.body').access_token;\r\nvar
                auth = accessToken.substring(7, accessToken.length);\r\nvar disambiguationId
                = apim.getvariable('disambiguationId.body').disambiguation_id;\r\napim.setvariable('message.headers.apigw-chained-access-token',
                auth);\r\n\r\n//extract auth server URL to generate transfer auth
                code and set it in a variable\r\nvar transferAuthCodeURL = apim.getvariable('transferauth-url');\r\napim.setvariable('transferAuthCodeURL',
                transferAuthCodeURL);\r\n\r\n//get headers values from request\r\nvar
                deviceType = apim.getvariable('request.headers.x-device');\r\nvar
                clientId = apim.getvariable('client.app.id');\r\nvar replacedParam
                = 'disambiguation_id=';\r\n\r\n//load sendTo and failureURL from config
                and set deviceType, clientId and disambiguationId in the URL\r\nvar
                sendToURL = apim.getvariable('sendto-url');\r\nvar failureURL = apim.getvariable('failure-url');\r\nsendToURL
                = sendToURL.replace('#deviceType#', deviceType).replace('#clientId#',
                clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\r\nfailureURL
                = failureURL.replace('#deviceType#', deviceType).replace('#clientId#',
                clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\r\napim.setvariable('sendToURL',
                sendToURL);\r\napim.setvariable('failureURL', failureURL);\r\nvar
                credhandlerRedemptionURL = apim.getvariable('credshandler-url');;\r\napim.setvariable('credhandlerRedemptionURL',
                credhandlerRedemptionURL);\r\n//create transfer auth code request
                and write it in context variable\r\nvar transferAuthCodeRequest =
                {\r\n};\r\ntransferAuthCodeRequest.send_to = sendToURL;\r\napim.setvariable('message.body',
                transferAuthCodeRequest);\r\nconsole.log(JSON.stringify(transferAuthCodeRequest));\r\n\r\n//record
                time in ms just before the invoke policy\r\napim.setvariable('startTimeMS',
                (new Date()).getTime());\r\napim.setvariable('policyName', 'Invoke-TransferAuthCode');\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-TransferAuthCode
              timeout: 60
              verb: POST
              cache-response: protocol
              cache-ttl: 900
              target-url: $(transferAuthCodeURL)
              output: transferAuthCode
          - gatewayscript:
              version: 1.0.0
              title: GS-ConsolidateAuthResponses
              source: "/* ********************************************************************************************************************
                */\r\n/* ********************************************************************************************************************
                */\r\n/* FileName                             Version    Created By
                \                 Modified By               Date           */\r\n/*
                ConsolidateAuthResponses.js          1.0        Dinesh Tomar                                          02-May-2018
                \   */\r\n/*                                                                                                                      */\r\n/*
                ********************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will consolidate all auth responses
                (authCode, accessToken, disambiguationId and        */\r\n/*          transferAuthCode)
                together in a single response                                                             */\r\n/*
                Required params: x-authcode, x-device, clientId                                                                      */\r\n/*
                ********************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \":=\" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//fetch
                transferAuthCode, sendToURL and failureURL and generate sso link\r\nvar
                transferAuthCodeResponse = apim.getvariable('transferAuthCode.body');\r\nvar
                transferAuthCode = transferAuthCodeResponse.transfer_auth_code;\r\nvar
                sendToURL = apim.getvariable('sendToURL');\r\nvar failureURL = apim.getvariable('failureURL');\r\nvar
                credhandlerRedemptionURL = apim.getvariable('credhandlerRedemptionURL');\r\nvar
                ssoLink = credhandlerRedemptionURL.replace('#AUTH_CODE#', transferAuthCode).replace('#SEND_TO#',
                sendToURL).replace('#FAILURE_URL#', failureURL);\r\n\r\n//load all
                responses configuration from context variables and generate consolidatedAUthResponse\r\nvar
                consolidatedAuthResponse = {\r\n};\r\nconsolidatedAuthResponse.msisdn
                = apim.getvariable('message.headers.msisdn');\r\n//consolidatedAuthResponse.isPayg
                = apim.getvariable('isPayg');\r\nconsolidatedAuthResponse.authCode
                = apim.getvariable('message.headers.x-authcode');\r\nconsolidatedAuthResponse.access_token
                = apim.getvariable('accesstoken.body').access_token;\r\nconsolidatedAuthResponse.disambiguation_id
                = apim.getvariable('disambiguationId.body').disambiguation_id;\r\nconsolidatedAuthResponse.transfer_auth_code
                = transferAuthCode;\r\nconsolidatedAuthResponse.ssoLink = ssoLink;\r\n//write
                consolidated auth response as the final operation response\r\napim.setvariable('message.body',
                consolidatedAuthResponse);\r\n"
              description: This GW Script file will consolidate all auth responses
                (authCode, accessToken, disambiguationId and transferAuthCode) together
                in a single response
        - operations:
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/billedcharges
          - verb: get
            path: /phone/consumer/CURRENT/paym/billedcharges/recommendation
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/recentcharges
          - verb: get
            path: /phone/consumer/CURRENT/paym/bill/previousbills
          - verb: get
            path: /phone/consumer/CURRENT/paym
          - verb: get
            path: /phone/consumer/CURRENT/paym/cca/phoneplan
          - verb: get
            path: /phone/consumer/CURRENT/paym/upgradeoptionsandpromotions
          - verb: get
            path: /phone/v2/consumer/CURRENT/paym/bill/profile
          execute:
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateAccessTokenRequest
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                        Version    Created By                  Modified
                By            Date           */\r\n/* CreateAccessTokenRequest.js
                \     1.0       Dinesh Tomar                                       02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read
                all http headers from the input request\r\nvar authCode = apim.getvariable('message.headers.x-authcode');\r\nvar
                clientId = apim.getvariable('client.app.id');\r\nvar clientSecret
                = apim.getvariable('client.app.secret');\r\nvar apicId = apim.getvariable('apic_id');\r\nvar
                apicsecret = apim.getvariable('apic_secret');\r\nvar buffer = new
                Buffer(apicId + \":\" + apicsecret);\r\nvar authorization = \"Basic
                \" + buffer.toString('base64');\r\n//var authorization = \"Basic \"
                + (Buffer.from(apicId + ':' + apicsecret).toString('base64'));\r\nvar
                requestURL = apim.getvariable('request.uri');\r\nvar orgName = apim.getvariable('api.org.name');\r\nvar
                hostName = requestURL.substr(0, requestURL.indexOf(orgName));\r\nvar
                catalog = apim.getvariable('env.path');\r\napim.setvariable('apicURLPrefix',
                hostName + orgName + '/' + catalog);\r\napim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\napim.setvariable('message.headers.x-authcode', authCode);\r\napim.setvariable('message.headers.authorization',
                authorization);\r\napim.setvariable('message.headers.content-type',
                'application/json');\r\n\r\nvar accessTokenURL = apim.getvariable('apicURLPrefix')
                + '/' + 'auth/accesstoken';\r\napim.setvariable('accessTokenURL',
                accessTokenURL);\r\n\r\n\r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-AccessTokenAPI');\r\n"
              description: Create request for access token.
          - invoke:
              version: 1.0.0
              title: Invoke-AccessTokenAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(accessTokenURL)
              output: accesstoken
          - gatewayscript:
              version: 1.0.0
              title: GS-CreateRequestforDisambiguitionId
              source: "/* ************************************************************************************************************
                */\r\n/* ************************************************************************************************************
                */\r\n/* FileName                               Version    Created
                By             Modified By          Date           */\r\n/* CreateRequestforDisambiguitionId.js
                \   1.0        Dinesh Tomar                                02-May-2018
                \   */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n/* Purpose: This GW Script file will form the request to fetch
                the AAA config file.                             */\r\n/*                                                                                                              */\r\n/*
                ************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//read
                all http headers from the input request\r\nvar authProperties = apim.getvariable('authconfig.body');\r\nvar
                msisdn = apim.getvariable('message.headers.msisdn');\r\nvar clientId
                = apim.getvariable('client.app.id');\r\nvar clientSecret = apim.getvariable('client.app.secret');\r\nvar
                accessToken = apim.getvariable('accesstoken.body').access_token;\r\nvar
                userId = apim.getvariable('accesstoken.body').user_id;\r\n//var authorization
                = \"Bearer \" + accessToken;\r\napim.setvariable('message.headers.X-IBM-Client-Id',
                clientId);\r\napim.setvariable('message.headers.X-IBM-Client-Secret',
                clientSecret);\r\napim.setvariable('message.headers.msisdn', msisdn);\r\napim.setvariable('message.headers.authorization',
                accessToken);\r\napim.setvariable('message.headers.user_id', userId);\r\n\r\nvar
                disambiguationIdURL = apim.getvariable('apicURLPrefix') + '/' + 'auth/disambiguationid';\r\napim.setvariable('disambiguationIdURL',
                disambiguationIdURL);\r\n\r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-DisambiguationIdAPI');\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-DisambiguationIdAPI
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(disambiguationIdURL)
              output: disambiguationId
          - gatewayscript:
              version: 1.0.0
              title: GS-CreatePhoneserviceRequest
              source: "/* ********************************************************************************************************************
                */\r\n/* ********************************************************************************************************************
                */\r\n/* FileName                             Version    Created By
                \                 Modified By               Date           */\r\n/*
                CreatePhoneserviceRequest.js          1.0        Dinesh Tomar                                         02-May-2018
                \   */\r\n/*                                                                                                                      */\r\n/*
                ********************************************************************************************************************
                */\r\n/* Purpose:                                                                                                             */\r\n/*
                Required params:                                                                                                     */\r\n/*
                ********************************************************************************************************************
                */\r\n//record time in ms just after the invoke policy\r\nvar endTimeMS
                = (new Date()).getTime();\r\nvar timeTakenByPreviousPolicy = endTimeMS
                - apim.getvariable('startTimeMS');\r\nvar logString = apim.getvariable('logString');\r\nlogString
                += \" | \" + apim.getvariable('policyName') + \" := \" + timeTakenByPreviousPolicy
                + \" ms\";\r\napim.setvariable('logString', logString);\r\n\r\n//record
                time in ms just after the invoke policy\r\nvar accessToken = apim.getvariable('accesstoken.body').access_token;\r\nvar
                userId = apim.getvariable('accesstoken.body').user_id;\r\nvar disambiguationId
                = apim.getvariable('disambiguationId.body').disambiguation_id;\r\napim.setvariable('message.headers.disambiguation-id',
                disambiguationId);\r\napim.setvariable('message.headers.authorization',
                accessToken);\r\nvar path = apim.getvariable('request.path');\r\nvar
                phoneDetailsURL;\r\nif (path == '/auth/phone/consumer/CURRENT/paym/bill/billedcharges')
                {\r\n    phoneDetailsURL = apim.getvariable('billedcharges');\r\n
                \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n
                \   apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n} else
                if (path == '/auth/phone/consumer/CURRENT/paym/billedcharges/recommendation')
                {\r\n    phoneDetailsURL = apim.getvariable('recommendation');\r\n
                \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n
                \   apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n} else
                if (path == '/auth/phone/consumer/CURRENT/paym/bill/recentcharges')
                {\r\n    phoneDetailsURL = apim.getvariable('recentcharges');\r\n
                \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n
                \   apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n} else
                if (path == '/auth/phone/consumer/CURRENT/paym/bill/previousbills')
                {\r\n    phoneDetailsURL = apim.getvariable('previousbills');\r\n
                \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n
                \   apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n} else
                if (path == '/auth/phone/consumer/CURRENT/paym') {\r\n    phoneDetailsURL
                = apim.getvariable('msisdndetails');\r\n    phoneDetailsURL = phoneDetailsURL.replace('CURRENT',
                userId);\r\n    apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n}
                else if (path == '/auth/phone/consumer/CURRENT/paym/cca/phoneplan')
                {\r\n    phoneDetailsURL = apim.getvariable('phoneplan');\r\n    phoneDetailsURL
                = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
                phoneDetailsURL);\r\n} else if (path == '/auth/phone/consumer/CURRENT/paym/upgradeoptionsandpromotions')
                {\r\n    phoneDetailsURL = apim.getvariable('upgradeoptionsandpromotions');\r\n
                \   phoneDetailsURL = phoneDetailsURL.replace('CURRENT', userId);\r\n
                \   apim.setvariable('phoneDetailsURL', phoneDetailsURL);\r\n} else
                if (path == '/auth/phone/v2/consumer/CURRENT/paym/bill/profile') {\r\n
                \   phoneDetailsURL = apim.getvariable('billprofile');\r\n    phoneDetailsURL
                = phoneDetailsURL.replace('CURRENT', userId);\r\n    apim.setvariable('phoneDetailsURL',
                phoneDetailsURL);\r\n}\r\n//record time in ms just before the invoke
                policy\r\napim.setvariable('startTimeMS', (new Date()).getTime());\r\napim.setvariable('policyName',
                'Invoke-PhoneDetails');\r\n"
          - invoke:
              version: 1.0.0
              title: Invoke-PhoneDetails
              timeout: 60
              verb: GET
              cache-response: protocol
              cache-ttl: 900
              target-url: $(phoneDetailsURL)
          - gatewayscript:
              version: 1.0.0
              title: GS-ExtractTime
              source: |-
                /* *************************************************************************************************************** */
                /* *************************************************************************************************************** */
                /* FileName                        Version    Created By                  Modified By               Date           */
                /* ExtractTime.js                  1.0        Dinesh Tomar                                          08-May-2018    */
                /*                                                                                                                 */
                /* *************************************************************************************************************** */
                /* Purpose: This GW Script file will extract tiem taken by invoke policy to execute and pass it to the log string  */
                /*                                                                                                                 */
                /* Required params:                                                                                                */
                /* *************************************************************************************************************** */
                //record time in ms just after the invoke policy
                var endTimeMS = (new Date()).getTime();
                var timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');
                var logString = apim.getvariable('logString');
                logString += " | " + apim.getvariable('policyName') + " := " + timeTakenByPreviousPolicy + " ms";
                apim.setvariable('logString', logString);
              description: This GW Script file will extract tiem taken by invoke policy
                to execute and pass it to the log string
        otherwise: []
        version: 1.0.0
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed;
                          ;
          console.log(logString);
        description: This GW Script will extract final metadata for logging
    catch: []
  gateway: datapower-gateway
  type: rest
tags: []
definitions: {}
paths:
  /tokeninfo:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: authorization
      type: string
      in: header
  /phone/consumer/CURRENT/paym/bill/billedcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/billedcharges/recommendation:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/recentcharges:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/bill/previousbills:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/cca/phoneplan:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /phone/consumer/CURRENT/paym/upgradeoptionsandpromotions:
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
  /phone/v2/consumer/CURRENT/paym/bill/profile:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
      consumes: []
      produces: []
      parameters: []
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: x-authcode
      type: string
      in: header
      required: true
  /disambiguationid:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: msisdn
      type: string
      in: header
      required: true
    - name: authorization
      type: string
      in: header
      required: true
    - name: user_id
      type: string
      in: header
      required: true
  /assets:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: authorization
      type: string
      in: header
      required: true
    - name: user_id
      type: string
      in: header
      required: true
  /authcode:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: user_id
      type: string
      required: true
      in: query
    - name: device_id
      type: string
      required: true
      in: query
    - name: authorization
      type: string
      required: true
      in: header
  /accesstoken:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: x-authcode
      type: string
      required: true
      in: header
    - name: authorization
      type: string
      required: true
      in: header
  /transferauthcode:
    get:
      responses:
        "200":
          description: 200 OK
          schema:
            type: string
    parameters:
    - name: x-authcode
      type: string
      required: true
      in: header
    - name: msisdn
      type: string
      required: true
      in: header
    - name: x-device
      type: string
      required: true
      in: header
