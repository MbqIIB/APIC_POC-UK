---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-authservice"
  title: "o2apic-authservice"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/apic"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - operation-switch:
        title: "AuthServiceOperationSwitch"
        case:
        - operations:
          - verb: "get"
            path: "/authservice/getaccesstoken"
          execute:
          - gatewayscript:
              title: "GS:ValidateParameters"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* ValidateParameters.js                   1.0        Dinesh Tomar\
                \                                          25-Apr-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will validate request parameters\
                \                                                           */\n/*\
                \                                                                \
                \                                                         */\n/* Required\
                \ params:                                                        \
                \                                                */\n/* ***********************************************************************************************************************\
                \ */\n\n//get all input parameters\nvar clientId = apim.getvariable('client.app.id');\n\
                var authCode = apim.getvariable('request.headers.x-authcode');\n//check\
                \ all headers validation\nif (authCode == null){\n    apim.setvariable('errorName',\
                \ 'InvalidAuthCode');\n    apim.error('InvalidAuthCode', 500, 'Internal\
                \ Error', 'Missing or invalid authcode');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',\
                \ clientId);\n    apim.setvariable('message.headers.content-type',\
                \ 'application/json');\n    apim.setvariable('message.headers.x-authcode',\
                \ authCode);\n    //form url for to fetch errorConfig JSON\n    var\
                \ hostName = apim.getvariable('api.endpoint.hostname');\n    var orgName\
                \ = apim.getvariable('api.org.name');\n    var catalog = apim.getvariable('env.path');\n\
                \    var configPropertiesURL = 'https://'+hostName+'/'+orgName+'/'+catalog+'/'+'config/properties';\n\
                \    apim.setvariable('configPropertiesURL', configPropertiesURL);\n\
                }"
          - invoke:
              target-url: "$(configPropertiesURL)"
              description: "Load all messages  and properties in context"
              title: "Invoke:PropertiesHandler"
              cache-response: "no-cache"
              cache-key: ""
              stop-on-error:
              - "ConnectionError"
              - "OperationError"
              - "SOAPError"
              cache-ttl: 60
              output: "messages-property"
          - gatewayscript:
              title: "GS:CreateAccessTokenRequest"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* CreateAccessTokenRequest.js             1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will fetch AuthServer URL for\
                \ AccessToken, prepare AuthZ header and AccessToken request to */\n\
                /*          be posted in next  call                              \
                \                                                          */\n/*\
                \ Required params: x-authcode                                    \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\nif (messages\
                \ == null || isJSONEmpty(messages)){\n    apim.setvariable('errorName',\
                \ 'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal\
                \ Error', 'Connection error');\n}\nelse {\n    //extract auth server\
                \ URL to generate access token and set it in a variable\n    var authServerAccessTokenURL\
                \ = messages.authserver.generateAccessToken.uri;\n    apim.setvariable('authServerAccessTokenURL',\
                \ authServerAccessTokenURL);\n\n    //read client id and client secret\
                \ from config and create AuthZ header for access token call\n    var\
                \ authServerClientId = messages.authserver.client_id;\n    var authServerClientSecret\
                \ = messages.authserver.client_secret;\n    var buffer = new Buffer(authServerClientId+\"\
                :\"+authServerClientSecret);\n    var authorizationHeader = \"Basic\
                \ \" + buffer.toString('base64');\n    apim.setvariable('message.headers.authorization',\
                \ authorizationHeader);\n\n    //read all http headers from the input\
                \ request\n    var authCode = apim.getvariable('message.headers.x-authcode');\n\
                \    \n    //get scope and grant type from config xml \n    var scope\
                \ = messages.authserver.scope;\n    var grantType = messages.authserver.oauth.grant_type;\n\
                \n    //create access token JSON request with authcode, scope and\
                \ grant type\n    var authServerAccessTokenRequest = {};\n    authServerAccessTokenRequest.code\
                \ = authCode;\n    authServerAccessTokenRequest.scope = scope;\n \
                \   authServerAccessTokenRequest.grant_type = grantType;\n\n    //write\
                \ access token request in the context for next call\n    apim.setvariable('message.body',\
                \ authServerAccessTokenRequest);\n}\n\nfunction isJSONEmpty(jsonObject)\
                \ {\n    var member;\n    var result = true;\n    for (member in jsonObject)\
                \ {\n        if (jsonObject[member] != null) {\n            result\
                \ = false;\n        }\n    }\n    return result;\n}"
              description: "GW Script to create access token request for auth service"
          - invoke:
              target-url: "$(authServerAccessTokenURL)"
              title: "InvokeGATAuthService"
              verb: "POST"
        - operations:
          - verb: "get"
            path: "/authservice/getconsolidatedauth"
          execute:
          - gatewayscript:
              title: "GS:ValidateParameters"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* ValidateParameters.js                   1.0        Dinesh Tomar\
                \                                          25-Apr-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will validate request parameters\
                \                                                           */\n/*\
                \                                                                \
                \                                                         */\n/* Required\
                \ params:                                                        \
                \                                                */\n/* ***********************************************************************************************************************\
                \ */\n\n//get all input parameters\nvar clientId = apim.getvariable('client.app.id');\n\
                var msisdn = apim.getvariable('request.headers.msisdn');\nvar authCode\
                \ = apim.getvariable('request.headers.x-authcode');\nvar deviceType\
                \ = apim.getvariable('request.headers.x-device');\n//check all headers\
                \ validation\nif (msisdn == null || isNaN(parseInt(msisdn))){\n  \
                \  apim.setvariable('errorName', 'InvalidMsisdn');\n    apim.error('InvalidMsisdn',\
                \ 500, 'Internal Error', 'Missing or invalid msisdn');\n}\nelse if\
                \ (authCode == null){\n    apim.setvariable('errorName', 'InvalidAuthCode');\n\
                \    apim.error('InvalidAuthCode', 500, 'Internal Error', 'Missing\
                \ or invalid authcode');\n}\nelse if (deviceType == null){\n    apim.setvariable('errorName',\
                \ 'InvalidDeviceType');\n    apim.error('InvalidDeviceType', 500,\
                \ 'Internal Error', 'Missing or invalid device type');\n}\nelse {\n\
                \    apim.setvariable('message.headers.x-ibm-client-id', clientId);\n\
                \    apim.setvariable('message.headers.content-type', 'application/json');\n\
                \    apim.setvariable('message.headers.msisdn', msisdn);\n    apim.setvariable('message.headers.x-authcode',\
                \ authCode);\n    apim.setvariable('message.headers.x-device', deviceType);\n\
                \    //form url for to fetch errorConfig JSON\n    var hostName =\
                \ apim.getvariable('api.endpoint.hostname');\n    var orgName = apim.getvariable('api.org.name');\n\
                \    var catalog = apim.getvariable('env.path');\n    var configPropertiesURL\
                \ = 'https://'+hostName+'/'+orgName+'/'+catalog+'/'+'config/properties';\n\
                \    apim.setvariable('configPropertiesURL', configPropertiesURL);\n\
                }"
          - invoke:
              target-url: "$(configPropertiesURL)"
              description: "Load all messages  and properties in context"
              title: "Invoke:PropertiesHandler"
              cache-response: "no-cache"
              cache-key: ""
              stop-on-error:
              - "ConnectionError"
              - "OperationError"
              - "SOAPError"
              cache-ttl: 60
              output: "messages-property"
          - gatewayscript:
              title: "PrepareAssetTypeCall"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* PrepareAssetTypeCall.js                 1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will prepare AssetType call\
                \                                                                */\n\
                /*                                                               \
                \                                                          */\n/*\
                \ Required params: msisdn                                        \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\nif (messages\
                \ == null || isJSONEmpty(messages)){\n    apim.setvariable('errorName',\
                \ 'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal\
                \ Error', 'Connection error');\n}\nelse {\n    //load msisdn from\
                \ request header in a variable\n    var msisdn = apim.getvariable('message.headers.msisdn');\n\
                \    //fetch assets service assetType URL from config file, replace\
                \ CURRENT with msisdn and set variable for next call\n    var assetTypeCallURL\
                \ = messages.assetservice.assets.uri;\n    //assetTypeCallURL = assetTypeCallURL.replace('CURRENT',\
                \ msisdn);\n    apim.setvariable('assetTypeCallURL', assetTypeCallURL);\n\
                }\n\nfunction isJSONEmpty(jsonObject) {\n    var member;\n    var\
                \ result = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
                \ != null) {\n            result = false;\n        }\n    }\n    return\
                \ result;\n}"
              description: "This GW Script file will prepare AssetType call"
          - invoke:
              title: "InvokeAssetTypeService"
              timeout: 60
              verb: "GET"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              description: "Fetch all assets from identity"
              target-url: "$(assetTypeCallURL)"
              output: "assets"
          - gatewayscript:
              title: "CreateDisambiguationIdRequest"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* CreateDisambiguationIdRequest.js        1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will process AssetType call\
                \ response and prepare the request for disambiguationId          */\n\
                /*                                                               \
                \                                                          */\n/*\
                \ Required params: msisdn                                        \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\n//create\
                \ phone number from msisdn received in request header\nvar msisdn\
                \ = apim.getvariable('message.headers.msisdn');\nvar phoneNumber =\
                \ \"\";\nphoneNumber = phoneNumber.concat('+44', msisdn);\n//load\
                \ assets response in a variable\nvar assets = apim.getvariable('assets.body');\n\
                //get all assets\nvar assetTypes = ['PAYG'];\nvar filteredAssets =\
                \ getAssets(assets, assetTypes);\n//evaluate assetType response to\
                \ check if asset is PAYG or not\nvar isPayg = false;\nfor (var i =\
                \ 0; i < filteredAssets.length; i++){\n    if (filteredAssets[i].asset_value.includes(msisdn)){\n\
                \        isPayg = true;\n    }\n}\nvar productIdentifier = \"product_id/PAYM\"\
                ;\nif (isPayg) {\n    productIdentifier = \"product_id/PAYG\";\n}\n\
                apim.setvariable('isPayg', isPayg);\n//create disambiguationIdRequest\
                \ with productIdentifier\nvar disambiguationIdRequest = {\n};\ndisambiguationIdRequest.identifierType\
                \ = productIdentifier;\ndisambiguationIdRequest.identifierValue =\
                \ phoneNumber;\n//read disambiguationId URL from config and set it\
                \ in a variable for next call\napim.setvariable('generateDisambiguationIdURL',\
                \ messages.authserver.generateDisambiguationId.uri);\n//write disambiguationId\
                \ request in the context for next call\napim.setvariable('message.body',\
                \ disambiguationIdRequest);\n\nfunction getAssets(assets, assetTypes){\n\
                \    var filteredAssets = [];\n    for (var i = 0; i < assets.length;\
                \ i++){\n        for (var j = 0; j < assetTypes.length; j++){\n  \
                \          if (assets[i] != null && assets[i].asset_type != null &&\
                \ assets[i].asset_type == assetTypes[j]){\n                filteredAssets.push(assets[i]);\n\
                \            }\n        }\n    }\n    return filteredAssets;\n}"
              description: "This GW Script file will process AssetType call response\
                \ and prepare the request for disambiguationId"
          - invoke:
              title: "InvokeDisambiguationIdService"
              timeout: 60
              verb: "POST"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              description: "Fetch disambiguationid from identity"
              target-url: "$(generateDisambiguationIdURL)"
              output: "disambiguationId"
          - gatewayscript:
              title: "CreateAccessTokenRequest"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* CreateAccessTokenRequest.js             1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will fetch AuthServer URL for\
                \ AccessToken, prepare AuthZ header and AccessToken request to */\n\
                /*          be posted in next  call                              \
                \                                                          */\n/*\
                \ Required params: x-authcode                                    \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\n//extract\
                \ auth server URL to generate access token and set it in a variable\n\
                var authServerAccessTokenURL = messages.authserver.generateAccessToken.uri;\n\
                apim.setvariable('authServerAccessTokenURL', authServerAccessTokenURL);\n\
                \n//read client id and client secret from config and create AuthZ\
                \ header for access token call\nvar authServerClientId = messages.authserver.client_id;\n\
                var authServerClientSecret = messages.authserver.client_secret;\n\
                var buffer = new Buffer(authServerClientId+\":\"+authServerClientSecret);\n\
                var authorizationHeader = \"Basic \" + buffer.toString('base64');\n\
                apim.setvariable('message.headers.authorization', authorizationHeader);\n\
                \n//read all http headers from the input request\n//var xIBMClientId\
                \ = apim.getvariable('client.app.id');\nvar authCode = apim.getvariable('message.headers.x-authcode');\n\
                \n//get scope and grant type from config xml \nvar scope = messages.authserver.scope;\n\
                var grantType = messages.authserver.oauth.grant_type;\n\n//create\
                \ access token JSON request with authcode, scope and grant type\n\
                var authServerAccessTokenRequest = {};\nauthServerAccessTokenRequest.code\
                \ = authCode;\nauthServerAccessTokenRequest.scope = scope;\nauthServerAccessTokenRequest.grant_type\
                \ = grantType;\n\n//write access token request in the context for\
                \ next call\napim.setvariable('message.body', authServerAccessTokenRequest);"
              description: "GW Script to create access token request for auth service"
          - invoke:
              target-url: "$(authServerAccessTokenURL)"
              title: "InvokeGATAuthService"
              verb: "POST"
              output: "accessToken"
          - gatewayscript:
              title: "CreateTransferAuthCodeRequest"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* CreateTransferAuthCodeRequest.js        1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will fetch AuthServer URL for\
                \ TransferAuthCode, prepare AuthZ header and TransferAuthCode  */\n\
                /*          request to be posted in next  call                   \
                \                                                          */\n/*\
                \ Required params: x-authcode, x-device, clientId                \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\n//extract\
                \ auth server URL to generate transfer auth code and set it in a variable\n\
                var authServerTransferAuthCodeURL = messages.authserver.generateTransferAuthCode.uri;\n\
                apim.setvariable('authServerTransferAuthCodeURL', authServerTransferAuthCodeURL);\n\
                //get headers values from request\nvar deviceType = apim.getvariable('message.headers.x-device');\n\
                var clientId = apim.getvariable('client.app.id');\n//get access token\
                \ from previous call and set it as Bearer AuthZ header for next call\n\
                var accessToken = apim.getvariable('accessToken.body').access_token;\n\
                var authorizationHeader = \"Bearer \" + accessToken;\napim.setvariable('message.headers.authorization',\
                \ authorizationHeader);\n//get disambiguationId from previous call\
                \ response\nvar disambiguationId = apim.getvariable('disambiguationId.body').disambiguation_id;\n\
                var replacedParam = 'disambiguation_id=';\n//load sendTo and failureURL\
                \ from config and set deviceType, clientId and disambiguationId in\
                \ the URL\nvar sendToURL = messages.sso.endpoint.paybill.sendto;\n\
                var failureURL = messages.sso.endpoint.paybill.failure;\nsendToURL=\
                \   sendToURL.replace(/[{}]/g, \"\");\nfailureURL = failureURL.replace(/[{}]/g,\
                \ \"\");\nsendToURL =  sendToURL.replace('deviceType', deviceType).replace('clientId',\
                \ clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\n\
                failureURL = failureURL.replace('deviceType', deviceType).replace('clientId',\
                \ clientId).replace('disambiguation_id=%s', replacedParam.concat(disambiguationId));\n\
                apim.setvariable('sendToURL', sendToURL);\napim.setvariable('failureURL',\
                \ failureURL);\nvar credhandlerRedemptionURL = messages.sso.credhandler_redemption_url;\n\
                apim.setvariable('credhandlerRedemptionURL', credhandlerRedemptionURL);\n\
                //create transfer auth code request and write it in context variable\n\
                var transferAuthCodeRequest = {};\ntransferAuthCodeRequest.send_to\
                \ = sendToURL;\napim.setvariable('message.body', transferAuthCodeRequest);"
              description: "GW script to process disambiguationid and create transfer\
                \ authcode request"
          - invoke:
              title: "InvokeTransferAuthCodeService"
              timeout: 60
              verb: "POST"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              description: "Fetch Transfer Auth Code from identity"
              target-url: "$(authServerTransferAuthCodeURL)"
              output: "transferAuthCode"
          - gatewayscript:
              title: "ConsolidateAuthResponses"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* ConsolidateAuthResponses.js             1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will consolidate all auth responses\
                \ (authCode, accessToken, disambiguationId and           */\n/*  \
                \        transferAuthCode) together in a single response         \
                \                                                       */\n/* Required\
                \ params: x-authcode, x-device, clientId                         \
                \                                                */\n/* ***********************************************************************************************************************\
                \ */\n\n//fetch transferAuthCode, sendToURL and failureURL and generate\
                \ sso link \nvar transferAuthCode = apim.getvariable('transferAuthCode.body').transfer_auth_code;\n\
                var sendToURL = apim.getvariable('sendToURL');\nvar failureURL = apim.getvariable('failureURL');\n\
                var credhandlerRedemptionURL = apim.getvariable('credhandlerRedemptionURL');\n\
                credhandlerRedemptionURL= credhandlerRedemptionURL.replace(/[{}]/g,\
                \ \"\");\nvar ssoLink = credhandlerRedemptionURL.replace('AUTH_CODE',\
                \ transferAuthCode).replace('SEND_TO', sendToURL).replace('FAILURE_URL',\
                \ failureURL);\n\n//load all responses configuration from context\
                \ variables and generate consolidatedAUthResponse\nvar consolidatedAuthResponse\
                \ = {};\nconsolidatedAuthResponse.msisdn = apim.getvariable('message.headers.msisdn');\n\
                consolidatedAuthResponse.isPayg = apim.getvariable('isPayg');\nconsolidatedAuthResponse.authCode\
                \ = apim.getvariable('message.headers.x-authcode');\nconsolidatedAuthResponse.access_token\
                \ = apim.getvariable('accessToken.body').access_token;\nconsolidatedAuthResponse.disambiguation_id\
                \ = apim.getvariable('disambiguationId.body').disambiguation_id;\n\
                consolidatedAuthResponse.transfer_auth_code = transferAuthCode;\n\
                consolidatedAuthResponse.ssoLink = ssoLink;\n//write consolidated\
                \ auth response as the final operation response\napim.setvariable('message.body',\
                \ consolidatedAuthResponse);"
              description: "This GW Script file will consolidate all auth responses\
                \ (authCode, accessToken, disambiguationId and transferAuthCode) together\
                \ in a single response"
        - operations:
          - verb: "get"
            path: "/authservice/getdisambiguationid"
          execute:
          - gatewayscript:
              title: "GS:ValidateParameters"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* ValidateParameters.js                   1.0        Dinesh Tomar\
                \                                          25-Apr-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will validate request parameters\
                \                                                           */\n/*\
                \                                                                \
                \                                                         */\n/* Required\
                \ params:                                                        \
                \                                                */\n/* ***********************************************************************************************************************\
                \ */\n\n//get all input parameters\nvar clientId = apim.getvariable('client.app.id');\n\
                var msisdn = apim.getvariable('request.headers.msisdn');\n//check\
                \ all headers validation\nif (msisdn == null || msisdn == undefined\
                \ || isNaN(parseInt(msisdn))){\n    apim.setvariable('errorName',\
                \ 'InvalidMsisdn');\n    apim.error('InvalidMsisdn', 500, 'Internal\
                \ Error', 'Missing or invalid msisdn');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',\
                \ clientId);\n    apim.setvariable('message.headers.content-type',\
                \ 'application/json');\n    apim.setvariable('message.headers.msisdn',\
                \ msisdn);\n    //form url for to fetch errorConfig JSON\n    var\
                \ hostName = apim.getvariable('api.endpoint.hostname');\n    var orgName\
                \ = apim.getvariable('api.org.name');\n    var catalog = apim.getvariable('env.path');\n\
                \    var configPropertiesURL = 'https://'+hostName+'/'+orgName+'/'+catalog+'/'+'config/properties';\n\
                \    apim.setvariable('configPropertiesURL', configPropertiesURL);\n\
                }"
          - invoke:
              target-url: "$(configPropertiesURL)"
              description: "Load all messages  and properties in context"
              title: "Invoke:PropertiesHandler"
              cache-response: "no-cache"
              cache-key: ""
              stop-on-error:
              - "ConnectionError"
              - "OperationError"
              - "SOAPError"
              cache-ttl: 60
              output: "messages-property"
          - gatewayscript:
              title: "PrepareAssetTypeCall"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* PrepareAssetTypeCall.js                 1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will prepare AssetType call\
                \                                                                */\n\
                /*                                                               \
                \                                                          */\n/*\
                \ Required params: msisdn                                        \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\nif (messages\
                \ == null || isJSONEmpty(messages)){\n    apim.setvariable('errorName',\
                \ 'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal\
                \ Error', 'Connection error');\n}\nelse {\n    //load msisdn from\
                \ request header in a variable\n    var msisdn = apim.getvariable('message.headers.msisdn');\n\
                \    //fetch assets service assetType URL from config file, replace\
                \ CURRENT with msisdn and set variable for next call\n    var assetTypeCallURL\
                \ = messages.assetservice.assets.uri;\n    //assetTypeCallURL = assetTypeCallURL.replace('CURRENT',\
                \ msisdn);\n    apim.setvariable('assetTypeCallURL', assetTypeCallURL);\n\
                }\n\nfunction isJSONEmpty(jsonObject) {\n    var member;\n    var\
                \ result = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
                \ != null) {\n            result = false;\n        }\n    }\n    return\
                \ result;\n}"
              description: "This GW Script file will prepare AssetType call"
          - invoke:
              title: "InvokeAssetTypeService"
              timeout: 60
              verb: "GET"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - "ConnectionError"
              - "OperationError"
              - "SOAPError"
              version: "1.0.0"
              description: "Fetch all assets from identity"
              target-url: "$(assetTypeCallURL)"
              output: "assets"
          - gatewayscript:
              title: "CreateDisambiguationIdRequest"
              version: "1.0.0"
              source: "/* ***********************************************************************************************************************\
                \ */\n/* ***********************************************************************************************************************\
                \ */\n/* FileName                                Version    Created\
                \ By                  Modified By               Date           */\n\
                /* CreateDisambiguationIdRequest.js        1.0        Dinesh Tomar\
                \                                          02-May-2018    */\n/* \
                \                                                                \
                \                                                        */\n/* ***********************************************************************************************************************\
                \ */\n/* Purpose: This GW Script file will process AssetType call\
                \ response and prepare the request for disambiguationId          */\n\
                /*                                                               \
                \                                                          */\n/*\
                \ Required params: msisdn                                        \
                \                                                         */\n/* ***********************************************************************************************************************\
                \ */\n\n//load properties configuration from context variable\nvar\
                \ messages = apim.getvariable('messages-property.body');\n//create\
                \ phone number from msisdn received in request header\nvar msisdn\
                \ = apim.getvariable('message.headers.msisdn');\nvar phoneNumber =\
                \ \"\";\nphoneNumber = phoneNumber.concat('+44', msisdn);\n//load\
                \ assets response in a variable\nvar assets = apim.getvariable('assets.body');\n\
                //get all assets\nvar assetTypes = ['PAYG'];\nvar filteredAssets =\
                \ getAssets(assets, assetTypes);\n//evaluate assetType response to\
                \ check if asset is PAYG or not\nvar isPayg = false;\nfor (var i =\
                \ 0; i < filteredAssets.length; i++){\n    if (filteredAssets[i].asset_value.includes(msisdn)){\n\
                \        isPayg = true;\n    }\n}\nvar productIdentifier = \"product_id/PAYM\"\
                ;\nif (isPayg) {\n    productIdentifier = \"product_id/PAYG\";\n}\n\
                apim.setvariable('isPayg', isPayg);\n//create disambiguationIdRequest\
                \ with productIdentifier\nvar disambiguationIdRequest = {\n};\ndisambiguationIdRequest.identifierType\
                \ = productIdentifier;\ndisambiguationIdRequest.identifierValue =\
                \ phoneNumber;\n//read disambiguationId URL from config and set it\
                \ in a variable for next call\napim.setvariable('generateDisambiguationIdURL',\
                \ messages.authserver.generateDisambiguationId.uri);\n//write disambiguationId\
                \ request in the context for next call\napim.setvariable('message.body',\
                \ disambiguationIdRequest);\n\nfunction getAssets(assets, assetTypes){\n\
                \    var filteredAssets = [];\n    for (var i = 0; i < assets.length;\
                \ i++){\n        for (var j = 0; j < assetTypes.length; j++){\n  \
                \          if (assets[i] != null && assets[i].asset_type != null &&\
                \ assets[i].asset_type == assetTypes[j]){\n                filteredAssets.push(assets[i]);\n\
                \            }\n        }\n    }\n    return filteredAssets;\n}"
              description: "This GW Script file will process AssetType call response\
                \ and prepare the request for disambiguationId"
          - invoke:
              title: "InvokeDisambiguationIdService"
              timeout: 60
              verb: "POST"
              cache-response: "protocol"
              cache-ttl: 900
              stop-on-error:
              - null
              version: "1.0.0"
              description: "Fetch disambiguationid from identity"
              target-url: "$(generateDisambiguationIdURL)"
        otherwise: []
        version: "1.0.0"
    catch:
    - errors:
      - "InvalidMsisdn"
      - "ConnectionError"
      - "OperationError"
      - "SOAPError"
      - "UnauthorizedError"
      execute:
      - gatewayscript:
          title: "GS:ErrorHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\n/* ***********************************************************************************************************************\
            \ */\n/* FileName                                Version    Created By\
            \                  Modified By               Date           */\n/* Errorhandling.js\
            \                        1.0        Dinesh Tomar                     \
            \                     07-May-2018    */\n/*                          \
            \                                                                    \
            \                           */\n/* ***********************************************************************************************************************\
            \ */\n/* Purpose: This GW Script file will read error config for the catch\
            \ block error name and will set the necessary params    */\n/*       \
            \   like status code, reason phrase and will return the error json   \
            \                                              */\n/* Required params:\
            \ errorName                                                          \
            \                                    */\n/* ***********************************************************************************************************************\
            \ */\nvar urlOpen = require('urlopen');\n//form url for to fetch errorConfig\
            \ JSON\nvar hostName = apim.getvariable('api.endpoint.hostname');\nvar\
            \ orgName = apim.getvariable('api.org.name');\nvar catalog = apim.getvariable('env.path');\n\
            var errorConfigURL = 'https://'+hostName+'/'+orgName+'/'+catalog+'/'+'config/errorconfig';\n\
            var clientId = apim.getvariable('client.app.id');\nvar errorConfigURLOptions\
            \ = {\n    target: errorConfigURL,\n    sslClientProfile: 'api-sslcli-all',\n\
            \    headers: {'x-ibm-client-id': clientId, 'content-type': 'application/json'\
            \ }\n};\n//fetch errorName and errorConfig JSON from context variables\n\
            urlOpen.open(errorConfigURLOptions, function (error, response) {\n   \
            \ if (error) {\n        throw error;\n    } else {\n        response.readAsJSON(function\
            \ (error, errorConfigJSON) {\n            if (error) {\n             \
            \   throw error;\n            } else {\n                var errorName\
            \ = apim.getvariable('errorName');\n                if (errorName == null\
            \ && apim.getvariable('message.status.code') == null) {\n            \
            \        errorName = 'default';\n                } else if (errorName\
            \ == null && apim.getvariable('message.status.reason') != null && apim.getvariable('message.status.reason').startsWith('APIC:')\
            \ ) {\n                    errorName = 'default';\n                  \
            \  apim.setvariable('message.status.code', apim.getvariable('message.status.code'));\n\
            \                    apim.setvariable('message.status.reason', apim.getvariable('message.status.reason'));\n\
            \                    apim.setvariable('message.body', apim.getvariable('message.body'));\n\
            \                } else {\n                    //fetch specific block\
            \ from error config JSON\n                    if (! isJSONEmpty(errorConfigJSON))\
            \ {\n                        var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\n\
            \                        var statusCode = errorDetails.statusCode;\n \
            \                       var reasonPhrase = errorDetails.reasonPhrase;\n\
            \                        var errorMessage = errorDetails.errorMessage;\n\
            \                        apim.setvariable('message.headers.content-type',\
            \ 'application/json');\n                        apim.setvariable('message.status.code',\
            \ statusCode);\n                        apim.setvariable('message.status.reason',\
            \ reasonPhrase);\n                        apim.setvariable('message.body',\
            \ errorMessage);\n                    }\n                    //else block\
            \ executes in case error config file is not loaded. it will set a default\
            \ error message\n                    else {\n                        apim.setvariable('message.headers.content-type',\
            \ 'application/json');\n                        apim.setvariable('message.status.code',\
            \ 500);\n                        apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\n                        apim.setvariable('message.body',\
            \ {\n                            \"error\": \"Something went wrong\"\n\
            \                        });\n                    }\n                }\n\
            \            }\n        });\n    }\n});\n\n//below function checks if\
            \ json object is null or not\nfunction isJSONEmpty(jsonObject) {\n   \
            \ var member;\n    var result = true;\n    for (member in jsonObject)\
            \ {\n        if (jsonObject[member] != null) {\n            result = false;\n\
            \        }\n    }\n    return result;\n}"
  phase: "realized"
paths:
  /authservice/getaccesstoken:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/AccessToken"
    parameters:
    - $ref: "#/parameters/x-authcode"
  /authservice/getconsolidatedauth:
    get:
      responses:
        200:
          description: "200 OK"
    parameters:
    - $ref: "#/parameters/msisdn"
    - $ref: "#/parameters/x-authcode"
    - $ref: "#/parameters/x-device"
  /authservice/getdisambiguationid:
    get:
      responses:
        200:
          description: "200 OK"
    parameters:
    - $ref: "#/parameters/msisdn"
definitions:
  AccessToken:
    properties:
      access_token:
        type: "string"
    additionalProperties: false
    required:
    - "access_token"
tags: []
parameters:
  msisdn:
    name: "msisdn"
    type: "string"
    required: true
    in: "header"
  x-authcode:
    name: "x-authcode"
    type: "string"
    required: true
    in: "header"
  x-device:
    name: "x-device"
    type: "string"
    required: true
    in: "header"
