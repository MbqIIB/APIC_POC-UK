---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-novum-postpayrecentcharges"
  title: "O2APIC-Novum-PostpayRecentCharges"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/o2apic-novum-postpayrecentcharges"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - set-variable:
        title: "set-variable"
        actions:
        - set: "message.headers.X-IBM-Client-Id"
          value: "1e8584b2-3f03-4714-9812-f40ff4d94d81"
        - set: "message.headers.msisdn"
          value: "7777777777"
        version: "1.0.0"
    - invoke:
        title: "InvokePropertiesHandler"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "http://demo9811818.mockable.io/myo2mw/message-properties"
        output: "messages-property"
    - invoke:
        title: "InvokeGetDisambiguationIdService"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "https://api.eu.apiconnect.ibmcloud.com/dineshtomardt93gmailcom-dev/sb/apic/authservice/getdisambiguationid"
        output: "DisambiguationId"
    - gatewayscript:
        title: "GS:SetRecentChargesServiceURL"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* FileName                                Version    Created By\
          \                  Modified By               Date           */\r\n/* GS:SetRecentChargesServiceURL.js\
          \                      1.0        Chiranjibi Panigrahi                 \
          \   15-May-2018    */\r\n/*                                            \
          \                                                                      \
          \       */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* Purpose: This GW Script file will construct the phone service\
          \ end point                                                 */\r\n/*   \
          \                                                                      \
          \                                                */\r\n/* Required params:\
          \                                                                      \
          \                                  */\r\n/* ***********************************************************************************************************************\
          \ */\r\n//load properties configuration from context variable\r\nvar messages\
          \ = apim.getvariable('messages-property.body');\r\n\r\n//fetch the path\
          \ or query params\r\nvar msisdn = apim.getvariable('request.parameters.msisdn');\r\
          \n\r\n//validate all parameters or messages\r\nif (msisdn == null || msisdn\
          \ == undefined || isNaN(parseInt(msisdn))) {\r\n    apim.setvariable('errorName',\
          \ 'InvalidMsisdn');\r\n    apim.error('InvalidMsisdn', 500, 'Internal Error',\
          \ 'Missing or invalid msisdn');\r\n} else if (messages == null || isJSONEmpty(messages))\
          \ {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\r\n} else if (messages ==\
          \ null || isJSONEmpty(messages)) {\r\n    apim.setvariable('errorName',\
          \ 'ConnectionError');\r\n    apim.error('ConnectionError', 500, 'Internal\
          \ Error', 'Connection error');\r\n} else if (isJSONEmpty(apim.getvariable('DisambiguationId.body')))\
          \ {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\r\n} else {\r\n    var DisambiguationIdBody\
          \ = apim.getvariable('DisambiguationId.body');\r\n    var DisambiguationId\
          \ = DisambiguationIdBody.disambiguation_id\r\n    var recentChargedUrl =\
          \ messages.phoneservice.recentcharges.uri;\r\n    var footer = messages.msg.recentcharges.footer;\r\
          \n    apim.setvariable('iphoneRecentCharges', messages.iphone.recentCharges.showUsageDetails);\r\
          \n    apim.setvariable('iphoneBilledCharges', messages.iphone.billedCharges.showUsageDetails);\r\
          \n    apim.setvariable('anroidRecentCharges', messages.android.recentCharges.showUsageDetails);\r\
          \n    apim.setvariable('anroidBilledCharges', messages.android.billedCharges.showUsageDetails);\r\
          \n    \r\n    apim.setvariable('footer', footer);\r\n    \r\n    apim.setvariable('recentChargedUrl',\
          \ recentChargedUrl);\r\n    \r\n    apim.setvariable('message.headers.disambiguation-id',\
          \ DisambiguationId);\r\n}\r\n\r\n//below function checks if json object\
          \ is null or not\r\nfunction isJSONEmpty(jsonObject) {\r\n    var member;\r\
          \n    var result = true;\r\n    for (member in jsonObject) {\r\n       \
          \ if (jsonObject[member] !== null) {\r\n            result = false;\r\n\
          \        }\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n"
    - invoke:
        title: "InvokeRecentChargesService"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "http://www.mocky.io/v2/5b0541923200008100ebf7b9"
        output: "recentChargesResponse"
    - gatewayscript:
        title: "GS:ResponseValidation"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* FileName                                Version    Created By\
          \                  Modified By               Date           */\r\n/* GS:ResponseValidation.js\
          \                      1.0        Chiranjibi Panigrahi                 \
          \       10-May-2018    */\r\n/*                                        \
          \                                                                      \
          \           */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* Purpose: This GW Script file will map the response recieved from\
          \ phone service to the actual output                     */\r\n/*      \
          \                                                                      \
          \                                             */\r\n/* Required params:\
          \                                                                      \
          \                                  */\r\n/* ***********************************************************************************************************************\
          \ */\r\n\r\n//fetch the response recieved from phone service\r\nvar recentChargesResponse\
          \ = apim.getvariable('recentChargesResponse.body');\r\n\r\n//phone service\
          \ response validation\r\nif (isJSONEmpty(recentChargesResponse)) {\r\n \
          \   apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\r\n}\r\n\r\n//below function\
          \ checks if json object is null or not\r\nfunction isJSONEmpty(jsonObject)\
          \ {\r\n    var member;\r\n    var result = true;\r\n    for (member in jsonObject)\
          \ {\r\n        if (jsonObject[member] !== null) {\r\n            result\
          \ = false;\r\n        }\r\n    }\r\n    return result;\r\n}"
    - map:
        title: "MapRecentCharges"
        inputs:
          input:
            schema:
              type: "object"
              properties:
                totalCharges:
                  type: "number"
                  format: "double"
                  name: "totalCharges"
                voiceCharges:
                  type: "number"
                  format: "double"
                  name: "voiceCharges"
                messageCharges:
                  type: "number"
                  format: "double"
                  name: "messageCharges"
                dataCharges:
                  type: "number"
                  format: "double"
                  name: "dataCharges"
                internationalCharges:
                  type: "number"
                  format: "double"
                  name: "internationalCharges"
                directToBillCharges:
                  type: "number"
                  format: "double"
                  name: "directToBillCharges"
                otherCharges:
                  type: "number"
                  format: "double"
                  name: "otherCharges"
                nextBillDate:
                  type: "string"
                  name: "nextBillDate"
                recentChargesSince:
                  type: "string"
                  name: "recentChargesSince"
                nextBillPaymentDate:
                  type: "string"
                  name: "nextBillPaymentDate"
            variable: "recentChargesResponse.body"
        outputs:
          output:
            schema:
              $ref: "#/definitions/RecentChargesSummaryResponse"
            variable: "message.body"
        actions:
        - set: "output.totalCharges"
          from: "input.totalCharges"
        - set: "output.voiceCharges"
          from: "input.voiceCharges"
        - set: "output.messageCharges"
          from: "input.messageCharges"
        - set: "output.dataCharges"
          from: "input.dataCharges"
        - set: "output.internationalCharges"
          from: "input.internationalCharges"
        - set: "output.directtobillCharges"
          from: "input.directToBillCharges"
        - set: "output.otherCharges"
          from: "input.otherCharges"
        - set: "output.nextBillDate"
          from: "input.nextBillDate"
        - set: "output.lastBillDate"
          from: "input.recentChargesSince"
        - set: "output.nextBillPaymentDate"
          from: "input.nextBillPaymentDate"
        - set: "output.footerMessage"
          value: "apim.getvariable('footer')"
        - set: "output.showUsageDetails"
          value: "setShowChargeDetails(apim.getvariable('request.headers.x-devicetype'),\
            \ true);\r\n\r\nfunction setShowChargeDetails(deviceType, forRecentCharges)\
            \ {\r\n    if (deviceType != null) {\r\n        if (forRecentCharges)\
            \ {\r\n            return getRecentShowChargesUsageDetailsByDeviceType(deviceType);\r\
            \n        } else\r\n        return getBilledShowChargesUsageDetailsByDeviceType(deviceType);\r\
            \n    }\r\n    return true;\r\n}\r\n\r\nfunction getRecentShowChargesUsageDetailsByDeviceType(deviceType)\
            \ {\r\n    if (deviceType == \"iPhone\")\r\n    return apim.getvariable('iphoneRecentCharges');\
            \ else if (deviceType == \"Android\")\r\n    return apim.getvariable('anroidRecentCharges');\r\
            \n    \r\n    return true;\r\n}\r\n\r\nfunction getBilledShowChargesUsageDetailsByDeviceType(deviceType)\
            \ {\r\n    if (deviceType == \"iPhone\")\r\n    return apim.getvariable('iphoneBilledCharges');\
            \ else if (deviceType == \"Android\")\r\n    return apim.getvariable('anroidBilledCharges');\r\
            \n    \r\n    return true;\r\n}"
        version: "1.0.0"
    catch:
    - errors:
      - "InvalidMsisdn"
      - "ConnectionError"
      - "SOAPError"
      - "OperationError"
      execute:
      - gatewayscript:
          title: "GS:ErroHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\r\n/* ***********************************************************************************************************************\
            \ */\r\n/* FileName                                Version    Created\
            \ By                  Modified By               Date           */\r\n\
            /* Errorhandling.js                        1.0        Dinesh Tomar   \
            \                                       07-May-2018    */\r\n/*      \
            \                                                                    \
            \                                               */\r\n/* ***********************************************************************************************************************\
            \ */\r\n/* Purpose: This GW Script file will read error config for the\
            \ catch block error name and will set the necessary params    */\r\n/*\
            \          like status code, reason phrase and will return the error json\
            \                                                 */\r\n/* Required params:\
            \ errorName                                                          \
            \                                    */\r\n/* ***********************************************************************************************************************\
            \ */\r\nvar urlOpen = require('urlopen');\r\n//fetch errorName and errorConfig\
            \ JSON from context variables\r\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\"\
            ;\r\nvar errorConfigURLOptions = {\r\n    target: errorConfigURL,\r\n\
            \    sslClientProfile: ''\r\n};\r\nurlOpen.open(errorConfigURLOptions,\
            \ function (error, response) {\r\n    if (error) {\r\n        throw error;\r\
            \n    } else {\r\n        response.readAsJSON(function (error, errorConfigJSON)\
            \ {\r\n            if (error) {\r\n                throw error;\r\n  \
            \          } else {\r\n                var errorName = apim.getvariable('errorName');\r\
            \n                if (errorName == null) {\r\n                    errorName\
            \ = 'default';\r\n                }\r\n                //fetch specific\
            \ block from error config JSON\r\n                if (! isJSONEmpty(errorConfigJSON))\
            \ {\r\n                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\r\
            \n                    var statusCode = errorDetails.statusCode;\r\n  \
            \                  var reasonPhrase = errorDetails.reasonPhrase;\r\n \
            \                   var errorMessage = errorDetails.errorMessage;\r\n\
            \                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\r\n                    apim.setvariable('message.status.code',\
            \ statusCode);\r\n                    apim.setvariable('message.status.reason',\
            \ reasonPhrase);\r\n                    apim.setvariable('message.body',\
            \ errorMessage);\r\n                }\r\n                //else block\
            \ executes in case error config file is not loaded. it will set a default\
            \ error message\r\n                else {\r\n                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\r\n                    apim.setvariable('message.status.code',\
            \ 500);\r\n                    apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\r\n                    apim.setvariable('message.body',\
            \ {\r\n                        \"error\": \"Something went wrong\"\r\n\
            \                    });\r\n                }\r\n            }\r\n   \
            \     });\r\n    }\r\n});\r\n\r\n//below function checks if json object\
            \ is null or not\r\nfunction isJSONEmpty(jsonObject) {\r\n    var member;\r\
            \n    var result = true;\r\n    for (member in jsonObject) {\r\n     \
            \   if (jsonObject[member] != null) {\r\n            result = false;\r\
            \n        }\r\n    }\r\n    return result;\r\n}"
  phase: "realized"
paths:
  /{msisdn}/postpay/bill/recentcharges:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/RecentChargesSummaryResponse"
    parameters:
    - name: "msisdn"
      type: "string"
      required: true
      in: "path"
    - name: "x-devicetype"
      type: "string"
      required: false
      in: "header"
definitions:
  RecentChargesSummaryResponse:
    properties:
      totalCharges:
        type: "integer"
        format: "int32"
      voiceCharges:
        type: "integer"
        format: "int32"
      messageCharges:
        type: "integer"
        format: "int32"
      dataCharges:
        type: "integer"
        format: "int32"
      internationalCharges:
        type: "integer"
        format: "int32"
      directtobillCharges:
        type: "integer"
        format: "int32"
      otherCharges:
        type: "integer"
        format: "int32"
      nextBillDate:
        type: "string"
      nextBillPaymentDate:
        type: "string"
      footerMessage:
        type: "string"
      lastBillDate:
        type: "string"
      showUsageDetails:
        type: "string"
    additionalProperties: false
tags: []
