---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-novum-postpaybilledcharges"
  title: "O2APIC-Novum-PostpayBilledCharges"
  version: "1.0.0"
schemes:
- "https"
basePath: "/o2apic-novum-postpaybilledcharges"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - set-variable:
        title: "SetVariable"
        actions:
        - set: "message.headers.X-IBM-Client-Id"
          value: "1e8584b2-3f03-4714-9812-f40ff4d94d81"
        - set: "message.headers.msisdn"
          value: "7777777777"
        version: "1.0.0"
    - invoke:
        target-url: "https://api.eu.apiconnect.ibmcloud.com/dineshtomardt93gmailcom-dev/sb/apic/authservice/getdisambiguationid"
        title: "InvokeGetdisambiguationIdService"
        verb: "GET"
        stop-on-error: []
        output: "DisambiguationId"
    - invoke:
        title: "InvokePropertiesHandler"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "http://demo9811818.mockable.io/myo2mw/message-properties"
        output: "messages-property"
    - gatewayscript:
        title: "GS:GetPhoneServiceURL"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* FileName                                Version    Created By\
          \                  Modified By               Date           */\r\n/* GS:GetPhoneServiceURL.js\
          \                      1.0        Chiranjibi Panigrahi                 \
          \           08-May-2018    */\r\n/*                                    \
          \                                                                      \
          \               */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* Purpose: This GW Script file will construct the phone service\
          \ end point                                                 */\r\n/*   \
          \                                                                      \
          \                                                */\r\n/* Required params:\
          \                                                                      \
          \                                  */\r\n/* ***********************************************************************************************************************\
          \ */\r\n//load properties configuration from context variable\r\nvar messages\
          \ = apim.getvariable('messages-property.body');\r\n\r\n//fetch the path\
          \ or query params\r\nvar msisdn = apim.getvariable('request.parameters.msisdn');\r\
          \n\r\n//validate all parameters or messages\r\nif (msisdn == null || msisdn\
          \ == undefined || isNaN(parseInt(msisdn))) {\r\n     apim.setvariable('errorName',\
          \ 'InvalidMsisdn'); \r\n     apim.error('InvalidMsisdn', 500, 'Internal\
          \ Error', 'Missing or invalid msisdn');\r\n    \r\n} else if (messages ==\
          \ null || isJSONEmpty(messages)) {\r\n    apim.setvariable('errorName',\
          \ 'ConnectionError');\r\n    apim.error('ConnectionError', 500, 'Internal\
          \ Error', 'Connection error');\r\n   \r\n} else if (isJSONEmpty(apim.getvariable('DisambiguationId.body')))\
          \ {\r\n     apim.setvariable('errorName', 'ConnectionError');\r\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\r\n   \r\n    \r\n} else {\r\
          \n    var billnumber = apim.getvariable('request.parameters.billnumber');\r\
          \n    var filteringmsisdn = apim.getvariable('request.parameters.filteringmsisdn');\r\
          \n    var DisambiguationIdBody = apim.getvariable('DisambiguationId.body');\r\
          \n    var DisambiguationId = DisambiguationIdBody.disambiguation_id\r\n\
          \    var baseURL = messages.phoneservice.billedcharges.uri;\r\n    var BilledChargesURL\
          \ = \"\";\r\n    \r\n    if (billnumber !== null) {\r\n        BilledChargesURL\
          \ = baseURL.concat(\"?billnumber=\", billnumber);\r\n    }\r\n    \r\n \
          \   if (filteringmsisdn !== null) {\r\n        if (BilledChargesURL !==\
          \ null) {\r\n            BilledChargesURL = BilledChargesURL.concat(\"&filteringmsisdn=\"\
          , filteringmsisdn);\r\n        } else {\r\n            BilledChargesURL\
          \ = baseURL.concat(\"?filteringmsisdn=\", filteringmsisdn);\r\n        }\r\
          \n    }\r\n    if (BilledChargesURL == null) {\r\n        BilledChargesURL\
          \ = baseURL;\r\n    }\r\n    apim.setvariable('BilledChargesURL', BilledChargesURL);\r\
          \n    \r\n    apim.setvariable('message.headers.disambiguation-id', DisambiguationId);\r\
          \n}\r\n\r\n//below function checks if json object is null or not\r\nfunction\
          \ isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\
          \n    for (member in jsonObject) {\r\n        if (jsonObject[member] !=\
          \ null) {\r\n            result = false;\r\n        }\r\n    }\r\n    return\
          \ result;\r\n}"
    - invoke:
        title: "InvokeBillSummeryService"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        target-url: "http://www.mocky.io/v2/5afd54183200004d00f1aba0"
        output: "billSummeryResponse"
    - invoke:
        title: "InvokeRecommendationService"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        version: "1.0.0"
        output: "recommendationResponse"
        target-url: "http://www.mocky.io/v2/5b041ad12f00006f0ae7a8ae"
    - gatewayscript:
        title: "GS:GetBillSummeryResponse"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* FileName                                Version    Created By\
          \                  Modified By               Date           */\r\n/* GS:GetBillSummeryResponse.js\
          \                      1.0        Chiranjibi Panigrahi                 \
          \       10-May-2018    */\r\n/*                                        \
          \                                                                      \
          \           */\r\n/* ***********************************************************************************************************************\
          \ */\r\n/* Purpose: This GW Script file will map the response recieved from\
          \ phone service to the actual output                     */\r\n/*      \
          \                                                                      \
          \                                             */\r\n/* Required params:\
          \                                                                      \
          \                                  */\r\n/* ***********************************************************************************************************************\
          \ */\r\n//load properties configuration from context variable\r\nvar messages\
          \ = apim.getvariable('messages-property.body');\r\n\r\n//fetch all the path\
          \ or query parameters\r\nvar msisdn = apim.getvariable('request.parameters.msisdn');\r\
          \nvar filteringMsisdn = apim.getvariable('request.parameters.filteringmsisdn');\r\
          \nvar billNumber = apim.getvariable('request.parameters.billnumber');\r\n\
          var phoneServiceRecommendation = apim.getvariable('recommendationResponse.body');\r\
          \nvar phoneServiceBillSummaryResponse = apim.getvariable('billSummeryResponse.body');\r\
          \n\r\n//phone service response validation\r\nif (isJSONEmpty(phoneServiceBillSummaryResponse))\
          \ {\r\n    apim.setvariable('errorName', 'ConnectionError');\r\n    \r\n\
          \    apim.error('ConnectionError', 500, 'Internal Error', 'Connection error');\r\
          \n    \r\n} else {\r\n//phone service response mapping    \r\n    var billSummeryResponse\
          \ = {\r\n    };\r\n    billSummeryResponse.tariffCharge = phoneServiceBillSummaryResponse.tariff_charges;\r\
          \n    billSummeryResponse.monthly_extras = phoneServiceBillSummaryResponse.monthly_extras;\r\
          \n    billSummeryResponse.voiceCharges = phoneServiceBillSummaryResponse.voice_charges;\r\
          \n    billSummeryResponse.messageCharges = phoneServiceBillSummaryResponse.message_charges;\r\
          \n    billSummeryResponse.dataCharges = phoneServiceBillSummaryResponse.dataCharges;\r\
          \n    billSummeryResponse.internationalCharges = phoneServiceBillSummaryResponse.international_charges;\r\
          \n    billSummeryResponse.directToBillCharges = phoneServiceBillSummaryResponse.directtobill_charges;\r\
          \n    billSummeryResponse.premiumAndInfoServicesCharges = phoneServiceBillSummaryResponse.premiumAndInfoServices_charges;\r\
          \n    billSummeryResponse.showUsageDetails = phoneServiceBillSummaryResponse.show_usage_details;\r\
          \n    billSummeryResponse.latePaymentChargeDetails = phoneServiceBillSummaryResponse.latePayment_Charge_Details;\r\
          \n    if (msisdn == filteringMsisdn) {\r\n        billSummeryResponse.extraChargesRecommendation\
          \ = getExtraChargesRecommendation(phoneServiceRecommendation);\r\n    }\r\
          \n    billSummeryResponse.isLPFAddedToBill = setIsLPFAddedToBill(phoneServiceBillSummaryResponse);\r\
          \n    \r\n    apim.setvariable('message.body', billSummeryResponse);\r\n\
          }\r\n\r\n//below function will set values in to extraChargesRecommendation\
          \ object.\r\nfunction getExtraChargesRecommendation(phoneServiceRecommendation)\
          \ {\r\n    \r\n    var ExtraChargesRecommendation = {\r\n    };\r\n    var\
          \ RecomendationResponse = setUpRecommendations(phoneServiceRecommendation.recommendations);\r\
          \n    ExtraChargesRecommendation.header = setHeader(RecomendationResponse);\r\
          \n    ExtraChargesRecommendation.recommendations = RecomendationResponse;\r\
          \n    \r\n    return ExtraChargesRecommendation;\r\n}\r\n\r\n//below function\
          \ will set header value in extraChargesRecommendation object\r\nfunction\
          \ setHeader(RecomendationResponse) {\r\n    if (RecomendationResponse.length\
          \ > 1) {\r\n        var header = messages.recommendation.header;\r\n   \
          \     return header;\r\n    } else {\r\n        return null;\r\n    }\r\n\
          }\r\n\r\n//below function will populate value in to isLPFAddedToBill field\r\
          \nfunction setIsLPFAddedToBill(phoneServiceBillSummaryResponse) {\r\n  \
          \  if (phoneServiceBillSummaryResponse.latePayment_Charge_Details == null)\
          \ {\r\n        return null;\r\n    } else if (phoneServiceBillSummaryResponse.latePayment_Charge_Details.length\
          \ > 0)\r\n    return true; else\r\n    return false;\r\n}\r\n\r\n//below\
          \ function will set values in to recommendations array under extraChargesRecommendation\
          \ object\r\nfunction setUpRecommendations(recommendation) {\r\n    if (!\
          \ isJSONEmpty(recommendation)) {\r\n        var recommendationDetails =[];\r\
          \n        var boltOnsRecommendation = filterBoltOnRecommendationTypes(recommendation);\r\
          \n        var boltOnRecommendationDetails = getBoltOnRecommendationDetails(boltOnsRecommendation);\r\
          \n        var tariffRecommendationDetails = getTariffRecommendationDetails(recommendation);\r\
          \n        if (boltOnRecommendationDetails !== null) {\r\n            recommendationDetails.push(boltOnRecommendationDetails);\r\
          \n        }\r\n        if (tariffRecommendationDetails !== null) {\r\n \
          \           recommendationDetails.push(tariffRecommendationDetails);\r\n\
          \        }\r\n        return recommendationDetails;\r\n    }\r\n}\r\n\r\n\
          \r\n//below function will fetch the filter the recommendations whose value\
          \ is not \"TARIFF\"\r\nfunction filterBoltOnRecommendationTypes(recommendation)\
          \ {\r\n    var filteredboltOnsRecommendations =[];\r\n    for (var i = 0;\
          \ i < recommendation.length; i++) {\r\n        if (recommendation[i] !=\
          \ \"TARIFF\") {\r\n            filteredboltOnsRecommendations.push(recommendation[i]);\r\
          \n        }\r\n    }\r\n    return filteredboltOnsRecommendations;\r\n}\r\
          \n\r\n//below function will update the recommendation instance where value\
          \ is not \"TARIFF\"\r\nfunction getBoltOnRecommendationDetails(boltOnsRecommendation)\
          \ {\r\n    if (! isJSONEmpty(boltOnsRecommendation)) {\r\n        var RecommendationDetails\
          \ = {\r\n        };\r\n        if (boltOnsRecommendation.length > 1) {\r\
          \n            RecommendationDetails = createRecommendationDetails(\"MULTIPLE_BOLTONS\"\
          );\r\n        }\r\n        if (boltOnsRecommendation.length == 1) {\r\n\
          \            var RecommendationType = boltOnsRecommendation[0];\r\n    \
          \        RecommendationDetails = createRecommendationDetails(RecommendationType);\r\
          \n        }\r\n        return RecommendationDetails;\r\n    }\r\n    return\
          \ null;\r\n}\r\n\r\n//below function will update the recommendation instance\
          \ where value is  \"TARIFF\"\r\nfunction getTariffRecommendationDetails(TariffRecommendation)\
          \ {\r\n    var RecommendationDetails =[];\r\n    if (isTariffRecommended(TariffRecommendation))\
          \ {\r\n        RecommendationDetails = createRecommendationDetails(\"TARIFF\"\
          );\r\n        return RecommendationDetails;\r\n    }\r\n    return null;\r\
          \n}\r\n\r\n//below function will fetch the filter the recommendations whose\
          \ value is \"TARIFF\"\r\nfunction isTariffRecommended(recommendation) {\r\
          \n    for (var i = 0; i < recommendation.length; i++) {\r\n        if (recommendation[i]\
          \ == 'TARIFF') {\r\n            return true;\r\n        }\r\n    }\r\n \
          \   return false;\r\n}\r\n\r\n//below function will update the object instance\
          \ under recommendation output array object\r\nfunction createRecommendationDetails(RecommendationType)\
          \ {\r\n    var RecommendationDetails = {\r\n    };\r\n    RecommendationDetails.type\
          \ = messages.recommendation[RecommendationType].type;\r\n    RecommendationDetails.action\
          \ = messages.recommendation[RecommendationType].action;\r\n    RecommendationDetails.linkText\
          \ = messages.recommendation[RecommendationType].linkText;\r\n    RecommendationDetails.message\
          \ = messages.recommendation[RecommendationType].message;\r\n    return RecommendationDetails;\r\
          \n}\r\n\r\n//below function checks if json object is null or not\r\nfunction\
          \ isJSONEmpty(jsonObject) {\r\n    var member;\r\n    var result = true;\r\
          \n    for (member in jsonObject) {\r\n        if (jsonObject[member] !==\
          \ null) {\r\n            result = false;\r\n        }\r\n    }\r\n    return\
          \ result;\r\n}"
    catch:
    - errors:
      - "InvalidMsisdn"
      - "ConnectionError"
      - "OperationError"
      - "SOAPError"
      execute:
      - gatewayscript:
          title: "GS:ErrorHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\r\n/* ***********************************************************************************************************************\
            \ */\r\n/* FileName                                Version    Created\
            \ By                  Modified By               Date           */\r\n\
            /* Errorhandling.js                        1.0        Dinesh Tomar   \
            \                                       07-May-2018    */\r\n/*      \
            \                                                                    \
            \                                               */\r\n/* ***********************************************************************************************************************\
            \ */\r\n/* Purpose: This GW Script file will read error config for the\
            \ catch block error name and will set the necessary params    */\r\n/*\
            \          like status code, reason phrase and will return the error json\
            \                                                 */\r\n/* Required params:\
            \ errorName                                                          \
            \                                    */\r\n/* ***********************************************************************************************************************\
            \ */\r\nvar urlOpen = require('urlopen');\r\n//fetch errorName and errorConfig\
            \ JSON from context variables\r\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\"\
            ;\r\nvar errorConfigURLOptions = {\r\n    target: errorConfigURL,\r\n\
            \    sslClientProfile: ''\r\n};\r\nurlOpen.open(errorConfigURLOptions,\
            \ function (error, response) {\r\n    if (error) {\r\n        throw error;\r\
            \n    } else {\r\n        response.readAsJSON(function (error, errorConfigJSON)\
            \ {\r\n            if (error) {\r\n                throw error;\r\n  \
            \          } else {\r\n                var errorName = apim.getvariable('errorName');\r\
            \n                if (errorName == null) {\r\n                    errorName\
            \ = 'default';\r\n                }\r\n                //fetch specific\
            \ block from error config JSON\r\n                if (! isJSONEmpty(errorConfigJSON))\
            \ {\r\n                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\r\
            \n                    var statusCode = errorDetails.statusCode;\r\n  \
            \                  var reasonPhrase = errorDetails.reasonPhrase;\r\n \
            \                   var errorMessage = errorDetails.errorMessage;\r\n\
            \                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\r\n                    apim.setvariable('message.status.code',\
            \ statusCode);\r\n                    apim.setvariable('message.status.reason',\
            \ reasonPhrase);\r\n                    apim.setvariable('message.body',\
            \ errorMessage);\r\n                }\r\n                //else block\
            \ executes in case error config file is not loaded. it will set a default\
            \ error message\r\n                else {\r\n                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\r\n                    apim.setvariable('message.status.code',\
            \ 500);\r\n                    apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\r\n                    apim.setvariable('message.body',\
            \ {\r\n                        \"error\": \"Something went wrong\"\r\n\
            \                    });\r\n                }\r\n            }\r\n   \
            \     });\r\n    }\r\n});\r\n\r\n//below function checks if json object\
            \ is null or not\r\nfunction isJSONEmpty(jsonObject) {\r\n    var member;\r\
            \n    var result = true;\r\n    for (member in jsonObject) {\r\n     \
            \   if (jsonObject[member] != null) {\r\n            result = false;\r\
            \n        }\r\n    }\r\n    return result;\r\n}"
  phase: "realized"
paths:
  /{msisdn}/postpay/bill/billedcharges:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/BillSummaryResponse"
    parameters:
    - name: "msisdn"
      type: "string"
      required: true
      in: "path"
    - name: "billnumber"
      type: "string"
      required: false
      in: "query"
    - name: "filteringmsisdn"
      type: "string"
      required: false
      in: "query"
definitions:
  OneTimeCharge:
    properties:
      appliedDate:
        type: "string"
      charge:
        type: "integer"
        format: "int32"
      billNumber:
        type: "string"
      productName:
        type: "string"
    additionalProperties: false
  RecommendationDetails:
    properties:
      type:
        type: "string"
      action:
        type: "string"
      linkText:
        type: "string"
      message:
        type: "string"
    additionalProperties: false
  recommendations:
    type: "array"
    items:
      $ref: "#/definitions/RecommendationDetails"
  latePaymentChargeDetails:
    type: "array"
    items:
      $ref: "#/definitions/OneTimeCharge"
  EventBillSummary:
    properties:
      billCharge:
        type: "integer"
        format: "int32"
      numberOfEvents:
        type: "integer"
        format: "int32"
    additionalProperties: false
  extraChargesRecommendation:
    properties:
      header:
        type: "string"
      recommendations:
        $ref: "#/definitions/recommendations"
    additionalProperties: false
  BillSummaryResponse:
    properties:
      tariffCharge:
        type: "string"
      monthlyExtras:
        type: "string"
      voiceCharges:
        $ref: "#/definitions/EventBillSummary"
      messageCharges:
        $ref: "#/definitions/EventBillSummary"
      dataCharges:
        $ref: "#/definitions/EventBillSummary"
      internationalCharges:
        $ref: "#/definitions/EventBillSummary"
      directToBillCharges:
        $ref: "#/definitions/EventBillSummary"
      premiumAndInfoServicesCharges:
        $ref: "#/definitions/EventBillSummary"
      showUsageDetails:
        type: "boolean"
      latePaymentChargeDetails:
        $ref: "#/definitions/latePaymentChargeDetails"
      extraChargesRecommendation:
        $ref: "#/definitions/extraChargesRecommendation"
      builderInstance:
        $ref: "#/definitions/Builder"
      lpfaddedToBill:
        type: "boolean"
    additionalProperties: false
  Builder:
    properties: {}
    additionalProperties: false
tags: []
x-ibm-endpoints:
- endpointUrl: "https://api.us.apiconnect.ibmcloud.com/cts-commtech-o2smipcrq22017-1000195327/sb"
  type:
  - "production"
  - "development"
