---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-novum-billccaphoneplan"
  title: "O2APIC-Novum-BillCCAPhoneplan"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/o2apic"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - invoke:
        title: "Invoke:PropertiesHandler"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        - "ConnectionError"
        - "OperationError"
        version: "1.0.0"
        target-url: "http://www.mocky.io/v2/5b07f029320000540070010e"
        output: "messages-property"
    - gatewayscript:
        title: "GS:GetAccessToken"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* GetAccessToken.js\
          \                       1.0        Dinesh Tomar                        \
          \                  08-May-2018    */\n/*                               \
          \                                                                      \
          \                    */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will create request to get access\
          \ token for the auth code received                         */\n/*      \
          \                                                                      \
          \                                             */\n/* Required params:  \
          \                                                                      \
          \                                */\n/* ***********************************************************************************************************************\
          \ */\n//load properties configuration from context variable\nvar messages\
          \ = apim.getvariable('messages-property.body');\n//get all headers\nvar\
          \ clientId = apim.getvariable('client.app.id');\nvar msisdn = apim.getvariable('request.parameters.msisdn');\n\
          var authCode = apim.getvariable('request.headers.x-authcode');\n//check\
          \ all headers validation\nif (msisdn == null || msisdn == undefined || isNaN(parseInt(msisdn))){\n\
          \    apim.setvariable('errorName', InvalidMsisdn);\n    apim.error('InvalidMsisdn',\
          \ 500, 'Internal Error', 'Missing or invalid msisdn');\n}\nelse if (authCode\
          \ == null){\n    apim.setvariable('errorName', InvalidAuthCode);\n    apim.error('InvalidAuthCode',\
          \ 500, 'Internal Error', 'Missing or invalid authcode');\n}\nelse if (messages\
          \ == null || isJSONEmpty(messages)){\n    apim.setvariable('errorName',\
          \ ConnectionError);\n    apim.error('ConnectionError', 500, 'Internal Error',\
          \ 'Connection error');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',\
          \ clientId);\n    apim.setvariable('message.headers.msisdn', msisdn);\n\
          \    apim.setvariable('message.headers.x-authcode', authCode);\n    apim.setvariable('apicAccessTokenURL',\
          \ messages.authserver.generateAccessToken.apicURI);\n    apim.setvariable('apicDisambiguationIdURL',\
          \ messages.authserver.generateDisambiguationId.apicURI);\n}\n\nfunction\
          \ isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n \
          \   for (member in jsonObject) {\n        if (jsonObject[member] != null)\
          \ {\n            result = false;\n        }\n    }\n    return result;\n\
          }"
    - set-variable:
        title: "set-variable"
        actions:
        - set: "message.headers.x-ibm-client-id"
          value: "1e8584b2-3f03-4714-9812-f40ff4d94d81"
        version: "1.0.0"
    - invoke:
        title: "Invoke:GetAccessToken"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        - "ConnectionError"
        - "OperationError"
        version: "1.0.0"
        target-url: "$(apicAccessTokenURL)"
        output: "accessToken"
    - invoke:
        title: "Invoke:GetDisambiguationId"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        - "ConnectionError"
        - "OperationError"
        version: "1.0.0"
        target-url: "$(apicDisambiguationIdURL)"
        output: "disambiguationId"
    - gatewayscript:
        title: "GS:GetPhoneDetails"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* GetPhoneDetails.js\
          \                      1.0        Dinesh Tomar                         \
          \                 08-May-2018    */\n/*                                \
          \                                                                      \
          \                   */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will create request to get phone details\
          \                                                   */\n/*             \
          \                                                                      \
          \                                      */\n/* Required params:         \
          \                                                                      \
          \                         */\n/* ***********************************************************************************************************************\
          \ */\n//load properties configuration from context variable\nvar messages\
          \ = apim.getvariable('messages-property.body');\n//get access token and\
          \ Disambiguation Id from context variables\nif (isJSONEmpty(apim.getvariable('accessToken.body'))){\n\
          \    apim.setvariable('errorName', ConnectionError);\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\n}\nelse if (isJSONEmpty(apim.getvariable('disambiguationId.body'))){\n\
          \    apim.setvariable('errorName', ConnectionError);\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\n}\nelse {\n    var accessToken\
          \ = apim.getvariable('accessToken.body').access_token;\n    var disambiguationId\
          \ = apim.getvariable('request.parameters.msisdn');\n    apim.setvariable('message.headers.disambiguation-id',\
          \ disambiguationId);\n    apim.setvariable('message.headers.authorization',\
          \ \"Bearer \"+accessToken);\n    var phonePlanURL = messages.phoneservice.phoneplan.uri;\n\
          \    //phonePlanURL = phonePlanURL.replace('CURRENT', apim.getvariable('message.headers.msisdn'));\n\
          \    apim.setvariable('phonePlanURL', phonePlanURL);\n    \n}\n\nfunction\
          \ isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n \
          \   for (member in jsonObject) {\n        if (jsonObject[member] != null)\
          \ {\n            result = false;\n        }\n    }\n    return result;\n\
          }"
    - invoke:
        title: "Invoke:GetPhonePlan"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - null
        - "ConnectionError"
        - "OperationError"
        version: "1.0.0"
        target-url: "$(phonePlanURL)"
        output: "phonePlan"
    - map:
        title: "Map:PhonePlanResponse"
        inputs:
          input:
            schema:
              $ref: "#/definitions/PhonePlan"
            variable: "phonePlan.body"
            content: "application/json"
        outputs:
          output:
            schema:
              $ref: "#/definitions/PhonePlan"
            variable: "message.body"
            content: "application/json"
        actions:
        - set: "output.phoneName"
          from: "input.phoneName"
        - set: "output.startDate"
          from: "input.startDate"
        - set: "output.installmentDate"
          from: "input.installmentDate"
        - set: "output.ccaNumber"
          from: "input.ccaNumber"
        - set: "output.totalCredit"
          from: "input.totalCredit"
          value: "\"£\".concat($(input.totalCredit));"
        - set: "output.apr"
          from: "input.apr"
        - set: "output.duration"
          from: "input.duration"
        - set: "output.settlementAmount"
          from: "input.settlementAmount"
          value: "\"£\".concat($(input.settlementAmount));"
        - set: "output.installmentAmount"
          from: "input.installmentAmount"
          value: "\"£\".concat($(input.installmentAmount));"
        - set: "output.pendingAmount"
          from: "input.pendingAmount"
          value: "\"£\".concat($(input.pendingAmount));"
        - set: "output.paidToDate"
          from: "input.paidToDate"
          value: "\"£\".concat($(input.paidToDate));"
        - set: "output.ccaStatus"
          from: "input.ccaStatus"
        - set: "output.paymentStatus"
          from: "input.paymentStatus"
        - set: "output.paymentMessage"
          value: "var messages = apim.getvariable('messages-property.body');\nvar\
            \ phoneplan = apim.getvariable('phonePlan.body');\nvar paymentStatus =\
            \ apim.getvariable('phonePlan.body.paymentStatus').toLowerCase();\nif(paymentStatus\
            \ == 'not_paid')\n{\n    var paidToDate = phoneplan.paidToDate;\n    var\
            \ totalCredit = phoneplan.totalCredit;\n    var paymentMessage = messages.phoneplan[paymentStatus].message;\n\
            \    paymentMessage = paymentMessage.replace(/[{}]/g, \"\");\n    paymentMessage.replace('paidToDate',\
            \ \"£\".concat(paidToDate)).replace('totalCredit', \"£\".concat(totalCredit));\n\
            \    \n}\nelse{\nmessages.phoneplan[paymentStatus].message;\n}"
        version: "1.0.0"
    catch:
    - errors:
      - "InvalidMsisdn"
      - "ConnectionError"
      - "UnauthorizedError"
      - "InvalidAuthCode"
      execute:
      - gatewayscript:
          title: "GS:ErrorHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\n/* ***********************************************************************************************************************\
            \ */\n/* FileName                                Version    Created By\
            \                  Modified By               Date           */\n/* Errorhandling.js\
            \                        1.0        Dinesh Tomar                     \
            \                     07-May-2018    */\n/*                          \
            \                                                                    \
            \                           */\n/* ***********************************************************************************************************************\
            \ */\n/* Purpose: This GW Script file will read error config for the catch\
            \ block error name and will set the necessary params    */\n/*       \
            \   like status code, reason phrase and will return the error json   \
            \                                              */\n/* Required params:\
            \ errorName                                                          \
            \                                    */\n/* ***********************************************************************************************************************\
            \ */\nvar urlOpen = require('urlopen');\n//fetch errorName and errorConfig\
            \ JSON from context variables\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\"\
            ;\nvar errorConfigURLOptions = {\n    target: errorConfigURL,\n    sslClientProfile:\
            \ ''\n};\nurlOpen.open(errorConfigURLOptions, function (error, response)\
            \ {\n    if (error) {\n        throw error;\n    } else {\n        response.readAsJSON(function\
            \ (error, errorConfigJSON) {\n            if (error) {\n             \
            \   throw error;\n            } else {\n                var errorName\
            \ = apim.getvariable('errorName');\n                if (errorName == null)\
            \ {\n                    errorName = 'default';\n                }\n \
            \               //fetch specific block from error config JSON\n      \
            \          if (! isJSONEmpty(errorConfigJSON)) {\n                   \
            \ var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\n\
            \                    var statusCode = errorDetails.statusCode;\n     \
            \               var reasonPhrase = errorDetails.reasonPhrase;\n      \
            \              var errorMessage = errorDetails.errorMessage;\n       \
            \             apim.setvariable('message.headers.content-type', 'application/json');\n\
            \                    apim.setvariable('message.status.code', statusCode);\n\
            \                    apim.setvariable('message.status.reason', reasonPhrase);\n\
            \                    apim.setvariable('message.body', errorMessage);\n\
            \                }\n                //else block executes in case error\
            \ config file is not loaded. it will set a default error message\n   \
            \             else {\n                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\n                    apim.setvariable('message.status.code',\
            \ 500);\n                    apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\n                    apim.setvariable('message.body',\
            \ {\n                        \"error\": \"Something went wrong\"\n   \
            \                 });\n                }\n            }\n        });\n\
            \    }\n});\n\n//below function checks if json object is null or not\n\
            function isJSONEmpty(jsonObject) {\n    var member;\n    var result =\
            \ true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
            \ != null) {\n            result = false;\n        }\n    }\n    return\
            \ result;\n}"
  phase: "realized"
paths:
  /getPhonePlan:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/PhonePlan"
        400:
          description: "Invalid request"
      parameters:
      - name: "msisdn"
        type: "string"
        required: true
        in: "query"
      - name: "x-authcode"
        type: "string"
        required: true
        in: "header"
definitions:
  PhonePlan:
    type: "object"
    properties:
      phoneName:
        type: "string"
      startDate:
        type: "string"
        format: "date-time"
      installmentDate:
        type: "string"
        format: "date-time"
      ccaNumber:
        type: "string"
      totalCredit:
        type: "number"
        format: "double"
      apr:
        type: "number"
        format: "double"
      duration:
        type: "number"
        format: "double"
      settlementAmount:
        type: "number"
        format: "double"
      installmentAmount:
        type: "number"
        format: "double"
      pendingAmount:
        type: "number"
        format: "double"
      paidToDate:
        type: "number"
        format: "double"
      message:
        type: "string"
      ccaMessage:
        type: "string"
      ccaStatus:
        type: "string"
        enum:
        - "ACTIVE"
        - "PENDING_CLOSURE"
        - "NEW"
        - "ASSIGNED"
        - "CLOSED"
        - "CANCELLED"
      paymentStatus:
        type: "string"
        enum:
        - "PAID"
        - "UNPAID"
      paymentMessage:
        type: "string"
tags: []
