---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-novum-postpayboltons"
  title: "o2apic-novum-postpayboltons"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/apic"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - gatewayscript:
        title: "GS:FetchProperties"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* FetchProperties.js\
          \                      1.0        Dinesh Tomar                         \
          \                 14-June-2018   */\n/*                                \
          \                                                                      \
          \                   */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script will create URL to fetch properties from\
          \ config api                                             */\n/*        \
          \                                                                      \
          \                                           */\n/* Required params:    \
          \                                                                      \
          \                              */\n/* ***********************************************************************************************************************\
          \ */\nvar clientId = apim.getvariable('client.app.id');\napim.setvariable('message.headers.x-ibm-client-id',\
          \ clientId);\napim.setvariable('message.headers.content-type', 'application/json');\n\
          //form url for to fetch errorConfig JSON\nvar hostName = apim.getvariable('api.endpoint.hostname');\n\
          var orgName = apim.getvariable('api.org.name');\nvar catalog = apim.getvariable('env.path');\n\
          var configPropertiesURL = 'https://'+hostName+'/'+orgName+'/'+catalog+'/'+'config/properties';\n\
          apim.setvariable('configPropertiesURL', configPropertiesURL);"
        description: "This GW Script will create URL to fetch properties from config\
          \ api"
    - invoke:
        title: "Invoke:PropertiesHandler"
        timeout: 60
        verb: "GET"
        cache-response: "time-to-live"
        stop-on-error:
        - "ConnectionError"
        - "OperationError"
        - "SOAPError"
        version: "1.0.0"
        target-url: "$(configPropertiesURL)"
        output: "messages-property"
        description: "Load all messages  and properties in context"
        cache-ttl: 60
    - gatewayscript:
        title: "GS:ValidateParameters"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* ValidateParameters.js\
          \                   1.0        Dinesh Tomar                            \
          \              25-Apr-2018    */\n/*                                   \
          \                                                                      \
          \                */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will validate request parameters \
          \                                                          */\n/*      \
          \                                                                      \
          \                                             */\n/* Required params:  \
          \                                                                      \
          \                                */\n/* ***********************************************************************************************************************\
          \ */\n//load properties configuration from context variable\nvar messages\
          \ = apim.getvariable('messages-property.body');\n//get all input parameters\n\
          var clientId = apim.getvariable('client.app.id');\nvar msisdn = apim.getvariable('request.parameters.msisdn');\n\
          //check all headers validation\nif (msisdn == null || msisdn == undefined\
          \ || isNaN(parseInt(msisdn))){\n    apim.setvariable('errorName', 'InvalidMsisdn');\n\
          \    apim.error('InvalidMsisdn', 500, 'Internal Error', 'Missing or invalid\
          \ msisdn');\n}\nelse if (messages == null || isJSONEmpty(messages)){\n \
          \   apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',\
          \ clientId);\n    apim.setvariable('message.headers.msisdn', msisdn);\n\
          \    apim.setvariable('soaGetCurrentAndPendingBoltonsEndpoint', messages.soa.getCurrentAndPendingBoltons.uri);\n\
          }\n\nfunction isJSONEmpty(jsonObject) {\n    var member;\n    var result\
          \ = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
          \ != null) {\n            result = false;\n        }\n    }\n    return\
          \ result;\n}"
        description: "This GW Script file will validate request parameters"
    - xslt:
        title: "XSLT:CurrentAndPendingBoltons-SOARequest"
        input: false
        version: "1.0.0"
        source: "<!-- ********************************************************************************************************************\
          \ -->\n<!-- ********************************************************************************************************************\
          \ -->\n<!-- FileName                                  Version    Created\
          \ By             Modified By               Date           -->\n<!-- CurrentAndPendingBoltons-SOARequest.xsl\
          \   1.0        Dinesh Tomar                                     25-Apr-2018\
          \    -->\n<!--                                                         \
          \                                                             -->\n<!--\
          \ ********************************************************************************************************************\
          \ -->\n<!-- Purpose: This XSLT code will create SOAP request for getCurrentAndPendingBoltons\
          \ operation of managepostpayboltons   -->\n<!--          SOA service   \
          \                                                                      \
          \                        -->\n<!-- Required params:                    \
          \                                                                      \
          \           -->\n<!-- ********************************************************************************************************************\
          \ -->\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\
          \ xmlns:dp=\"http://www.datapower.com/extensions\" xmlns:func=\"http://exslt.org/functions\"\
          \ xmlns:apim=\"http://www.ibm.com/apimanagement\" extension-element-prefixes=\"\
          dp func apim\">\n    <xsl:import href=\"local:///isp/policy/apim.custom.xsl\"\
          \ />\n    <xsl:output method=\"xml\" omit-xml-declaration=\"yes\" indent=\"\
          yes\"/>\n    <xsl:strip-space elements=\"*\"/>\n    <xsl:template match=\"\
          /\">\n        <xsl:call-template name=\"apim:setVariable\">\n          \
          \  <xsl:with-param name=\"varName\" select=\"'message.headers.content-type'\"\
          \ />\n            <xsl:with-param name=\"value\" select=\"'application/xml'\"\
          \ />\n        </xsl:call-template>\n        <xsl:call-template name=\"apim:setVariable\"\
          >\n            <xsl:with-param name=\"varName\" select=\"'message.headers.soapaction'\"\
          \ />\n            <xsl:with-param name=\"value\" select=\"''\" />\n    \
          \    </xsl:call-template>\n        <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
          >\n            <soap:Header xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\
          >\n                <cor:debugFlag xmlns:cor=\"http://soa.o2.co.uk/coredata_1\"\
          >true</cor:debugFlag>\n                <cor:providerID xmlns:cor=\"http://soa.o2.co.uk/coredata_1\"\
          >o2</cor:providerID>\n            </soap:Header>\n            <soapenv:Body>\n\
          \                <ns2:getCurrentAndPendingBoltons xmlns:ns2=\"http://soa.o2.co.uk/managepostpayboltonsdata_2\"\
          \ xmlns:ns3=\"http://soa.o2.co.uk/coredata_1\" xmlns=\"http://soa.o2.co.uk/pscommonpostpaydata_2\"\
          \ xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n             \
          \       <ns2:customerId>\n                        <ns3:msisdn><xsl:value-of\
          \ select=\"apim:getContext('request.parameters.msisdn')\"/></ns3:msisdn>\n\
          \                    </ns2:customerId>\n                    <ns2:returnSharedDataTopups>true</ns2:returnSharedDataTopups>\n\
          \                    <ns2:retrieveAdditionalInfo>\n                    \
          \    <ns2:parameterName>BundleSize</ns2:parameterName>\n               \
          \     </ns2:retrieveAdditionalInfo>\n                </ns2:getCurrentAndPendingBoltons>\n\
          \            </soapenv:Body>\n        </soapenv:Envelope>\n    </xsl:template>\n\
          </xsl:stylesheet>\n"
        description: "Extract msisdn from path and prepare request for SOA call"
    - invoke:
        title: "Invoke:GetCurrentAndPendingBoltons"
        target-url: "$(soaGetCurrentAndPendingBoltonsEndpoint)"
        timeout: 60
        verb: "POST"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - "ConnectionError"
        - "OperationError"
        - "SOAPError"
    - xslt:
        title: "XSLT:ConvertSOAPToXML"
        input: true
        version: "1.0.0"
        source: "<!-- ********************************************************************************************************************\
          \ -->\n<!-- ********************************************************************************************************************\
          \ -->\n<!-- FileName                                  Version    Created\
          \ By             Modified By               Date           -->\n<!-- ConvertSOAPToXML.xsl\
          \                      1.0        Dinesh Tomar                         \
          \            25-Apr-2018    -->\n<!--                                  \
          \                                                                      \
          \              -->\n<!-- ********************************************************************************************************************\
          \ -->\n<!-- Purpose: This XSLT code will create XML from SOAP message  \
          \                                                          -->\n<!--   \
          \                                                                      \
          \                                             -->\n<!-- Required params:\
          \                                                                      \
          \                               -->\n<!-- ********************************************************************************************************************\
          \ -->\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\
          \ xmlns:dp=\"http://www.datapower.com/extensions\" extension-element-prefixes=\"\
          dp\">\n    <xsl:output method=\"xml\" omit-xml-declaration=\"yes\" indent=\"\
          yes\"/>\n    <xsl:strip-space elements=\"*\"/>\n    <xsl:template match=\"\
          @* | node()\">\n        <xsl:copy>\n            <xsl:apply-templates select=\"\
          @* | node()\"/>\n        </xsl:copy>\n    </xsl:template>\n    <xsl:template\
          \ match=\"*\">\n        <xsl:element name=\"{local-name()}\">\n        \
          \    <xsl:apply-templates select=\"child::node()\"/>\n        </xsl:element>\n\
          \    </xsl:template>\n</xsl:stylesheet>\n"
        description: "This XSLT code will create XML from SOAP message"
    - xml-to-json:
        title: "Convert:XML-to-JSON"
        version: "1.0.0"
    - set-variable:
        title: "SetVar:ContentType"
        actions:
        - set: "message.headers.content-type"
          value: "application/json"
        version: "1.0.0"
    - gatewayscript:
        title: "GS:GetPostpayBoltons"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* CreatePostpayBoltonResponse.js\
          \          1.0        Dinesh Tomar                                     \
          \     25-Apr-2018    */\n/*                                            \
          \                                                                      \
          \       */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will create postpay boltons response\
          \                                                       */\n/*         \
          \                                                                      \
          \                                          */\n/* Required params:     \
          \                                                                      \
          \                             */\n/* ***********************************************************************************************************************\
          \ */\nvar messages = apim.getvariable('messages-property.body');\nvar coreDataBoltOnFamilies\
          \ = messages.coreDataBoltOnFamilies;\nvar nonRemovableBoltons = messages.nonRemovableBoltons;\n\
          var oneOffBolton = messages.oneOffBolton;\nvar tugoBoltonId = messages.tugoBoltonId;\n\
          var boltonsToBeExcluded = messages.boltonsToBeExcluded;\nvar sortingFieldsArray\
          \ =[ \"isFree\", \"isOneOff\", \"isMonthly\", \"StartDate\", \"ProductId\"\
          ];\n\napim.readInputAsJSON(function (error, soaResponseJSON) {\n    if (error)\
          \ {\n        throw error;\n    } else {\n        var myBoltons = [];\n \
          \       var soaBoltons = soaResponseJSON.Envelope.Body.getCurrentAndPendingBoltonsResponse.myBoltons;\n\
          \        if (!(isJSONEmpty(soaBoltons.bolton)) && isNaN(parseInt(soaBoltons.bolton.length))){\n\
          \            var bolton = [];\n            myBoltons.bolton = bolton;\n\
          \            myBoltons.bolton.push(soaBoltons.bolton);\n        }\n    \
          \    else if (soaBoltons.bolton.length > 0){\n            myBoltons = soaBoltons;\n\
          \        }\n        myBoltons = setBoltonTypeParams(myBoltons);\n      \
          \  var postpayBoltons = {\n        };\n        var boltons =[];\n      \
          \  var promotional_boltons = [];\n        postpayBoltons.boltons = boltons;\n\
          \        postpayBoltons.promotional_boltons = promotional_boltons;\n   \
          \     var filteredBoltons =[];\n        if (! isJSONEmpty(myBoltons) &&\
          \ ! isJSONEmpty(myBoltons.bolton)) {\n            var filteredAndSortedBoltons\
          \ = filterAndSortBoltons(myBoltons.bolton);\n            for (var i = 0;\
          \ i < filteredAndSortedBoltons.length; i++) {\n                var bolton\
          \ = filteredAndSortedBoltons[i].bolton;\n                if (ifJsonHasKey(bolton.ProductParameters,\
          \ 'promotionid')) {\n                    var promotionalBolton = getPostpayBolton(bolton);\n\
          \                    if (ifJsonHasKey(filteredBoltons[i].bolton.ProductParameters,\
          \ 'promotiondescription')) {\n                        promotionalBolton.promotion_description\
          \ = bolton.ProductParameters[promotiondescription].$;\n                \
          \    }\n                    postpayBoltons.promotional_boltons.push(promotionalBolton);\n\
          \                } else {\n                    var postpayBolton = getPostpayBolton(bolton);\n\
          \                    postpayBoltons.boltons.push(postpayBolton);\n     \
          \               postpayBoltons.headerMessage = messages.msg.bolton.postpay.header;\n\
          \                }\n            }\n        }\n        apim.setvariable('message.body',\
          \ postpayBoltons);\n    }\n});\n\nfunction setBoltonTypeParams(myBoltons)\
          \ {\n    var isProductDefault = {\n        \"$\": 0\n    };\n    var matchesAnyNonRemovable\
          \ = {\n        \"$\": 0\n    };\n    var isActive = {\n        \"$\": 0\n\
          \    };\n    var isOneOff = {\n        \"$\": 0\n    };\n    var isMonthly\
          \ = {\n        \"$\": 0\n    };\n    var isTUGo = {\n        \"$\": 0\n\
          \    };\n    var isFree = {\n        \"$\": 0\n    };\n    var isCoreBolton\
          \ = {\n        \"$\": 0\n    };\n    var hasZeroOrNegativeCost = {\n   \
          \     \"$\": 0\n    };\n    var hasFamilySubscriptionClassification = {\n\
          \        \"$\": 0\n    };\n    var isNGTSBoltOn = {\n        \"$\": 0\n\
          \    };\n    for (var i = 0; i < myBoltons.bolton.length; i++) {\n     \
          \   var bolton = myBoltons.bolton[i].bolton;\n        if (bolton.ProductDefault\
          \ != null && bolton.ProductDefault.$ == \"true\") {\n            isProductDefault\
          \ = {\n                \"$\": 1\n            };\n        }\n        if ((bolton.ProductClassification\
          \ != null) && (nonRemovableBoltons.includes(bolton.ProductClassification.$.toLowerCase())))\
          \ {\n            matchesAnyNonRemovable = {\n                \"$\": 1\n\
          \            };\n        }\n        if (bolton.ProductStatus != null &&\
          \ bolton.ProductStatus.$ == 0) {\n            isActive = {\n           \
          \     \"$\": 1\n            };\n        }\n        if (bolton.ProductFamily\
          \ != null && oneOffBolton.includes(bolton.ProductFamily.$.toUpperCase()))\
          \ {\n            isOneOff = {\n                \"$\": 1\n            };\n\
          \        }\n        if ((bolton.ProductFamily != null) && !(oneOffBolton.includes(bolton.ProductFamily.$.toUpperCase())))\
          \ {\n            isMonthly = {\n                \"$\": 1\n            };\n\
          \        }\n        if ((bolton.ProductId != null) && (tugoBoltonId == (bolton.ProductId.$)))\
          \ {\n            isTUGo = {\n                \"$\": 1\n            };\n\
          \        }\n        if ((bolton.MonthlyFee != null) && (bolton.MonthlyFee.$\
          \ == 0)) {\n            isFree = {\n                \"$\": 1\n         \
          \   };\n        }\n        if (bolton.ProductFamily != null && coreDataBoltOnFamilies.includes(bolton.ProductFamily.$.toUpperCase()))\
          \ {\n            isCoreBolton = {\n                \"$\": 1\n          \
          \  };\n        }\n        if ((bolton.MonthlyFee != null) && (bolton.MonthlyFee.$\
          \ <= 0)) {\n            hasZeroOrNegativeCost = {\n                \"$\"\
          : 1\n            };\n        }\n        if ((bolton.ProductClassification\
          \ != null) && (bolton.ProductClassification.$.toLowerCase() == 'subscription\
          \ discount')) {\n            hasFamilySubscriptionClassification = {\n \
          \               \"$\": 1\n            };\n        }\n        if ((bolton.ProductFamily\
          \ != null) && !(bolton.ProductFamily.$.toUpperCase() == 'NGTS')) {\n   \
          \         isNGTSBoltOn = {\n                \"$\": 1\n            };\n \
          \       }\n        myBoltons.bolton[i].bolton.isProductDefault = isProductDefault;\n\
          \        myBoltons.bolton[i].bolton.matchesAnyNonRemovable = matchesAnyNonRemovable;\n\
          \        myBoltons.bolton[i].bolton.isActive = isActive;\n        myBoltons.bolton[i].bolton.isOneOff\
          \ = isOneOff;\n        myBoltons.bolton[i].bolton.isMonthly = isMonthly;\n\
          \        myBoltons.bolton[i].bolton.isTUGo = isTUGo;\n        myBoltons.bolton[i].bolton.isFree\
          \ = isFree;\n        myBoltons.bolton[i].bolton.isCoreBolton = isCoreBolton;\n\
          \        myBoltons.bolton[i].bolton.hasZeroOrNegativeCost = hasZeroOrNegativeCost;\n\
          \        myBoltons.bolton[i].bolton.hasFamilySubscriptionClassification\
          \ = hasFamilySubscriptionClassification;\n        myBoltons.bolton[i].bolton.isNGTSBoltOn\
          \ = isNGTSBoltOn;\n    }\n    return myBoltons;\n}\n\nfunction getPostpayBolton(bolton)\
          \ {\n    var postpayBolton = {\n    };\n    if (bolton.ProductStatus !=\
          \ null) {\n        postpayBolton.status = messages.productStatus[bolton.ProductStatus.$];\n\
          \    }\n    if (bolton.ProductDescription != null) {\n        postpayBolton.description\
          \ = bolton.ProductDescription.$;\n    }\n    if (bolton.StartDate != null)\
          \ {\n        postpayBolton.startDate = bolton.StartDate.$;\n    }\n    postpayBolton.id\
          \ = bolton.ProductId.$;\n    if (bolton.ProductName != null) {\n       \
          \ postpayBolton.product_name = bolton.ProductName.$;\n    }    \n    postpayBolton.charge_type\
          \ = getChargeType(bolton);\n    if (bolton.MonthlyFee != null) {\n     \
          \   postpayBolton.monthly_charge = bolton.MonthlyFee.$;\n    }    \n   \
          \ if (bolton.ExpiryDate != null) {\n        postpayBolton.expiry_date =\
          \ bolton.ExpiryDate.$;\n    }    \n    postpayBolton.can_be_removed = getCanBeRemoved(bolton);\n\
          \    if (bolton.StartDate != null) {\n        postpayBolton.start_date =\
          \ bolton.StartDate.$;\n    }\n    postpayBolton.custom_links = createCustomLinks(bolton.ProductId.$);\n\
          \    if (ifJsonHasKey(bolton.ProductParameters, 'promotionid')) {\n    \
          \    postpayBolton.promotional = ifJsonHasKey(bolton.ProductParameters,\
          \ 'promotionid');\n    }\n    return postpayBolton;\n}\n\nfunction filterAndSortBoltons(boltonsArray)\
          \ {\n    var filteredBoltons =[];\n    var filteredAndSortedBoltons =[];\n\
          \    for (var i = 0; i < boltonsArray.length; i++) {\n        if (!((boltonsToBeExcluded.includes(boltonsArray[i].bolton.ProductId.$))\
          \ || (boltonsArray[i].bolton.isCoreBolton.$ == 1))) {\n            filteredBoltons.push(boltonsArray[i]);\n\
          \        }\n    }\n    filteredAndSortedBoltons = sortBoltons(filteredBoltons,\
          \ sortingFieldsArray);\n    return filteredAndSortedBoltons;\n}\n\nfunction\
          \ sortBoltons(boltonsArray) {\n    session.output.write(boltonsArray[0]);\n\
          \    var boltonsArrayLength = boltonsArray.length;\n    var sortingFieldsArrayLength\
          \ = sortingFieldsArray.length;\n    for (var i = 0; i < boltonsArrayLength\
          \ -1; i++) {\n        for (var j = 0; j < boltonsArrayLength - i; j++) {\n\
          \            if (j + 1 < boltonsArrayLength) {\n                var currentBolton\
          \ = boltonsArray[j].bolton;\n                var nextBolton = boltonsArray[j\
          \ + 1].bolton;\n                for (var k = 0; k < sortingFieldsArrayLength;\
          \ k++) {\n                    var currentBoltonProperty = currentBolton[sortingFieldsArray[k]];\n\
          \                    var nextBoltonProperty = nextBolton[sortingFieldsArray[k]];\n\
          \                    if ((currentBoltonProperty != null) && (nextBoltonProperty\
          \ != null)) {\n                        var currentBoltonValue = currentBoltonProperty.$;\n\
          \                        if (currentBoltonValue.toString().includes(\"-\"\
          )) {\n                            currentBoltonValue = currentBoltonValue.replace(/-/g,\
          \ \"\");\n                        }\n                        if (parseInt(currentBoltonValue)\
          \ != 'NaN') {\n                            currentBoltonValue = parseInt(currentBoltonValue);\n\
          \                        }\n                        var nextBoltonValue\
          \ = nextBoltonProperty.$;\n                        if (nextBoltonValue.toString().includes(\"\
          -\")) {\n                            nextBoltonValue = nextBoltonValue.replace(/-/g,\
          \ \"\");\n                        }\n                        if (parseInt(nextBoltonValue)\
          \ != 'NaN') {\n                            nextBoltonValue = parseInt(nextBoltonValue);\n\
          \                        }\n                        if (currentBoltonValue\
          \ > nextBoltonValue) {\n                            k = sortingFieldsArrayLength;\n\
          \                        }\n                        if (nextBoltonValue\
          \ > currentBoltonValue) {\n                            boltonsArray[j].bolton\
          \ = nextBolton;\n                            boltonsArray[j + 1].bolton\
          \ = currentBolton;\n                            k = sortingFieldsArrayLength;\n\
          \                        }\n                    }\n                }\n \
          \           }\n        }\n    }\n    return boltonsArray;\n}\n\nfunction\
          \ getChargeType(bolton) {\n    if (bolton.MonthlyFee == null && bolton.ProductFamily\
          \ == null) {\n        return null;\n    }\n    if (bolton.MonthlyFee !=\
          \ null && bolton.MonthlyFee.$ == 0) {\n        return messages.msg.bolton.fee.zero;\n\
          \    } else {\n        if (bolton.ProductFamily != null && bolton.ProductFamily.$.includes('ONEOFF'))\
          \ {\n            return messages.msg.bolton.fee.oneoff;\n        } else\
          \ {\n            return messages.msg.bolton.fee.monthly;\n        }\n  \
          \  }\n}\n\nfunction getCanBeRemoved(bolton) {\n    return !(bolton.isProductDefault\
          \ || bolton.matchesAnyNonRemovable || bolton.isOneOff || bolton.isTUGo ||\
          \ bolton.isActive || bolton.hasZeroOrNegativeCost || bolton.hasFamilySubscriptionClassification\
          \ || bolton.isNGTSBoltOn);\n}\n\nfunction createCustomLinks(productId) {\n\
          \    if (messages.o2TravelBoltonId.includes(productId)) {\n        var customLink\
          \ = {\n        };\n        customLink.link_text = \"Learn more\";\n    \
          \    customLink.url = messages.learnmore.url;\n        var customLinks =[];\n\
          \        customLinks.push(customLink);\n        return customLinks;\n  \
          \  }\n}\nfunction isJSONEmpty(jsonObject) {\n    var member;\n    var result\
          \ = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
          \ != null) {\n            result = false;\n        }\n    }\n    return\
          \ result;\n}\n\nfunction ifJsonHasKey(jsonObject, key) {\n    var member;\n\
          \    var result = false;\n    for (member in jsonObject) {\n        if (member.toLowerCase()\
          \ == key) {\n            result = true;\n        }\n    }\n    return result;\n\
          }\n\nfunction ifJsonHasValue(jsonObject, value) {\n    var member;\n   \
          \ var result = false;\n    for (member in jsonObject) {\n        if (jsonObject[member].toLowerCase()\
          \ == value) {\n            result = true;\n        }\n    }\n    return\
          \ result;\n}"
        description: "GW Script to get postpay boltons"
    - validate:
        title: "validate"
        version: "1.0.0"
        definition: "#/definitions/BoltonsResponse"
    catch:
    - errors:
      - "InvalidMsisdn"
      - "ConnectionError"
      - "OperationError"
      - "SOAPError"
      - "UnauthorizedError"
      execute:
      - gatewayscript:
          title: "GS:ErrorHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\n/* ***********************************************************************************************************************\
            \ */\n/* FileName                                Version    Created By\
            \                  Modified By               Date           */\n/* Errorhandling.js\
            \                        1.0        Dinesh Tomar                     \
            \                     07-May-2018    */\n/*                          \
            \                                                                    \
            \                           */\n/* ***********************************************************************************************************************\
            \ */\n/* Purpose: This GW Script file will read error config for the catch\
            \ block error name and will set the necessary params    */\n/*       \
            \   like status code, reason phrase and will return the error json   \
            \                                              */\n/* Required params:\
            \ errorName                                                          \
            \                                    */\n/* ***********************************************************************************************************************\
            \ */\nvar urlOpen = require('urlopen');\n//fetch errorName and errorConfig\
            \ JSON from context variables\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\"\
            ;\nvar errorConfigURLOptions = {\n    target: errorConfigURL,\n    sslClientProfile:\
            \ ''\n};\nurlOpen.open(errorConfigURLOptions, function (error, response)\
            \ {\n    if (error) {\n        throw error;\n    } else {\n        response.readAsJSON(function\
            \ (error, errorConfigJSON) {\n            if (error) {\n             \
            \   throw error;\n            } else {\n                var errorName\
            \ = apim.getvariable('errorName');\n                if (errorName == null)\
            \ {\n                    errorName = 'default';\n                }\n \
            \               //fetch specific block from error config JSON\n      \
            \          if (! isJSONEmpty(errorConfigJSON)) {\n                   \
            \ var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\n\
            \                    var statusCode = errorDetails.statusCode;\n     \
            \               var reasonPhrase = errorDetails.reasonPhrase;\n      \
            \              var errorMessage = errorDetails.errorMessage;\n       \
            \             apim.setvariable('message.headers.content-type', 'application/json');\n\
            \                    apim.setvariable('message.status.code', statusCode);\n\
            \                    apim.setvariable('message.status.reason', reasonPhrase);\n\
            \                    apim.setvariable('message.body', errorMessage);\n\
            \                }\n                //else block executes in case error\
            \ config file is not loaded. it will set a default error message\n   \
            \             else {\n                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\n                    apim.setvariable('message.status.code',\
            \ 500);\n                    apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\n                    apim.setvariable('message.body',\
            \ {\n                        \"error\": \"Something went wrong\"\n   \
            \                 });\n                }\n            }\n        });\n\
            \    }\n});\n\n//below function checks if json object is null or not\n\
            function isJSONEmpty(jsonObject) {\n    var member;\n    var result =\
            \ true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
            \ != null) {\n            result = false;\n        }\n    }\n    return\
            \ result;\n}"
  phase: "realized"
paths:
  /{msisdn}/postpay/boltons:
    get:
      responses:
        200:
          description: "200 OK"
          schema:
            $ref: "#/definitions/BoltonsResponse"
    parameters:
    - $ref: "#/parameters/msisdn"
definitions:
  Bolton:
    properties:
      productName:
        type: "string"
      status:
        type: "string"
      chargeType:
        type: "string"
      promotional:
        type: "boolean"
  BoltonsResponse:
    properties:
      boltons:
        type: "array"
        items:
        - $ref: "#/definitions/Bolton"
      promotionalBoltons:
        type: "array"
        items:
        - $ref: "#/definitions/Bolton"
tags: []
parameters:
  msisdn:
    name: "msisdn"
    type: "integer"
    required: true
    in: "path"
    format: "int64"
