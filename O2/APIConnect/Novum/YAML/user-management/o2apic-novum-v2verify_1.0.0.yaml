---
swagger: "2.0"
info:
  x-ibm-name: "o2apic-novum-v2verify"
  title: "O2APIC-Novum-V2Verify"
  version: "1.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/apic"
consumes:
- "application/json"
produces:
- "application/json"
securityDefinitions:
  clientIdHeader:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
security:
- clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "Log:Payload"
        content: "payload"
        error-content: "payload"
        version: "1.0.0"
    - invoke:
        title: "Invoke:PropertiesHandler"
        timeout: 60
        verb: "GET"
        cache-response: "time-to-live"
        cache-ttl: 900
        stop-on-error:
        - "ConnectionError"
        - "OperationError"
        - "SOAPError"
        version: "1.0.0"
        target-url: "http://demo9811818.mockable.io/myo2mw/message-properties"
        description: "Load all messages  and properties in context"
        output: "messages-property"
        cache-key: "messageProperties"
    - gatewayscript:
        title: "GS:GetAccessToken"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* GetAccessToken.js\
          \                       1.0        Dinesh Tomar                        \
          \                  08-May-2018    */\n/*                               \
          \                                                                      \
          \                    */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will create request to get access\
          \ token for the auth code received                         */\n/*      \
          \                                                                      \
          \                                             */\n/* Required params:  \
          \                                                                      \
          \                                */\n/* ***********************************************************************************************************************\
          \ */\n//load properties configuration from context variable\nvar messages\
          \ = apim.getvariable('messages-property.body');\n//get all headers\nvar\
          \ clientId = apim.getvariable('client.app.id');\nvar authCode = apim.getvariable('request.headers.x-authcode');\n\
          var appVersion = apim.getvariable('request.headers.x-appversion');\nvar\
          \ deviceType = apim.getvariable('request.headers.x-device');\nif (deviceType\
          \ != null){\n    deviceType = deviceType.toLowerCase();\n}\n//check all\
          \ headers validation\nif (authCode == null){\n    apim.setvariable('errorName',\
          \ 'InvalidAuthCode');\n    apim.error('InvalidAuthCode', 500, 'Internal\
          \ Error', 'Missing or invalid authcode');\n}\nelse if (appVersion == null){\n\
          \    apim.setvariable('errorName', 'InvalidAppVersion');\n    apim.error('InvalidAppVersion',\
          \ 500, 'Internal Error', 'Missing or invalid app version');\n}\nelse if\
          \ (deviceType == null || (deviceType != 'android' && deviceType != 'iphone'\
          \ && deviceType != 'windows')){\n    apim.setvariable('errorName', 'InvalidDeviceType');\n\
          \    apim.error('InvalidDeviceType', 500, 'Internal Error', 'Missing or\
          \ invalid device type');\n}\nelse if (messages == null || isJSONEmpty(messages)){\n\
          \    apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',\
          \ clientId);\n    apim.setvariable('message.headers.x-authcode', authCode);\n\
          \    apim.setvariable('message.headers.x-appversion', appVersion);\n   \
          \ apim.setvariable('message.headers.x-device', deviceType);\n    apim.setvariable('apicAccessTokenURL',\
          \ messages.authserver.generateAccessToken.apicURI);\n}\n\nfunction isJSONEmpty(jsonObject)\
          \ {\n    var member;\n    var result = true;\n    for (member in jsonObject)\
          \ {\n        if (jsonObject[member] != null) {\n            result = false;\n\
          \        }\n    }\n    return result;\n}"
        description: "This GW Script file will create request to get access token\
          \ for the auth code received"
    - invoke:
        target-url: "$(apicAccessTokenURL)"
        title: "Invoke:GetAccessToken"
        output: "accessToken"
        stop-on-error:
        - "ConnectionError"
        - "OperationError"
        - "SOAPError"
    - gatewayscript:
        title: "GS:GetAllAssets"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* GetAllAssets.js\
          \                         1.0        Dinesh Tomar                      \
          \                    08-May-2018    */\n/*                             \
          \                                                                      \
          \                      */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will create request to get all assets\
          \ for the auth token supplied                          */\n/*          \
          \                                                                      \
          \                                         */\n/* Required params:      \
          \                                                                      \
          \                            */\n/* ***********************************************************************************************************************\
          \ */\n//load properties configuration from context variable\nvar messages\
          \ = apim.getvariable('messages-property.body');\n//get access token response\n\
          if (isJSONEmpty(apim.getvariable('accessToken.body')) || apim.getvariable('accessToken.body').access_token\
          \ == null) {\n    apim.setvariable('errorName', 'ConnectionError');\n  \
          \  apim.error('ConnectionError', 500, 'Internal Error', 'Connection error');\n\
          } else {\n    var accessToken = apim.getvariable('accessToken.body').access_token;\n\
          \    //set URL and pass access token as authorization header\n    var authZHeader\
          \ = \"Bearer \".concat(accessToken);\n    apim.setvariable('message.headers.authorization',\
          \ authZHeader);\n    apim.setvariable('allAssetsURL', messages.assetservice.assets.uri);\n\
          }\n\nfunction isJSONEmpty(jsonObject) {\n    var member;\n    var result\
          \ = true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
          \ != null) {\n            result = false;\n        }\n    }\n    return\
          \ result;\n}"
        description: "This GW Script file will create request to get all assets for\
          \ the auth token supplied"
    - invoke:
        title: "Invoke:GetPhoneAssets"
        timeout: 60
        verb: "GET"
        cache-response: "protocol"
        cache-ttl: 900
        stop-on-error:
        - "ConnectionError"
        - "OperationError"
        - "SOAPError"
        version: "1.0.0"
        output: "allAssets"
        target-url: "$(allAssetsURL)"
    - gatewayscript:
        title: "GS:GetV2Verify"
        version: "1.0.0"
        source: "/* ********************************************************************************************************************\
          \ */\n/* ********************************************************************************************************************\
          \ */\n/* FileName                             Version    Created By    \
          \              Modified By               Date           */\n/* GetV2Verify.js\
          \                       1.0        Dinesh Tomar                        \
          \                  08-May-2018    */\n/*                               \
          \                                                                      \
          \                 */\n/* ********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file will process phone assets and generate\
          \ v2verify response                                */\n/*              \
          \                                                                      \
          \                                  */\n/* Required params:             \
          \                                                                      \
          \                  */\n/* ********************************************************************************************************************\
          \ */\n//load urlopen module\nvar urlOpen = require('urlopen');\n//load properties\
          \ configuration from context variable\nvar messages = apim.getvariable('messages-property.body');\n\
          var accessToken = apim.getvariable('accessToken.body').access_token;\n//get\
          \ all headers\nvar clientId = apim.getvariable('client.app.id');\nvar authCode\
          \ = apim.getvariable('message.headers.x-authcode');\nvar appVersion = apim.getvariable('message.headers.x-appversion');\n\
          var deviceType = apim.getvariable('message.headers.x-device');\n\n//get\
          \ all assets response and filter phone assets\nif (isJSONEmpty(apim.getvariable('allAssets.body')))\
          \ {\n    apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',\
          \ 500, 'Internal Error', 'Connection error');\n} else {\n    var assets\
          \ = apim.getvariable('allAssets.body');\n    var phoneAssets = getAssets(assets,[\
          \ 'PAYG', 'PAYM', 'PAYMMBB']);\n    phoneAssets = sortJSONArray(phoneAssets,\
          \ 'msisdn');\n    var o2WiFiAssets = getAssets(assets,[ 'O2WIFI']);\n  \
          \  var o2DriveAssets = getAssets(assets,[ 'O2DRIVE']);\n    var o2WalletAssets\
          \ = getAssets(assets,[ 'WALLET']);\n    \n    var v2VerifyJSON = {\n   \
          \ };\n    v2VerifyJSON.broadcastMessage = getBroadcastMessage(appVersion,\
          \ deviceType);\n    v2VerifyJSON.o2WifiEnabled = (o2WiFiAssets.length >\
          \ 0);\n    v2VerifyJSON.o2DriveEnabled = (o2DriveAssets.length > 0);\n \
          \   v2VerifyJSON.hasWallet = (o2WalletAssets.length > 0);\n    v2VerifyJSON.offerLandingPageLoginFrequency\
          \ = parseInt(messages.offer.landingpage.login.frequency);\n    v2VerifyJSON.offerLandingPageTimeDurationFrequency\
          \ = parseInt(messages.offer.landingpage.timeduration.frequency);\n    var\
          \ accounts =[];\n    v2VerifyJSON.accounts = accounts;\n    apim.setvariable('message.body',\
          \ v2VerifyJSON);\n    for (var i = 0; i < phoneAssets.length; i++) {\n \
          \       var assetValue = phoneAssets[i].asset_value;\n        var assetType\
          \ = phoneAssets[i].asset_type;\n        var contractType = getContractType(assetType);\n\
          \        var msisdn = \"\";\n        if (assetValue.startsWith('+')) {\n\
          \            msisdn = assetValue.substring(1);\n        } else {\n     \
          \       msisdn = assetValue;\n        }\n        var msisdnDetails = {\n\
          \        };\n        msisdnDetails.msisdn = msisdn;\n        msisdnDetails.deviceType\
          \ = getDeviceType(assetType);\n        msisdnDetails.postpay = (contractType\
          \ == 'POSTPAY');\n        msisdnDetails.contract_type = contractType;\n\
          \        msisdnDetails.asset_type = assetType;\n        if (contractType\
          \ == 'POSTPAY') {\n            var disambiguationIdURL = messages.authserver.generateDisambiguationId.apicURI;\n\
          \            var disambiguationIdOptions = {\n                target: disambiguationIdURL,\n\
          \                sslClientProfile: 'api-sslcli-all',\n                headers:\
          \ {\n                    'x-ibm-client-id': clientId, 'x-authcode': authCode,\
          \ 'msisdn': msisdn\n                }\n            };\n            urlOpen.open(disambiguationIdOptions,\
          \ function (error, response) {\n                if (error) {\n         \
          \           throw error;\n                } else {\n                   \
          \ response.readAsJSON(function (error, disambiguationIdResponse) {\n   \
          \                     if (error) {\n                            throw error;\n\
          \                        } else {\n                            var disambiguationId\
          \ = disambiguationIdResponse.disambiguation_id;\n                      \
          \      var phoneDetailsURL = messages.phoneservice.msisdndetails.uri;\n\
          \                            //phoneDetailsURL = messages.phoneservice.msisdndetails.uri.replace('CURRENT',\
          \ msisdn);\n                            var phoneDetailsOptions = {\n  \
          \                              target: phoneDetailsURL,\n              \
          \                  sslClientProfile: '',\n                             \
          \   headers: {\n                                    'disambiguation-id':\
          \ disambiguationId, 'Authorization': \"Bearer \".concat(accessToken)\n \
          \                               }\n                            };\n    \
          \                        urlOpen.open(phoneDetailsOptions, function (error,\
          \ response) {\n                                if (error) {\n          \
          \                          throw error;\n                              \
          \  } else {\n                                    response.readAsJSON(function\
          \ (error, phoneDetailsJSON) {\n                                        if\
          \ (error) {\n                                            throw error;\n\
          \                                        } else {\n                    \
          \                        var isCCA = phoneDetailsJSON.isCCA;\n         \
          \                                   msisdnDetails.hasCCA = isCCA;\n    \
          \                                        v2VerifyJSON.accounts.push(msisdnDetails);\n\
          \                                            apim.setvariable('message.body',\
          \ v2VerifyJSON);\n                                        }\n          \
          \                          });\n                                }\n    \
          \                        });\n                        }\n              \
          \      });\n                }\n            });\n        } else {\n     \
          \       v2VerifyJSON.accounts.push(msisdnDetails);\n            apim.setvariable('message.body',\
          \ v2VerifyJSON);\n        }\n    }\n}\n\n//below function returns only those\
          \ assets which has asset types from supplied asset types array\nfunction\
          \ getAssets(assets, assetTypes) {\n    var filteredAssets =[];\n    for\
          \ (var i = 0; i < assets.length; i++) {\n        for (var j = 0; j < assetTypes.length;\
          \ j++) {\n            if (assets[i] != null && assets[i].asset_type != null\
          \ && assets[i].asset_type == assetTypes[j]) {\n                filteredAssets.push(assets[i]);\n\
          \            }\n        }\n    }\n    return filteredAssets;\n}\n\n\nfunction\
          \ getContractType(assetType) {\n    if (assetType == 'PAYM') {\n       \
          \ return 'POSTPAY';\n    } else if (assetType == 'PAYMMBB') {\n        return\
          \ 'POSTPAY';\n    } else if (assetType == 'PAYG') {\n        return 'PREPAY';\n\
          \    }\n}\n\nfunction getDeviceType(assetType) {\n    if (assetType == 'PAYMMBB')\
          \ {\n        return 'TABLET';\n    } else {\n        return 'PHONE';\n \
          \   }\n}\n\nfunction sortJSONArray(jsonArray, sortingField) {\n    var jsonArrayLength\
          \ = jsonArray.length;\n    for (var i = 0; i < jsonArrayLength; i++) {\n\
          \        for (var j = 0; j < jsonArrayLength - i -1; j++) {\n          \
          \  var currentObject = jsonArray[j];\n            var nextObject = jsonArray[j\
          \ + 1];\n            if (currentObject[sortingField] != null && nextObject[sortingField]\
          \ != null && currentObject[sortingField] > nextObject[sortingField]) {\n\
          \                jsonArray[j] = nextObject;\n                jsonArray[j\
          \ + 1] = currentObject;\n            }\n        }\n    }\n    return jsonArray;\n\
          }\n\nfunction getBroadcastMessage(appVersion, deviceType) {\n    var broadcastMessage\
          \ = {\n    };\n    var deviceType = deviceType.toLowerCase();\n    var versions\
          \ = messages.broadcast.message[deviceType].versions.split(',');\n    for\
          \ (var i = 0; i < versions.length; i++) {\n        if (versions[i].includes(appVersion))\
          \ {\n            broadcastMessage.uuid = messages.myo2.broadcast.id.toString();\n\
          \            broadcastMessage.title = messages.myo2.broadcast.title;\n \
          \           broadcastMessage.message = messages.myo2.broadcast.message;\n\
          \            broadcastMessage.linkLabel = messages.myo2.broadcast.linkLabel;\n\
          \            broadcastMessage.linkUrl = messages.myo2.broadcast.linkUrl;\n\
          \        }\n    }\n    return broadcastMessage;\n}\n\nfunction isJSONEmpty(jsonObject)\
          \ {\n    var member;\n    var result = true;\n    for (member in jsonObject)\
          \ {\n        if (jsonObject[member] != null) {\n            result = false;\n\
          \        }\n    }\n    return result;\n}"
        description: "This GW Script file will process phone assets and generate v2verify\
          \ response"
    - gatewayscript:
        title: "GS:SortV2VerificationResponse"
        version: "1.0.0"
        source: "/* ***********************************************************************************************************************\
          \ */\n/* ***********************************************************************************************************************\
          \ */\n/* FileName                                Version    Created By \
          \                 Modified By               Date           */\n/* SortV2VerificationResponse.js\
          \           1.0        Dinesh Tomar                                    \
          \      09-May-2018    */\n/*                                           \
          \                                                                      \
          \        */\n/* ***********************************************************************************************************************\
          \ */\n/* Purpose: This GW Script file sorts the v2verify response      \
          \                                                          */\n/*      \
          \                                                                      \
          \                                             */\n/* Required params:  \
          \                                                                      \
          \                                */\n/* ***********************************************************************************************************************\
          \ */\nvar v2VerifyRawResponse = apim.getvariable('message.body');\nvar v2VerifyResponse\
          \ = {};\nif (v2VerifyRawResponse.broadcastMessage != null){\n    v2VerifyResponse.broadcastMessage\
          \ = v2VerifyRawResponse.broadcastMessage;\n}\nif (v2VerifyRawResponse.accounts\
          \ != null){\n    v2VerifyResponse.accounts = v2VerifyRawResponse.accounts;\n\
          }\nif (v2VerifyRawResponse.o2WifiEnabled != null){\n    v2VerifyResponse.o2WifiEnabled\
          \ = v2VerifyRawResponse.o2WifiEnabled;\n}\nif (v2VerifyRawResponse.o2DriveEnabled\
          \ != null){\n    v2VerifyResponse.o2DriveEnabled = v2VerifyRawResponse.o2DriveEnabled;\n\
          }\nif (v2VerifyRawResponse.hasWallet != null){\n    v2VerifyResponse.hasWallet\
          \ = v2VerifyRawResponse.hasWallet;\n}\nif (v2VerifyRawResponse.offerLandingPageTimeDurationFrequency\
          \ != null){\n    v2VerifyResponse.offerLandingPageTimeDurationFrequency\
          \ = v2VerifyRawResponse.offerLandingPageTimeDurationFrequency;\n}\nif (v2VerifyRawResponse.offerLandingPageLoginFrequency\
          \ != null){\n    v2VerifyResponse.offerLandingPageLoginFrequency = v2VerifyRawResponse.offerLandingPageLoginFrequency;\n\
          }\napim.setvariable('message.body', v2VerifyResponse);"
        description: "This GW Script file sorts the v2verify response"
    catch:
    - errors:
      - "InvalidAuthCode"
      - "InvalidAppVersion"
      - "InvalidDeviceType"
      - "ConnectionError"
      - "OperationError"
      - "SOAPError"
      - "UnauthorizedError"
      execute:
      - gatewayscript:
          title: "GS:ErrorHandling"
          version: "1.0.0"
          source: "/* ***********************************************************************************************************************\
            \ */\n/* ***********************************************************************************************************************\
            \ */\n/* FileName                                Version    Created By\
            \                  Modified By               Date           */\n/* Errorhandling.js\
            \                        1.0        Dinesh Tomar                     \
            \                     07-May-2018    */\n/*                          \
            \                                                                    \
            \                           */\n/* ***********************************************************************************************************************\
            \ */\n/* Purpose: This GW Script file will read error config for the catch\
            \ block error name and will set the necessary params    */\n/*       \
            \   like status code, reason phrase and will return the error json   \
            \                                              */\n/* Required params:\
            \ errorName                                                          \
            \                                    */\n/* ***********************************************************************************************************************\
            \ */\nvar urlOpen = require('urlopen');\n//fetch errorName and errorConfig\
            \ JSON from context variables\nvar errorConfigURL = \"http://demo9811818.mockable.io/error-config\"\
            ;\nvar errorConfigURLOptions = {\n    target: errorConfigURL,\n    sslClientProfile:\
            \ ''\n};\nurlOpen.open(errorConfigURLOptions, function (error, response)\
            \ {\n    if (error) {\n        throw error;\n    } else {\n        response.readAsJSON(function\
            \ (error, errorConfigJSON) {\n            if (error) {\n             \
            \   throw error;\n            } else {\n                var errorName\
            \ = apim.getvariable('errorName');\n                if (errorName == null)\
            \ {\n                    errorName = 'default';\n                }\n \
            \               //fetch specific block from error config JSON\n      \
            \          if (! isJSONEmpty(errorConfigJSON)) {\n                   \
            \ var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];\n\
            \                    var statusCode = errorDetails.statusCode;\n     \
            \               var reasonPhrase = errorDetails.reasonPhrase;\n      \
            \              var errorMessage = errorDetails.errorMessage;\n       \
            \             apim.setvariable('message.headers.content-type', 'application/json');\n\
            \                    apim.setvariable('message.status.code', statusCode);\n\
            \                    apim.setvariable('message.status.reason', reasonPhrase);\n\
            \                    apim.setvariable('message.body', errorMessage);\n\
            \                }\n                //else block executes in case error\
            \ config file is not loaded. it will set a default error message\n   \
            \             else {\n                    apim.setvariable('message.headers.content-type',\
            \ 'application/json');\n                    apim.setvariable('message.status.code',\
            \ 500);\n                    apim.setvariable('message.status.reason',\
            \ 'Internal Server Error');\n                    apim.setvariable('message.body',\
            \ {\n                        \"error\": \"Something went wrong\"\n   \
            \                 });\n                }\n            }\n        });\n\
            \    }\n});\n\n//below function checks if json object is null or not\n\
            function isJSONEmpty(jsonObject) {\n    var member;\n    var result =\
            \ true;\n    for (member in jsonObject) {\n        if (jsonObject[member]\
            \ != null) {\n            result = false;\n        }\n    }\n    return\
            \ result;\n}"
  phase: "realized"
paths:
  /v2/verify:
    get:
      responses:
        200:
          description: "200 OK"
    parameters:
    - $ref: "#/parameters/x-authcode"
    - $ref: "#/parameters/x-appversion"
    - $ref: "#/parameters/x-device"
definitions:
  MsisdnDetails:
    properties:
      msisdn:
        type: "string"
      deviceType:
        type: "string"
        enum:
        - "TABLET"
        - "PHONE"
      postpay:
        type: "boolean"
      contractType:
        type: "string"
      assetType:
        type: "string"
        enum:
        - "PAYM"
        - "PAYMMBB"
        - "PAYG"
        - "O2WIFI"
        - "O2DRIVE"
        - "WALLET"
        - "PUSHNOTIFICATION"
      hasCCA:
        type: "boolean"
    additionalProperties: false
  BroadcastMessage:
    properties:
      uuid:
        type: "string"
      title:
        type: "string"
      message:
        type: "string"
      linkLabel:
        type: "string"
      linkUrl:
        type: "string"
    additionalProperties: false
  VerificationResponse:
    properties:
      hasCCA:
        type: "boolean"
      broadcastMessage:
        $ref: "#/definitions/BroadcastMessage"
      accounts:
        type: "array"
        items:
        - $ref: "#/definitions/MsisdnDetails"
      o2WifiEnabled:
        type: "boolean"
      o2DriveEnabled:
        type: "boolean"
      hasWallet:
        type: "boolean"
      offerLandingPageTimeDurationFrequency:
        type: "integer"
      offerLandingPageLoginFrequency:
        type: "integer"
    additionalProperties: false
tags: []
parameters:
  x-authcode:
    name: "x-authcode"
    type: "string"
    required: true
    in: "header"
  x-appversion:
    name: "x-appversion"
    type: "string"
    required: true
    in: "header"
  x-device:
    name: "x-device"
    type: "string"
    required: true
    in: "header"
