swagger: "2.0"
info:
  title: o2apic-novum-v2verify
  x-ibm-name: o2apic-novum-v2verify
  version: 1.0.0
host: $(catalog.host)
schemes:
- https
basePath: /apic
produces:
- application/json
consumes:
- application/json
security:
- clientIdHeader: []
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
x-ibm-configuration:
  phase: realized
  testable: true
  enforced: true
  properties:
    target-url:
      value: ""
      description: The URL of the target service
      encoded: false
  cors:
    enabled: true
  application-authentication:
    certificate: false
  assembly:
    execute:
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractInputLoggingData
        source: "/* *************************************************************************************************************
          */\n/* *************************************************************************************************************
          */\n/* FileName                      Version    Created By                  Modified
          By               Date           */\n/* ExtractInputLoggingData.js    1.0
          \       Dinesh Tomar                                          06-July-2018
          \  */\n/*                                                                                                               */\n/*
          *************************************************************************************************************
          */\n/* Purpose: This GW Script will extract input metadata for logging                                               */\n/*
          \                                                                                                              */\n/*
          Required params:                                                                                              */\n/*
          ***************************************************************************************************************/\n//Extract
          general metadata from system variables\nvar apiStartTimeMS = (new Date()).getTime();\napim.setvariable('apiStartTimeMS',
          apiStartTimeMS);\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
          apicTxId = \"\";\nif (apim.getvariable('request.headers.apic-transaction-id')){\n
          \   apicTxId = apim.getvariable('request.headers.apic-transaction-id');\n}\nelse
          {\n    apicTxId = uuidv4();\n}\napim.setvariable('apic-transaction-id',
          apicTxId);\napim.setvariable('message.headers.apic-transaction-id', apicTxId);\n\nvar
          xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');\n\n//Extract
          client metadata from system variables\nvar clientIPAddress = apim.getvariable('request.headers.x-client-ip');\nvar
          clientId = apim.getvariable('client.app.id');\nvar clientAppName = apim.getvariable('client.app.name');\nvar
          clientAppType = apim.getvariable('client.app.type');\nvar clientOrgName
          = apim.getvariable('client.org.name');\n\n//Extract api metadata from system
          variables\nvar apiName = apim.getvariable('api.name');\nvar apiVersion =
          apim.getvariable('api.version');\nvar providerOrgName = apim.getvariable('api.org.name');\nvar
          catalogName = apim.getvariable('env.path');\nvar apiBasePath = apim.getvariable('api.root');\nvar
          operationPath = apim.getvariable('api.operation.path');\n\n\n//Extract product
          metadata from system variables\n//var productName = apim.getvariable('product.name');\n//var
          productVersion = apim.getvariable('product.version');\nvar planName = apim.getvariable('plan.name');\nvar
          planVersion = apim.getvariable('plan.version');\nvar planRateLimit = apim.getvariable('plan.rate-limit');\n\n//Extract
          request metadata from system variables\nvar requestMethod = apim.getvariable('request.verb');\nvar
          requestURI = apim.getvariable('request.uri');\nvar requestHeaders = apim.getvariable('request.headers');\n\ndelete
          requestHeaders['accept-encoding'];\ndelete requestHeaders['x-global-transaction-id'];\ndelete
          requestHeaders['user-agent'];\ndelete requestHeaders['via'];\n//delete requestHeaders['x-authcode'];\ndelete
          requestHeaders['authorization'];\n\nvar requestHeadersString = JSON.stringify(requestHeaders);\n\nvar
          logString = \"type:=request\"\n                + \" | system-datetime:=\"
          +        systemDateTime\n                + \" | apic-transaction-id:=\"
          +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
          \               + \" | consumer-ip-address:=\" +    clientIPAddress\n                +
          \" | x-ibm-client-id:=\" +        clientId\n                + \" | client-app-name:=\"
          +        clientAppName\n                + \" | client-app-type:=\" +        clientAppType\n
          \               + \" | client-org-name:=\" +        clientOrgName\n                +
          \" | api-name:=\" +               apiName\n                + \" | api-version:=\"
          +            apiVersion\n                + \" | provider-org-name:=\" +
          \     providerOrgName\n                + \" | catalog-name:=\" +           catalogName\n
          \               + \" | api-base-path:=\" +          apiBasePath\n                +
          \" | operation-path:=\" +         operationPath\n                + \" |
          plan-name:=\" +              planName\n                + \" | plan-version:=\"
          +           planVersion\n                + \" | plan-rate-limit:=\" +        planRateLimit\n
          \               + \" | request-http-method:=\" +    requestMethod\n                +
          \" | request-uri:=\" +            requestURI\n                + \" | request-http-headers:=\"
          +   requestHeadersString;\n                \nconsole.log(logString);\nlogString
          = \"\";\napim.setvariable('logString', logString);\n\nfunction uuidv4()
          {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function
          (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r: (r & 0x3
          | 0x8);\n        return v.toString(16);\n    });\n}"
        description: This GW Script will extract input metadata for logging
    - activity-log:
        title: Log-Payload
        content: payload
        error-content: payload
        version: 1.0.0
    - gatewayscript:
        title: GS-FetchValidationConfig
        version: 1.0.0
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* FetchValidationConfig.js      1.0        Dinesh Tomar                                          04-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will create URL to fetch validation config for all apis                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          var clientId = apim.getvariable('client.app.id');
          apim.setvariable('message.headers.x-ibm-client-id', clientId);
          apim.setvariable('message.headers.content-type', 'application/json');
          //form url for to fetch errorConfig JSON
          var requestURL = apim.getvariable('request.uri');
          var orgName = apim.getvariable('api.org.name');
          var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
          var catalog = apim.getvariable('env.path');
          apim.setvariable('apicURLPrefix', hostName+orgName+'/'+catalog);
          var validationConfigURL = apim.getvariable('apicURLPrefix')+'/'+'config/validationconfig';
          apim.setvariable('validationConfigURL', validationConfigURL);

          //record time in ms just before the invoke policy
          apim.setvariable('startTimeMS', (new Date()).getTime());
          apim.setvariable('policyName', 'Invoke-ValidationConfig');
        description: This GW Script will create URL to fetch validation config for
          all apis
    - invoke:
        title: Invoke-ValidationConfig
        timeout: 60
        verb: GET
        cache-response: time-to-live
        cache-ttl: 60
        version: 1.0.0
        description: Load all validation config in context
        target-url: $(validationConfigURL)
        output: validationConfig
        stop-on-error:
        - ConnectionError
    - gatewayscript:
        version: 1.0.0
        title: GS-ValidateParams
        source: "/* **********************************************************************************************************
          */\n/* **********************************************************************************************************
          */\n/* FileName                   Version    Created By                  Modified
          By               Date           */\n/* ValidateParams.js          1.0        Dinesh
          Tomar                                          03-July-2018   */\n/*                                                                                                            */\n/*
          **********************************************************************************************************
          */\n/* Purpose: This GW Script file will return all API configurations to
          be used for validating input params     */\n/*                                                                                                            */\n/*
          Required params:                                                                                           */\n/*
          ************************************************************************************************************/\n\n//record
          time in ms just after the invoke policy\nvar endTimeMS = (new Date()).getTime();\nvar
          timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\nvar validationConfig = apim.getvariable('validationConfig.body');\nif
          (validationConfig == null || isJSONEmpty(validationConfig)){\n    apim.setvariable('errorName',
          'ConnectionError');\n    apim.error('ConnectionError', 500, 'Internal Error',
          'Connection error');\n}\nelse {\n    var apiName = apim.getvariable('api.name');\n
          \   var operationName = apim.getvariable('api.operation.path');\n    var
          apiConfig = validationConfig.apisConfig[apiName][operationName];\n    var
          paramsConfig = validationConfig.paramsConfig;\n    var requiredPathParams
          = apiConfig.requiredPathParams;\n    var requiredQueryParams = apiConfig.requiredQueryParams;\n
          \   var requiredHeaderParams = apiConfig.requiredHeaderParams;\n    validateRequiredParams('headers',
          requiredHeaderParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredQueryParams, paramsConfig);\n    validateRequiredParams('parameters',
          requiredPathParams, paramsConfig);\n    //record time in ms just before
          the invoke policy\n    apim.setvariable('startTimeMS', (new Date()).getTime());\n
          \   apim.setvariable('policyName', 'Invoke-PropertiesHandler');\n}\n\nfunction
          validateRequiredParams(paramType, requiredParams, paramsConfig){\n    if
          (requiredParams !== \"\"){\n        var reqParams = requiredParams.split('|');\n
          \       for (var i = 0; i < reqParams.length; i++){\n            var paramConfig
          = paramsConfig[reqParams[i]];\n            var inputParam = apim.getvariable('request.'+paramType+'.'+reqParams[i]);\n
          \           var nullValidation = ((inputParam != undefined) || (inputParam
          != null));\n            if (nullValidation){\n                var dataTypeValidation
          = true;\n                dataTypeValidation = validateDataType(inputParam,
          paramConfig);\n                var lengthValidation = true;\n                var
          allowedValuesValidation = true;\n                if (paramConfig.manLength
          || paramConfig.maxLength){\n                    lengthValidation = validateLength(inputParam,
          paramConfig);\n                }\n                if (paramConfig.allowedValues){\n
          \                   allowedValuesValidation = validateAllowedValues(inputParam,
          paramConfig);\n                }\n                if (!(dataTypeValidation)
          || !(lengthValidation) || !(allowedValuesValidation)){\n                    apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                    apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \                   return;\n                }\n                else {\n
          \                   apim.setvariable('message.headers.'+reqParams[i], inputParam);\n
          \                   var clientId = apim.getvariable('client.app.id');\n
          \                   apim.setvariable('message.headers.x-ibm-client-id',
          clientId);\n                    apim.setvariable('message.headers.content-type',
          'application/json');\n                    //form url for to fetch properties
          config JSON\n                    var configPropertiesURL = apim.getvariable('apicURLPrefix')+'/'+'config/properties';\n
          \                   apim.setvariable('configPropertiesURL', configPropertiesURL);\n
          \               }\n            }\n            else {\n                apim.setvariable('errorName',
          paramConfig.validationErrorName);\n                apim.error(paramConfig.validationErrorName,
          paramConfig.validationErrorCode, 'Internal Error', paramConfig.validationErrorMessage);\n
          \               return;\n            }\n            \n        }\n    }\n}\n\nfunction
          validateDataType(inputParam, paramConfig){\n    if (paramConfig.dataType
          == 'number'){\n        return !(isNaN(parseInt(inputParam)));\n    }\n    else
          if (paramConfig.dataType == 'email'){ \n        if (inputParam.includes('.')
          && inputParam.includes('@') && (! inputParam.includes(' ')))\n            return
          true;\n        else\n            return false;\n    }\n    else if (paramConfig.dataType
          == 'string'){\n        if (inputParam != null && inputParam.length != 0)\n
          \           return true;\n        else\n            return false;\n    }\n
          \   else if (paramConfig.dataType == 'version'){\n        if (inputParam
          == null || inputParam.length == 0)\n            return false;\n        else
          if (inputParam.includes('.')) {\n            var splittedArray = inputParam.split('.');\n
          \           var result = true;\n            for (var i = 0; i < splittedArray.length;
          i++){\n                if (isNaN(parseInt(splittedArray[i]))){\n                    result
          = false;\n                    return result;\n                }\n            }\n
          \           return result;\n        }\n        else{\n            return
          !(isNaN(parseInt(inputParam)));\n        }\n    }\n    else\n        return
          true;\n}\n\nfunction validateLength(inputParam, paramConfig){\n    var minLength
          = paramConfig.minLength;\n    var maxLength = paramConfig.maxLength;\n    if
          ((inputParam.length >= minLength) && (inputParam.length <= maxLength))\n
          \       return true;\n    else\n        return false;\n}\n\nfunction validateAllowedValues(inputParam,
          paramConfig){\n    var allowedValues = paramConfig.allowedValues;\n    var
          allowedValuesArray = allowedValues.split('|');\n    var result = false;\n
          \   for (var i = 0; i < allowedValuesArray.length; i++){\n        if (allowedValuesArray[i]
          == inputParam){\n            result = true;\n            return result;\n
          \       }\n    }\n    return result;\n}\n\nfunction isJSONEmpty(jsonObject)
          {\n    var member;\n    var result = true;\n    for (member in jsonObject)
          {\n        if (jsonObject[member] != null) {\n            result = false;\n
          \       }\n    }\n    return result;\n}"
        description: This GW Script file will return all API configurations to be
          used for validating input params
    - invoke:
        title: Invoke-PropertiesHandler
        timeout: 60
        verb: GET
        cache-response: time-to-live
        cache-ttl: 60
        version: 1.0.0
        target-url: $(configPropertiesURL)
        description: Load all messages  and properties in context
        output: messages-property
        cache-key: messageProperties
        username: prafullk
        password: Temp12$$
        stop-on-error:
        - ConnectionError
    - gatewayscript:
        title: GS-GetAccessToken
        version: 1.0.0
        source: "/* **************************************************************************************************************
          */\n/* **************************************************************************************************************
          */\n/* FileName                       Version    Created By                  Modified
          By               Date           */\n/* GetAccessToken.js              1.0
          \       Dinesh Tomar                                          08-May-2018
          \   */\n/*                                                                                                                */\n/*
          **************************************************************************************************************
          */\n/* Purpose: This GW Script file will create request to get access token
          for the auth code received                */\n/*                                                                                                                */\n/*
          Required params:                                                                                               */\n/*
          **************************************************************************************************************
          */\n//record time in ms just after the invoke policy\nvar endTimeMS = (new
          Date()).getTime();\nvar timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\n//load properties configuration from context variable\nvar
          messages = apim.getvariable('messages-property.body');\n//get all headers\nvar
          clientId = apim.getvariable('client.app.id');\nvar authCode = apim.getvariable('request.headers.x-authcode');\nvar
          appVersion = apim.getvariable('request.headers.x-appversion');\nvar deviceType
          = apim.getvariable('request.headers.x-device');\nif (deviceType != null){\n
          \   deviceType = deviceType.toLowerCase();\n}\nif (messages == null || isJSONEmpty(messages)){\n
          \   apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\n}\nelse {\n    apim.setvariable('message.headers.x-ibm-client-id',
          clientId);\n    apim.setvariable('message.headers.x-authcode', authCode);\n
          \   apim.setvariable('message.headers.x-appversion', appVersion);\n    apim.setvariable('message.headers.x-device',
          deviceType);\n    var apicAccessTokenURL = apim.getvariable('apicURLPrefix')+messages.authserver.generateAccessToken.apicURI;\n
          \   apim.setvariable('apicAccessTokenURL', apicAccessTokenURL);\n    \n
          \   //record time in ms just before the invoke policy\n    apim.setvariable('startTimeMS',
          (new Date()).getTime());\n    apim.setvariable('policyName', 'Invoke-GetAccessToken');\n}\n\nfunction
          isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n    for
          (member in jsonObject) {\n        if (jsonObject[member] != null) {\n            result
          = false;\n        }\n    }\n    return result;\n}"
        description: This GW Script file will create request to get access token for
          the auth code received
    - invoke:
        target-url: $(apicAccessTokenURL)
        title: Invoke-GetAccessToken
        output: accessToken
        cache-response: no-cache
        cache-ttl: 60
    - gatewayscript:
        title: GS-GetAllAssets
        version: 1.0.0
        source: "/* ***************************************************************************************************************
          */\n/* ***************************************************************************************************************
          */\n/* FileName                        Version    Created By                  Modified
          By               Date           */\n/* GetAllAssets.js                 1.0
          \       Dinesh Tomar                                          08-May-2018
          \   */\n/*                                                                                                                 */\n/*
          ***************************************************************************************************************
          */\n/* Purpose: This GW Script file will create request to get all assets
          for the auth token supplied                  */\n/*                                                                                                                 */\n/*
          Required params:                                                                                                */\n/*
          ***************************************************************************************************************
          */\n//record time in ms just after the invoke policy\nvar endTimeMS = (new
          Date()).getTime();\nvar timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\n//load properties configuration from context variable\nvar
          messages = apim.getvariable('messages-property.body');\n//get access token
          response\nif (isJSONEmpty(apim.getvariable('accessToken.body')) || apim.getvariable('accessToken.body').access_token
          == null) {\n    apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\n} else {\n    var accessToken
          = apim.getvariable('accessToken.body').access_token;\n    //set URL and
          pass access token as authorization header\n    var authZHeader = \"Bearer
          \".concat(accessToken);\n    apim.setvariable('message.headers.authorization',
          authZHeader);\n    apim.setvariable('allAssetsURL', messages.assetservice.assets.uri);\n
          \   \n    //record time in ms just before the invoke policy\n    apim.setvariable('startTimeMS',
          (new Date()).getTime());\n    apim.setvariable('policyName', 'Invoke-GetPhoneAssets');\n}\n\nfunction
          isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n    for
          (member in jsonObject) {\n        if (jsonObject[member] != null) {\n            result
          = false;\n        }\n    }\n    return result;\n}"
        description: This GW Script file will create request to get all assets for
          the auth token supplied
    - invoke:
        title: Invoke-GetPhoneAssets
        timeout: 60
        verb: GET
        cache-response: no-cache
        cache-ttl: 900
        version: 1.0.0
        output: allAssets
        target-url: $(allAssetsURL)
    - gatewayscript:
        title: GS-GetV2Verify
        version: 1.0.0
        source: "/* ************************************************************************************************************
          */\n/* ************************************************************************************************************
          */\n/* FileName                     Version    Created By                  Modified
          By               Date           */\n/* GetV2Verify.js               1.0
          \       Dinesh Tomar                                          08-May-2018
          \   */\n/*                                                                                                              */\n/*
          ************************************************************************************************************
          */\n/* Purpose: This GW Script file will process phone assets and generate
          v2verify response                        */\n/*                                                                                                              */\n/*
          Required params:                                                                                             */\n/*
          ************************************************************************************************************
          */\n//record time in ms just after the invoke policy\nvar endTimeMS = (new
          Date()).getTime();\nvar timeTakenByPreviousPolicy = endTimeMS - apim.getvariable('startTimeMS');\nvar
          logString = apim.getvariable('logString');\nlogString += \" | \" + apim.getvariable('policyName')
          + \" := \" + timeTakenByPreviousPolicy + \" ms\";\napim.setvariable('logString',
          logString);\n\n//load urlopen module\nvar urlOpen = require('urlopen');\n//load
          properties configuration from context variable\nvar messages = apim.getvariable('messages-property.body');\nvar
          accessToken = apim.getvariable('accessToken.body').access_token;\n//get
          all headers\nvar apicTxId = apim.getvariable('apic-transaction-id');\nvar
          clientId = apim.getvariable('client.app.id');\nvar authCode = apim.getvariable('message.headers.x-authcode');\nvar
          appVersion = apim.getvariable('message.headers.x-appversion');\nvar deviceType
          = apim.getvariable('message.headers.x-device');\n\n//get all assets response
          and filter phone assets\nif (isJSONEmpty(apim.getvariable('allAssets.body')))
          {\n    apim.setvariable('errorName', 'ConnectionError');\n    apim.error('ConnectionError',
          500, 'Internal Error', 'Connection error');\n} else {\n    var assets =
          apim.getvariable('allAssets.body');\n    var phoneAssets = getAssets(assets,[
          'PAYG', 'PAYM', 'PAYMMBB']);\n    phoneAssets = sortJSONArray(phoneAssets,
          'msisdn');\n    var o2WiFiAssets = getAssets(assets,[ 'O2WIFI']);\n    var
          o2DriveAssets = getAssets(assets,[ 'O2DRIVE']);\n    var o2WalletAssets
          = getAssets(assets,[ 'WALLET']);\n    \n    var v2VerifyJSON = {\n    };\n
          \   v2VerifyJSON.broadcastMessage = getBroadcastMessage(appVersion, deviceType);\n
          \   v2VerifyJSON.o2WifiEnabled = (o2WiFiAssets.length > 0);\n    v2VerifyJSON.o2DriveEnabled
          = (o2DriveAssets.length > 0);\n    v2VerifyJSON.hasWallet = (o2WalletAssets.length
          > 0);\n    v2VerifyJSON.offerLandingPageLoginFrequency = parseInt(messages.offer.landingpage.login.frequency);\n
          \   v2VerifyJSON.offerLandingPageTimeDurationFrequency = parseInt(messages.offer.landingpage.timeduration.frequency);\n
          \   var accounts =[];\n    var phonedetails =[];\n    v2VerifyJSON.accounts
          = accounts;\n    v2VerifyJSON.phonedetails = phonedetails;\n    apim.setvariable('message.body',
          v2VerifyJSON);\n    for (var i = 0; i < phoneAssets.length; i++) {\n        var
          assetValue = phoneAssets[i].asset_value;\n        var assetType = phoneAssets[i].asset_type;\n
          \       var contractType = getContractType(assetType);\n        var msisdn
          = \"\";\n        if (assetValue.startsWith('+')) {\n            msisdn =
          assetValue.substring(1);\n        } else {\n            msisdn = assetValue;\n
          \       }\n        var msisdnDetails = {\n        };\n        msisdnDetails.msisdn
          = msisdn;\n        msisdnDetails.deviceType = getDeviceType(assetType);\n
          \       msisdnDetails.postpay = (contractType == 'postpay');\n        msisdnDetails.contract_type
          = contractType;\n        msisdnDetails.asset_type = assetType;\n        v2VerifyJSON.accounts.push(msisdnDetails);\n
          \       apim.setvariable('message.body', v2VerifyJSON);\n        if (contractType
          == 'postpay') {\n            var disambiguationIdURL = apim.getvariable('apicURLPrefix')
          + messages.authserver.generateDisambiguationId.apicURI;\n            var
          disambiguationIdOptions = {\n                target: disambiguationIdURL,\n
          \               sslClientProfile: 'api-sslcli-all',\n                headers:
          {\n                    'x-ibm-client-id': clientId, 'x-authcode': authCode,
          'msisdn': msisdn, 'content-type': 'application/json', 'apic-transaction-id':
          apicTxId\n                }\n            };\n            urlOpen.open(disambiguationIdOptions,
          function (error, response) {\n                if (error) {\n                    throw
          error;\n                } else {\n                    response.readAsJSON(function
          (error, disambiguationIdResponse) {\n                        if (error)
          {\n                            throw error;\n                        } else
          {\n                            var logString = apim.getvariable('logString');\n
          \                           logString = logString + \" | DiD response:=\"
          +  JSON.stringify(disambiguationIdResponse);\n                            apim.setvariable('logString',
          logString);\n                                            \n                            var
          disambiguationId = disambiguationIdResponse.disambiguation_id;\n                            var
          phoneDetailsURL = messages.phoneservice.msisdndetails.uri;\n                            var
          phoneDetailsOptions = {\n                                target: phoneDetailsURL,\n
          \                               sslClientProfile: 'api-sslcli-all',\n                                headers:
          {\n                                    'content-type': 'application/json',
          'disambiguation-id': disambiguationId, 'Authorization': \"Bearer \".concat(accessToken),
          'apic-transaction-id': apicTxId\n                                }\n                            };\n
          \                           urlOpen.open(phoneDetailsOptions, function (error,
          response) {\n                                if (error) {\n                                    throw
          error;\n                                } \n                                //else
          if (response.statusCode == '200') {\n                                else
          {\n                                    response.readAsJSON(function (error,
          phoneDetailsJSON) {\n                                        if (error)
          {\n                                            throw error;\n                                        }
          else {\n                                            var logString = apim.getvariable('logString');\n
          \                                           logString = logString + \" |
          PhoneDetails response:=\" +  JSON.stringify(phoneDetailsJSON);\n                                            apim.setvariable('logString',
          logString);\n                                            if (response.statusCode
          == '200'){\n                                                v2VerifyJSON.phonedetails.push(phoneDetailsJSON);\n
          \                                               apim.setvariable('message.body',
          v2VerifyJSON);\n                                            }\n                                        }\n
          \                                   });\n                                }\n
          \                           });\n                        }\n                    });\n
          \               }\n            });\n        } else {\n            apim.setvariable('message.body',
          v2VerifyJSON);\n        }\n    }\n}\n\n//below function returns only those
          assets which has asset types from supplied asset types array\nfunction getAssets(assets,
          assetTypes) {\n    var filteredAssets =[];\n    for (var i = 0; i < assets.length;
          i++) {\n        for (var j = 0; j < assetTypes.length; j++) {\n            if
          (assets[i] != null && assets[i].asset_type != null && assets[i].asset_type
          == assetTypes[j]) {\n                filteredAssets.push(assets[i]);\n            }\n
          \       }\n    }\n    return filteredAssets;\n}\n\n\nfunction getContractType(assetType)
          {\n    if (assetType == 'PAYM') {\n        return 'postpay';\n    } else
          if (assetType == 'PAYMMBB') {\n        return 'postpay';\n    } else if
          (assetType == 'PAYG') {\n        return 'prepay';\n    }\n}\n\nfunction
          getDeviceType(assetType) {\n    if (assetType == 'PAYMMBB') {\n        return
          'TABLET';\n    } else {\n        return 'PHONE';\n    }\n}\n\nfunction sortJSONArray(jsonArray,
          sortingField) {\n    var jsonArrayLength = jsonArray.length;\n    for (var
          i = 0; i < jsonArrayLength; i++) {\n        for (var j = 0; j < jsonArrayLength
          - i -1; j++) {\n            var currentObject = jsonArray[j];\n            var
          nextObject = jsonArray[j + 1];\n            if (currentObject[sortingField]
          != null && nextObject[sortingField] != null && currentObject[sortingField]
          > nextObject[sortingField]) {\n                jsonArray[j] = nextObject;\n
          \               jsonArray[j + 1] = currentObject;\n            }\n        }\n
          \   }\n    return jsonArray;\n}\n\nfunction getBroadcastMessage(appVersion,
          deviceType) {\n    var broadcastMessage = {\n    };\n    var deviceType
          = deviceType.toLowerCase();\n    var versions = messages.broadcast.message[deviceType].versions.split(',');\n
          \   for (var i = 0; i < versions.length; i++) {\n        if (versions[i].includes(appVersion))
          {\n            broadcastMessage.uuid = messages.myo2.broadcast.id.toString();\n
          \           broadcastMessage.title = messages.myo2.broadcast.title;\n            broadcastMessage.message
          = messages.myo2.broadcast.message;\n            broadcastMessage.linkLabel
          = messages.myo2.broadcast.linkLabel;\n            broadcastMessage.linkUrl
          = messages.myo2.broadcast.linkUrl;\n        }\n    }\n    return broadcastMessage;\n}\n\nfunction
          isJSONEmpty(jsonObject) {\n    var member;\n    var result = true;\n    for
          (member in jsonObject) {\n        if (jsonObject[member] != null) {\n            result
          = false;\n        }\n    }\n    return result;\n}"
        description: This GW Script file will process phone assets and generate v2verify
          response
    - gatewayscript:
        title: GS-SortV2VerificationResponse
        version: 1.0.0
        source: |
          /* **************************************************************************************************************** */
          /* **************************************************************************************************************** */
          /* FileName                         Version    Created By                  Modified By               Date           */
          /* SortV2VerificationResponse.js    1.0        Dinesh Tomar                                          09-May-2018    */
          /*                                                                                                                  */
          /* **************************************************************************************************************** */
          /* Purpose: This GW Script file sorts the v2verify response                                                         */
          /*                                                                                                                  */
          /* Required params:                                                                                                 */
          /* **************************************************************************************************************** */
          var v2VerifyRawResponse = apim.getvariable('message.body');
          var phonedetails = v2VerifyRawResponse.phonedetails;
          var accounts = v2VerifyRawResponse.accounts;

          for (var i = 0; i < phonedetails.length; i++){
              for (var j = 0; j < accounts.length; j++){
                  if (accounts[j].msisdn == phonedetails[i].productId.value.substring(1)){
                      v2VerifyRawResponse.accounts[j].hasCCA = phonedetails[i].isCCA;
                  }
                  else{
                      v2VerifyRawResponse.accounts[j].hasCCA = false;
                      continue;
                  }
              }
          }

          delete v2VerifyRawResponse.phonedetails;

          var v2VerifyResponse = {};
          if (v2VerifyRawResponse.broadcastMessage != null){
              v2VerifyResponse.broadcastMessage = v2VerifyRawResponse.broadcastMessage;
          }
          if (v2VerifyRawResponse.accounts != null){
              v2VerifyResponse.accounts = v2VerifyRawResponse.accounts;
          }
          if (v2VerifyRawResponse.o2WifiEnabled != null){
              v2VerifyResponse.o2WifiEnabled = v2VerifyRawResponse.o2WifiEnabled;
          }
          if (v2VerifyRawResponse.o2DriveEnabled != null){
              v2VerifyResponse.o2DriveEnabled = v2VerifyRawResponse.o2DriveEnabled;
          }
          if (v2VerifyRawResponse.hasWallet != null){
              v2VerifyResponse.hasWallet = v2VerifyRawResponse.hasWallet;
          }
          if (v2VerifyRawResponse.offerLandingPageTimeDurationFrequency != null){
              v2VerifyResponse.offerLandingPageTimeDurationFrequency = v2VerifyRawResponse.offerLandingPageTimeDurationFrequency;
          }
          if (v2VerifyRawResponse.offerLandingPageLoginFrequency != null){
              v2VerifyResponse.offerLandingPageLoginFrequency = v2VerifyRawResponse.offerLandingPageLoginFrequency;
          }
          apim.setvariable('message.body', v2VerifyResponse);
        description: This GW Script file sorts the v2verify response
    - gatewayscript:
        version: 1.0.0
        title: GS-ExtractFinalLoggingData
        source: |-
          /* ************************************************************************************************************* */
          /* ************************************************************************************************************* */
          /* FileName                      Version    Created By                  Modified By               Date           */
          /* ExtractFinalLoggingData.js    1.0        Dinesh Tomar                                          06-July-2018   */
          /*                                                                                                               */
          /* ************************************************************************************************************* */
          /* Purpose: This GW Script will extract final metadata for logging                                               */
          /*                                                                                                               */
          /* Required params:                                                                                              */
          /* ***************************************************************************************************************/
          //Extract general metadata from system variables
          var systemDateTime = apim.getvariable('system.datetime');
          var apicTxId = apim.getvariable('apic-transaction-id');
          var xGlobalTxId = apim.getvariable('request.headers.x-global-transaction-id');
          var requestURI = apim.getvariable('request.uri');

          //Extract response metadata from system variables
          var responseHeaders = apim.getvariable('message.headers');

          delete responseHeaders['Accept-Encoding'];
          delete responseHeaders['X-Global-Transaction-ID'];
          delete responseHeaders['User-Agent'];
          delete responseHeaders['Via'];
          delete responseHeaders['x-authcode'];
          delete responseHeaders['authorization'];
          delete responseHeaders['Authorization'];
          delete responseHeaders['Access-Control-Allow-Methods'];
          delete responseHeaders['Access-Control-Allow-Origin'];
          delete responseHeaders['Access-Control-Allow-Headers'];
          delete responseHeaders['Access-Control-Expose-Headers'];

          var responseHeadersString = JSON.stringify(responseHeaders);
          var responseStatusCode = apim.getvariable('message.status.code');
          var responseStatusReason = apim.getvariable('message.status.reason');
          //calculate time elapsed
          var apiStartTimeMS = apim.getvariable('apiStartTimeMS');
          var apiEndTimeMS = (new Date()).getTime();
          var totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS) + " ms";
          var logString = "type:=response"
                          + " | system-datetime:=" +        systemDateTime
                          + " | apic-transaction-id:=" +    apicTxId
                          + " | global-transaction-id:=" +  xGlobalTxId
                          + " | request-uri:=" +            requestURI
                          + apim.getvariable('logString')
                          + " | response-http-headers:=" +  responseHeadersString
                          + " | response-status-code:=" +   responseStatusCode
                          + " | response-status-reason:=" + responseStatusReason
                          + " | total-time-elapsed:=" +     totalTimeElapsed
                          + " | Final-response:=" +     JSON.stringify(apim.getvariable('message.body'))
                          ;
          console.log(logString);
        description: This GW Script will extract final metadata for logging
    catch:
    - errors:
      - InvalidAuthCode
      - InvalidAppVersion
      - InvalidDeviceType
      - InvalidClientId
      - InvalidUserId
      - InvalidCorrelator
      - ConnectionError
      - SOAPError
      - OperationError
      execute:
      - gatewayscript:
          title: GS-ErrorHandling
          version: 1.0.0
          source: |-
            /* ************************************************************************************************************** */
            /* ************************************************************************************************************** */
            /* FileName                       Version    Created By                  Modified By               Date           */
            /* Errorhandling.js               1.0        Dinesh Tomar                                          07-May-2018    */
            /*                                                                                                                */
            /* ************************************************************************************************************** */
            /* Purpose: This GW Script file will read error config for the catch block error name and will set the necessary  */
            /*          params like status code, reason phrase and will return the error json                                 */
            /* Required params: errorName                                                                                     */
            /* ************************************************************************************************************** */
            var urlOpen = require('urlopen');
            //form url for to fetch errorConfig JSON
            var requestURL = apim.getvariable('request.uri');
            var orgName = apim.getvariable('api.org.name');
            var hostName = requestURL.substr(0, requestURL.indexOf(orgName));
            var catalog = apim.getvariable('env.path');
            var errorConfigURL = hostName+orgName+'/'+catalog+'/'+'config/errorconfig';
            var clientId = apim.getvariable('client.app.id');
            var errorConfigURLOptions = {
                target: errorConfigURL,
                sslClientProfile: 'api-sslcli-all',
                headers: {'x-ibm-client-id': clientId, 'content-type': 'application/json' }
            };
            //fetch errorName and errorConfig JSON from context variables
            urlOpen.open(errorConfigURLOptions, function (error, response) {
                if (error) {
                    throw error;
                } else {
                    response.readAsJSON(function (error, errorConfigJSON) {
                        if (error) {
                            throw error;
                        } else {
                            var errorName = apim.getvariable('errorName');
                            if (errorName == null && apim.getvariable('message.status.code') == null) {
                                errorName = 'default';
                            } else if (errorName == null && apim.getvariable('message.status.reason') != null && apim.getvariable('message.status.reason').startsWith('APIC:') ) {
                                errorName = 'default';
                                apim.setvariable('message.status.code', apim.getvariable('message.status.code'));
                                apim.setvariable('message.status.reason', apim.getvariable('message.status.reason'));
                                apim.setvariable('message.body', apim.getvariable('message.body'));
                            } else {
                                //fetch specific block from error config JSON
                                if (! isJSONEmpty(errorConfigJSON)) {
                                    var errorDetails = errorConfigJSON.errorConfig.errorTypes[errorName];
                                    var statusCode = errorDetails.statusCode;
                                    var reasonPhrase = errorDetails.reasonPhrase;
                                    var errorMessage = errorDetails.errorMessage;
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', statusCode);
                                    apim.setvariable('message.status.reason', reasonPhrase);
                                    apim.setvariable('message.body', errorMessage);
                                }
                                //else block executes in case error config file is not loaded. it will set a default error message
                                else {
                                    apim.setvariable('message.headers.content-type', 'application/json');
                                    apim.setvariable('message.status.code', 500);
                                    apim.setvariable('message.status.reason', 'Internal Server Error');
                                    apim.setvariable('message.body', {
                                        "error": "Something went wrong"
                                    });
                                }
                            }
                        }
                    });
                }
            });

            //below function checks if json object is null or not
            function isJSONEmpty(jsonObject) {
                var member;
                var result = true;
                for (member in jsonObject) {
                    if (jsonObject[member] != null) {
                        result = false;
                    }
                }
                return result;
            }
      - gatewayscript:
          title: GS-ExtractErrorLoggingData
          version: 1.0.0
          source: "/* *************************************************************************************************************
            */\n/* *************************************************************************************************************
            */\n/* FileName                      Version    Created By                  Modified
            By               Date           */\n/* ExtractErrorLoggingData.js    1.0
            \       Dinesh Tomar                                          06-July-2018
            \  */\n/*                                                                                                               */\n/*
            *************************************************************************************************************
            */\n/* Purpose: This GW Script will extract error metadata for logging
            \                                              */\n/*                                                                                                               */\n/*
            Required params:                                                                                              */\n/*
            ***************************************************************************************************************/\n//Extract
            general metadata from system variables\nvar systemDateTime = apim.getvariable('system.datetime');\nvar
            apicTxId = apim.getvariable('apic-transaction-id');\nvar xGlobalTxId =
            apim.getvariable('request.headers.x-global-transaction-id');\nvar requestURI
            = apim.getvariable('request.uri');\n\n//Extract response metadata from
            system variables\nvar responseHeaders = apim.getvariable('message.headers');\n\ndelete
            responseHeaders['Accept-Encoding'];\ndelete responseHeaders['X-Global-Transaction-ID'];\ndelete
            responseHeaders['User-Agent'];\ndelete responseHeaders['Via'];\ndelete
            responseHeaders['x-authcode'];\ndelete responseHeaders['authorization'];\ndelete
            responseHeaders['Authorization'];\ndelete responseHeaders['Access-Control-Allow-Methods'];\ndelete
            responseHeaders['Access-Control-Allow-Origin'];\ndelete responseHeaders['Access-Control-Allow-Headers'];\ndelete
            responseHeaders['Access-Control-Expose-Headers'];\n\nvar responseHeadersString
            = JSON.stringify(responseHeaders);\nvar responseStatusCode = apim.getvariable('message.status.code');\nvar
            responseStatusReason = apim.getvariable('message.status.reason');\nvar
            errorName = apim.getvariable('errorName');\n//calculate time elapsed\nvar
            apiStartTimeMS = apim.getvariable('apiStartTimeMS');\nvar apiEndTimeMS
            = (new Date()).getTime();\nvar totalTimeElapsed = (apiEndTimeMS - apiStartTimeMS)
            + \" ms\";\n\nvar logString = \"type:=error\"\n                + \" |
            system-datetime:=\" +        systemDateTime\n                + \" | apic-transaction-id:=\"
            +    apicTxId\n                + \" | global-transaction-id:=\" +  xGlobalTxId\n
            \               + \" | request-uri:=\" +            requestURI\n                +
            apim.getvariable('logString')\n                + \" | response-http-headers:=\"
            +  responseHeadersString\n                + \" | response-status-code:=\"
            +   responseStatusCode\n                + \" | response-status-reason:=\"
            + responseStatusReason\n                + \" | error-name:=\" +             errorName\n
            \               + \" | total-time-elapsed:=\" +     totalTimeElapsed;\n
            \               \nconsole.log(logString);\n\n"
          description: This GW Script will extract error metadata for logging
  gateway: datapower-gateway
  type: rest
parameters:
  x-authcode:
    name: x-authcode
    type: string
    in: header
  x-appversion:
    name: x-appversion
    type: string
    in: header
  x-device:
    name: x-device
    type: string
    in: header
  x-user-id:
    name: x-user-id
    type: string
    in: header
  x-client-id:
    name: x-client-id
    type: string
    in: header
  x-correlator:
    name: x-correlator
    type: string
    in: header
tags: []
definitions:
  MsisdnDetails:
    properties:
      msisdn:
        type: string
      deviceType:
        type: string
        enum:
        - TABLET
        - PHONE
      postpay:
        type: boolean
      contractType:
        type: string
      assetType:
        type: string
        enum:
        - PAYM
        - PAYMMBB
        - PAYG
        - O2WIFI
        - O2DRIVE
        - WALLET
        - PUSHNOTIFICATION
      hasCCA:
        type: boolean
    additionalProperties: false
  BroadcastMessage:
    properties:
      uuid:
        type: string
      title:
        type: string
      message:
        type: string
      linkLabel:
        type: string
      linkUrl:
        type: string
    additionalProperties: false
  VerificationResponse:
    properties:
      hasCCA:
        type: boolean
      broadcastMessage:
        $ref: '#/definitions/BroadcastMessage'
      accounts:
        type: array
        items:
        - $ref: '#/definitions/MsisdnDetails'
      o2WifiEnabled:
        type: boolean
      o2DriveEnabled:
        type: boolean
      hasWallet:
        type: boolean
      offerLandingPageTimeDurationFrequency:
        type: integer
      offerLandingPageLoginFrequency:
        type: integer
    additionalProperties: false
paths:
  /v2/verify:
    get:
      responses:
        "200":
          description: 200 OK
    parameters:
    - $ref: '#/parameters/x-authcode'
    - $ref: '#/parameters/x-appversion'
    - $ref: '#/parameters/x-device'
    - $ref: '#/parameters/x-user-id'
    - $ref: '#/parameters/x-client-id'
    - $ref: '#/parameters/x-correlator'
